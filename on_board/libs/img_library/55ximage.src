!<arch>
<filenames>/    0           1     0     0       82        `

image_scale_2al.asm/
mad16x16fsal.asm/
pixel_interal.asm/
ycbcr422_rgb565al.asm/
Boundarymn.asm/ 1047322185  0     0     0       2681      `
; Function:    	IMG_boundary
; Version:     	2.00
; Processor:   	C55xx
; Author:		Peng Xu
; Date:			08-09-2001
; Description: 	Get the boundary of an image whos background pixel
;				value is zero. If a boundary pixel is detected, the 
;               function will output its coordinates into buffer XY and
;               the pixel value into buffer output.
;              
; Usage:  	   	IMG_boundary( short *in_data, int rows, int cols  
;						  int *out_coord, int *out_gray );
;                                  
;  
;
; Copyright Texas instruments Inc, 2001
;****************************************************************

      .global _IMG_boundary

      .text
_IMG_boundary:
	PSH		T2						;store T2 into stack
	PSH		T3						;store T3 into stack
	AND		#001FFh, mmap(ST0_55)	;clear all ACOVx,TC1, TC2, C
	
	SUB		#1, T0					;outer loop counter
    MOV		T0, BRC0				;set the outer loop counter
    
   	MOV		#2, T0					;input index step, load 2 
    								;pixels each instruction
    								
    MOV		#0, T2					;initialize row_index
    				
    SFTL	T1, #-1					;T1 holds the cols
    SFTL	T1, #-1					;divided cols by 4
    SUB		#1, T1					;inner loop counter
	
	||rptblocal outer - 1
	
	MOV		#-1, T3					;reset col_index
	|| rptblocal inner - 1				;outer loop counter
	
	MOV dbl(*(AR0+T0)), pair (LO(AC0))	
									;load pixel_0 and pixel_1
	MOV dbl(*(AR0+T0)), pair (LO(AC2))
									;load pixel_2 and pixel_3

	||ADD    #1, T3					;update col_index
	BCC		br1, AC0==#0			;if pixel_0 is non-zero
	MOV		AC0, *AR2+				;output pixel value
	MOV 	pair(T2), dbl(*(AR1+T0));output pixel coordinates
	
br1:ADD		#1, T3					;update col_index
	XCC		AC1!=#0					;if pixel_1 is non-zero
	MOV 	AC1, *AR2+				;output pixel value
	XCC		AC1!=#0					;then 
	MOV 	pair(T2), dbl(*(AR1+t0));output pixel coordinates
	
	||ADD   #1, T3					;update col_index
	XCC		AC2!=#0					;if pixel_2 is non-zero
	MOV 	AC2, *AR2+				;output pixel value
	XCC		AC2!=#0					;then
	MOV 	pair(T2), dbl(*(AR1+T0));output pixel coordinates
	
	||ADD	#1, T3					;update col_index
	XCC		AC3!=#0					;if pixel_3 is non-zero
	MOV 	AC3, *AR2+				;output pixel value
	XCC		AC3!=#0					;then
	MOV 	pair(T2), dbl(*(AR1+T0));output pixel coordinates
inner:
	MOV		T1, BRC1				;re_initialize inner loop counter
	ADD     #1, T2					;update row_index	
outer:

;
; Return to calling function
;----------------------------------------------------------------
	POP		T3						;restore T3
	POP		T2						;restore T2
	RET								;return to calling function

;----------------------------------------------------------------
;End of file



col2rowmn.asm/  978453680   0     0     0       1295      `
;****************************************************************
; Function:    	col2row
; Version:     	1.00
; Processor:   	C55xx
; Description: 	copy a column of an image to a buffer
;              
; Usage:  	   	col2row(int *col, int *row, 
;						int IMAGE_WIDTH, int HEIGHT );
;                                     
; Note:		    The row buffer size should be the same as HEIGHT	
; Arguments:
;       col:    the starting address of the column
;		row:    the address of the buffer
;IMAGE_WIDTH:    the width of the image
;	 HEIGHT:    the size of the column need to be processed
;
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .cpl_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

      .global _col2row
                           
      .text
_col2row:

	SUB		#1, T1
	MOV		T1, CSR
	
	RPT     CSR
	MOV	    *(AR0+T0), *AR1+

;
; Return to calling function
;----------------------------------------------------------------
	RET							;return to calling function

;----------------------------------------------------------------
;End of file

conv_3x3mn.asm/ 1027364738  0     0     0       2236      `
;****************************************************************
; Function:    IMG_conv_3x3
; Version:     0.0
; Processor:   C5510
; Description:  3x3 convolution
; hardware extension.
;
; void IMG_conv_3x3(unsigned char *input, unsigned char *output,
;                   unsigned char *mask, int column, int shift); 
 ;Change history:
; 
;       VERSION   DATE      /    AUTHORS        COMMENT
;         1.0    05/15/02       CHENG PENG          original creation
; Benchmark 6x(column-2)+16
; code size 89 words
; Copyright Texas instruments Inc, 2002
;****************************************************************
         
     
          .ARMS_off               ; 
          .CPL_on     
          .mmregs                 ;
          .global _IMG_conv_3x3
          .text 
         
         
_IMG_conv_3x3
       ;AR0: input AR1: output   AR2: mask, T0: column
       BSET CDPLC
       MOV		mmap(AR2), BSAC
       MOV      #9, BKC
       MOV      #0,CDP
       || MOV T1, T2
       MOV AR0, AR2
       ADD #1,AR2 ;AR0 and AR2 hold input pointers
      || MOV T0, AC0   ; T0=column   
       SFTL AC0,#-1,AC0            ;      (3/1)
       SUB #1,AC0,T1
       MOV T1,BRC0  
       ||MOV T0, AC0
       SFTL AC0,#1,AC0
       || SUB #2,T0 
       MOV AC0,T1
                    ;      (2/1)
       RPTBLOCAL loop0              ;      (2/1)
       MPY *AR0+, *CDP+, AC0
        ::MPY *AR2+, *CDP+, AC1
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *(AR0+T0), *CDP+, AC0
         ::MAC *(AR2+T0), *CDP+, AC1 
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *(AR0+T0), *CDP+, AC0
         ::MAC *(AR2+T0), *CDP+, AC1 
      MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
      MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1  
       MAC *(AR0-T1), *CDP+, AC0
         ::MAC *(AR2-T1), *CDP+, AC1     
        SFTL AC0,T2,AC0
         MOV AC0, *AR1+
        ||SFTL AC1,T2,AC1    
loop0   MOV AC1, *AR1+

       BCLR CDPLC
       BSET	ARMS			        ;set ARMS              
       RETURN                       ;      (2/5)
      corr_3x3mn.asm/ 1027364676  0     0     0       3400      `
;****************************************************************
; Function:    IMG_corr_3x3
; Version:     0.0
; Processor:   C5510
; Description:  3x3 correlation
; hardware extension.
;
; Usage:    void IMG_corr_3x3(unsigned char *input, unsinged char *output,
;                             unsigned char *mask, int row, int column, int shift, int roundval); 
;Change history:
; 
;       VERSION   DATE      /    AUTHORS        COMMENT
;         1.0    05/15/02       CHENG PENG          original creation
; Benchmark 8.2x(row-2)x(column-2)+25 
; equivalent to c62 algorithm 6.2
; code size 165 words
; Copyright Texas instruments Inc, 2002
;****************************************************************
         
          .ARMS_off               ; 
          .CPL_on     
          .mmregs                 ;
          .global _IMG_corr_3x3
          .text 
         
         
_IMG_corr_3x3
       ;AR0: input AR1: output   AR2: mask, T0: row T1: column AR3: shift
       PSH T2,T3
       PSHBOTH XAR4
       MOV AR3,T3
       BSET CDPLC
       MOV		mmap(AR2), BSAC
       MOV      #9, BKC
       MOV      #0, CDP
        
      || SUB #3, T0, T0	
       MOV T0, BRC0 ; loop0 row-2
       SUB #2, T1, T0 ; T0=8
      
       MOV T1, AC0   ; T0=column   
       SFTL AC0,#1,AC2 ; AC2=20            ;      (3/1)
       SUB #2,AC2, AC3 ; AR3= #18
       
       MOV T1, AC0
       SFTL AC0,#-1,AC0
       SUB #3, AC0, T2 ; loop1 (column/2)-2
       
       MOV AR0, AR2
       ADD #1,AR2 ;AR0 and AR2 hold input pointers
       
       RPTB loop0
       MOV T2, BRC1
       MOV AC2, T1
       RPTBLOCAL loop1
       MOV AR4,AC0
       MOV AR4,AC1              
       MAC *AR0+, *CDP+, AC0
        ::MPY *AR2+, *CDP+, AC1
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *(AR0+T0), *CDP+, AC0
         ::MAC *(AR2+T0), *CDP+, AC1 
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *(AR0+T0), *CDP+, AC0
         ::MAC *(AR2+T0), *CDP+, AC1 
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1  
       MAC *(AR0-T1), *CDP+, AC0
         ::MAC *(AR2-T1), *CDP+, AC1     
        SFTL AC0,T3,AC0
         MOV AC0, *AR1+
        ||SFTL AC1,T3,AC1    
loop1   MOV AC1, *AR1+
          MOV AC3, T1
          ||MOV AR4,AC0
          MOV AR4,AC1  
          MAC *AR0+, *CDP+, AC0
        ::MAC *AR2+, *CDP+, AC1
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *(AR0+T0), *CDP+, AC0
         ::MAC *(AR2+T0), *CDP+, AC1 
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *(AR0+T0), *CDP+, AC0
         ::MAC *(AR2+T0), *CDP+, AC1 
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1
       MAC *AR0+, *CDP+, AC0
         ::MAC *AR2+, *CDP+, AC1  
       MAC *(AR0-T1), *CDP+, AC0
         ::MAC *(AR2-T1), *CDP+, AC1  
        SFTL AC0,T3,AC0
         MOV AC0, *AR1+
        ||SFTL AC1,T3,AC1    
loop0   MOV AC1, *AR1+  
       
       POPBOTH XAR4
       POP T2,T3
       BCLR CDPLC
       BSET	ARMS			        ;set ARMS              
       RETURN                       ;      (2/5)
      decInplcemn.asm/1013717796  0     0     0       5983      `
;****************************************************************
; Function:    	decomInplace
; Version:     	1.00
; Processor:   	C55xx
; Description: 	1D gerneral purpose wavelet decomposition
;              
; Usage:  	   	decomInplace( int *singal, int *wksp, 
;	                           int LENGTH, int *wavename );
;                                     
; Note:        	The wksp and signal should have the same 
;	     		size of LENGTH
; Arguments:	
;	 signal:	The buffer of elements for decomposition
;      wksp:	work space buffer
;    LENGTH:	size of buffer signal and wksp
;  wavename:    wavelet filter coefficients
;
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ


; Register usage
; --------------
      .asg     CDP, signal          ;input data, circular pointer
      .asg     AR1, low_out         ;low output, linear pointer
      .asg     AR2, high_out        ;high output, linear pointer
      .asg     AR3, low_filter	    ;low_pass filter, circular pointer
      .asg     AR4, high_filter     ;high_pass filter, circular pointer
     
      .asg     XAR1, xlow_out       ; extend low_out
      .asg     XAR2, xhigh_out      ; extend high_out
      .asg     XAR3, xlow_filter    ; extend low_filter
      .asg     XAR4, xhigh_filter   ; extned high_filter      
      .asg     BSAC, signal_base	;base addr for input_ptr
      .asg     BSA45, high_fl_base  ;base addr for low_filter
      .asg     BSA23, low_fl_base   ;base addr for high_filter
      
      .asg     BK03, low_fl_sz      ;circ buffer size for filter_sz
      .asg     BK47, high_fl_sz     ;circ buffer size for filter_sz 
      .asg     BKC,  signal_sz      ;input circular buffer size
    

      .asg     CSR, inner_cnt       ;inner loop count
      .asg     BRC0, outer_cnt      ;outer loop count

ST2mask  .set  0000000100011000b   	;circular/linear pointers


      .global _decomInplace

      .text
_decomInplace:

;
; Configure the status registers as needed.
;----------------------------------------------------------------

	AND	#001FFh, mmap(ST0_55)		;clear all ACOVx,TC1, TC2, C
 
	OR	#04140h, mmap(ST1_55)		;set CPL, SXMD, FRCT

	AND	#0F9DFh, mmap(ST1_55)		;clear M40, SATD, 54CM    
    
	AND	#07A00h, mmap(ST2_55)		;clear ARMS, RDM, CDPLC, AR[0-7]LC

	AND	#0FFDDh, mmap(ST3_55)		;clear SATA, SMUL

;
; Setup passed parameters in their destination registers
; Setup circular/linear CDP/ARx behavior
;----------------------------------------------------------------
	MOV		mmap(AR0), signal_base	;base address of input 
	MOV		*AR2+, T1				;length of filter
    MOV		mmap(AR2), low_fl_base	;base address of low_pass filter
    AMAR 	*(AR2+T1)              	;point to high_pass filter
	MOV		mmap(AR2), high_fl_base	;base address of high_pass filter
	
	MOV		#0,	signal           	;reset input buffer index
	MOV		#0, low_filter          ;reset low_pass filter index
	MOV		#0, high_filter         ;reset high_pass filter index
	
	MOV		mmap(T1), low_fl_sz	    ;low_pass filter circular buffer size
    MOV		mmap(T1), high_fl_sz    ;high_pass filter circular buffer size
    MOV 	mmap(T0), signal_sz     ;input circular buffer size  
        
; Set circular/linear ARx behavior

	MOV		#ST2mask, mmap(ST2_55)	;configure circular/linear pointers   
	
;
; Decomposition
;----------------------------------------------------------------
	SFTL	T0, #-1             	;output_length = input_length>>1           
	MOV		xlow_out, xhigh_out   	;low output buffer
	ADD		#0, *(high_out+T0)  	;high output buffer
	
	SUB		#1, T0         
	MOV		T0, outer_cnt           ;outer loop executes times    
	
	SUB		#3, T1      
	MOV		T1, inner_cnt       	;inner loop executes times
	NEG		T1, T0              	;T0 is used to reset input pointer
                                       
;
; Start of outer loop
;----------------------------------------------------------------
	RPTBLOCAL	loop1-1				;start the outer loop

;1st iteration                            
   	MPY	*low_filter+, *signal+, AC0
	::MPY	*high_filter+, *signal+, AC1
   
;inner loop
	||RPT	inner_cnt
	MAC	*low_filter+, *signal+, AC0
	::MAC	*high_filter+, *signal+, AC1

;last iteration
	MAC	*low_filter+, *(signal+T0), AC0
	::MAC	*high_filter+, *(signal+T0), AC1
  
;store result to memory
	MOV	HI(AC0), *low_out+	        ;store short result to low_out buffer
	::MOV	HI(AC1), *high_out+     ;store short result to high_out buffer
	
loop1:					            ;end of outer loop

;
; Restore the output to the input buffer
;-------------------------------------------- 
	MOV		mmap(signal_sz), T1                  
	SFTL	T1, #-1
	NEG		T1, T0
	AMAR   	*(low_out+T0)            ;Reset low_output index
	SUB    	#1, T1                   ;

	MOV		T1, inner_cnt
    RPT		inner_cnt
    MOV    	dbl(*low_out+), dbl(*AR0+)
    
;
; Restore status regs to expected C-convention values as needed
;----------------------------------------------------------------
	BCLR	FRCT			        ;clear FRCT

	AND	#0FE00h, mmap(ST2_55)	    ;clear CDPLC and AR[7-0]LC

	BSET	ARMS			        ;set ARMS

;
; Return to calling function
;----------------------------------------------------------------
	||RET							;return to calling function

;----------------------------------------------------------------
;End of file

decomColmn.asm/ 979160934   0     0     0       5653      `
;****************************************************************
; Function:    	decomCol
; Version:     	1.00
; Processor:   	C55xx
; Description: 	wavelet decomposition of a column of an image
;              
; Usage:		decomCol( int *signal, int *low_out, 
;						   int *high_out, int IMAGE_WIDTH, 
;						   int HEIGHT, int *wavename );
;                                     
; Note:			Before using this function, we should copy the 
;				column we want to process to a buffer. Then use
;				this function the decompsed signal will be saved
;				in the same column.
;   Arguments:	
;      signal:	A buffer saved the elements of the column
;     low_out: 	should be the starting address of the column
;    high_out:	should be the middle point address of the column
; IMAGE_WIDTH:  The width of the image
;      HEIGHT:  The length of the column we want to process, it 
;				may be different from the height of the image
;	 wavename:  wavelet filter coefficients
;
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ


; Register usage
; --------------
      .asg     CDP, input           ;input data, circular pointer
      .asg     AR1, low_out         ;low output, linear pointer
      .asg     AR2, high_out        ;high output, linear pointer
      .asg     AR3, low_filter	    ;low_pass filter, circular pointer
      .asg     AR4, high_filter     ;high_pass filter, circular pointer
     
      .asg     BSAC, input_base     ;base addr for input_ptr
      .asg     BSA45, high_fl_base  ;base addr for low_filter
      .asg     BSA23, low_fl_base   ;base addr for high_filter
      
      .asg     BK03, low_fl_sz      ;circ buffer size for filter_sz
      .asg     BK47, high_fl_sz     ;circ buffer size for filter_sz 
      .asg     BKC,  input_sz       ;input circular buffer size
    

      .asg     CSR, inner_cnt       ;inner loop count
      .asg     BRC0, outer_cnt      ;outer loop count

ST2mask  .set  0000000100011000b   	;circular/linear pointers

      .global _decomCol

      .text
_decomCol:

;
; Configure the status registers as needed.
;----------------------------------------------------------------

	AND	#001FFh, mmap(ST0_55)		;clear all ACOVx,TC1, TC2, C
 
	OR	#04140h, mmap(ST1_55)		;set CPL, SXMD, FRCT

	AND	#0F9DFh, mmap(ST1_55)		;clear M40, SATD, 54CM    
    
	AND	#07A00h, mmap(ST2_55)		;clear ARMS, RDM, CDPLC, AR[0-7]LC

	AND	#0FFDDh, mmap(ST3_55)		;clear SATA, SMUL

;
; Setup passed parameters in their destination registers
; Setup circular/linear CDP/ARx behavior
;----------------------------------------------------------------   
;
; Setup loop counts
;----------------------------------------------------------------     
	MOV 	mmap(T1), input_sz      ;input circular buffer size = HEIGHT
	SFTL	T1, #-1
	SUB		#1, T1         
	MOV		T1, outer_cnt           ;outer loop executes times      
	
	MOV		T0, T1                  ;WIDTH is in T1
	
	MOV		mmap(AR0), input_base	;base address of input 
	MOV		*AR3+, T0				;length of filter         
	MOV		mmap(AR3), low_fl_base	;base address of low_pass filter
    AMAR 	*(AR3+T0)              	;point to high_pass filter
	MOV		mmap(AR3), high_fl_base	;base address of high_pass filter
	
	MOV		#0,	input               ;reset input buffer index
	MOV		#0, low_filter          ;reset low_pass filter index
	MOV		#0, high_filter         ;reset high_pass filter index
	
	MOV		mmap(T0), low_fl_sz	    ;low_pass filter circular buffer size
    MOV		mmap(T0), high_fl_sz    ;high_pass filter circular buffer size
       
 
        
; Set circular/linear ARx behavior

	MOV		#ST2mask, mmap(ST2_55)	;configure circular/linear pointers
 	
	SUB		#3, T0
	MOV		T0, inner_cnt       	;inner loop executes times
	NEG		T0, T0              	;T0 is used to reset input pointer                                   

;
; Start of outer loop
;----------------------------------------------------------------
	RPTBLOCAL	loop1-1				;start the outer loop 
;1st iteration                             
   	MPY	*low_filter+, *input+, AC0
	::MPY	*high_filter+, *input+, AC1
   
;inner loop
	||RPT	inner_cnt
	MAC	*low_filter+, *input+, AC0
	::MAC	*high_filter+, *input+, AC1

;last iteration
	MAC	*low_filter+, *(input+T0), AC0
	::MAC	*high_filter+, *(input+T0), AC1
  
;store result to memory  
	
	MOV	HI(AC0), *(low_out+T1)	    ;store short result to low_out buffer
	::MOV	HI(AC1), *(high_out+T1) ;store short result to high_out buffer
	
loop1:					            ;end of outer loop

;
; Restore status regs to expected C-convention values as needed
;----------------------------------------------------------------
	BCLR	FRCT			        ;clear FRCT

	AND	#0FE00h, mmap(ST2_55)	    ;clear CDPLC and AR[7-0]LC

	BSET	ARMS			        ;set ARMS

;
; Return to calling function
;----------------------------------------------------------------
	||RET							;return to calling function

;----------------------------------------------------------------
;End of file

decommn.asm/    1013718920  0     0     0       5520      `
;****************************************************************
; Function:    	decom
; Version:     	1.00
; Processor:   	C55xx
; Description: 	1D gerneral purpose wavelet decomposition
;              
; Usage:  	   	decom( int *singal, int *output, 
;						  int LENGTH, int *wavename );
;                                     
; Arguments:	
;    signal:   	the signal buffer
;    output:    output buffer, the low-pass output save in the first
;               half of the output buffer, and the high-pass 
;				output saved in the second half of the output buffer
;    LENGTH:	number of signal elements
;  wavename:    the wavelet filter coefficients 
;
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ


; Register usage
; --------------
      .asg     CDP, input           ;input data, circular pointer
      .asg     AR1, low_out         ;low output, linear pointer
      .asg     AR2, high_out        ;high output, linear pointer
      .asg     AR3, low_filter	    ;low_pass filter, circular pointer
      .asg     AR4, high_filter     ;high_pass filter, circular pointer
     
      .asg     XAR1, xlow_out       ; extended low output
      .asg     XAR2, xhigh_out      ; extended high output
      .asg     BSAC, input_base     ;base addr for input_ptr
      .asg     BSA45, high_fl_base  ;base addr for low_filter
      .asg     BSA23, low_fl_base   ;base addr for high_filter
      
      .asg     BK03, low_fl_sz      ;circ buffer size for filter_sz
      .asg     BK47, high_fl_sz     ;circ buffer size for filter_sz 
      .asg     BKC,  input_sz       ;input circular buffer size
    

      .asg     CSR, inner_cnt       ;inner loop count
      .asg     BRC0, outer_cnt      ;outer loop count

ST2mask  .set  0000000100011000b   	;circular/linear pointers


      .global _decom_1D

      .text
_decom:

;
; Configure the status registers as needed.
;----------------------------------------------------------------

	AND	#001FFh, mmap(ST0_55)		;clear all ACOVx,TC1, TC2, C
 
	OR	#04140h, mmap(ST1_55)		;set CPL, SXMD, FRCT

	AND	#0F9DFh, mmap(ST1_55)		;clear M40, SATD, 54CM    
    
	AND	#07A00h, mmap(ST2_55)		;clear ARMS, RDM, CDPLC, AR[0-7]LC

	AND	#0FFDDh, mmap(ST3_55)		;clear SATA, SMUL

;
; Setup passed parameters in their destination registers
; Setup circular/linear CDP/ARx behavior
;----------------------------------------------------------------
	MOV		mmap(AR0), input_base	;base address of input 
	MOV		*AR2+, T1				;length of filter
    MOV		mmap(AR2), low_fl_base	;base address of low_pass filter
    AMAR 	*(AR2+T1)              	;point to high_pass filter
	MOV		mmap(AR2), high_fl_base	;base address of high_pass filter
	
	MOV		#0,	input               ;reset input buffer index
	MOV		#0, low_filter          ;reset low_pass filter index
	MOV		#0, high_filter         ;reset high_pass filter index
	
	MOV		mmap(T1), low_fl_sz	    ;low_pass filter circular buffer size
    MOV		mmap(T1), high_fl_sz    ;high_pass filter circular buffer size
    MOV 	mmap(T0), input_sz      ;input circular buffer size  
        
; Set circular/linear ARx behavior

	MOV		#ST2mask, mmap(ST2_55)	;configure circular/linear pointers
;
; Setup loop counts
;----------------------------------------------------------------
	SFTL	T0, #-1             	;output_length = input_length>>1
	MOV		xlow_out, xhigh_out   	;low output buffer
	ADD		#0, *(high_out+T0)  	;high output buffer
	
	SUB		#1, T0         
	MOV		T0, outer_cnt           ;outer loop executes times    
	
	SUB		#3, T1      
	MOV		T1, inner_cnt       	;inner loop executes times
	NEG		T1, T0              	;T0 is used to reset input pointer
                                       
;
; Start of outer loop
;----------------------------------------------------------------
	RPTBLOCAL	loop1-1				;start the outer loop

;1st iteration                            
   	MPY	*low_filter+, *input+, AC0
	::MPY	*high_filter+, *input+, AC1
   
;inner loop
	||RPT	inner_cnt
	MAC	*low_filter+, *input+, AC0
	::MAC	*high_filter+, *input+, AC1

;last iteration
	MAC	*low_filter+, *(input+T0), AC0
	::MAC	*high_filter+, *(input+T0), AC1
  
;store result to memory
	MOV	HI(AC0), *low_out+	        ;store short result to low_out buffer
	::MOV	HI(AC1), *high_out+     ;store short result to high_out buffer
	
loop1:					            ;end of outer loop

;
; Restore status regs to expected C-convention values as needed
;----------------------------------------------------------------
	BCLR	FRCT			        ;clear FRCT

	AND	#0FE00h, mmap(ST2_55)	    ;clear CDPLC and AR[7-0]LC

	BSET	ARMS			        ;set ARMS

;
; Return to calling function
;----------------------------------------------------------------
	||RET							;return to calling function

;----------------------------------------------------------------
;End of file
histogrammn.asm/1027962288  0     0     0       2302      `
;****************************************************************
; Function:    	IMG_histogram
; Version:     	1.00
; Processor:   	C55xx
; Author:		Peng Xu
; Date:			08-03-2001
; Description: 	histogram analysis. The input image value should be
;				in the range of [0, 255]. 
;              
; Usage:  	   	IMG_histogram( short *in_data, short *out_data, int size );
;
; Copyright Texas instruments Inc, 2001
;****************************************************************
     .global _IMG_histogram

      .text
_IMG_histogram:
    .if __large_model 
      PSHBOTH  XAR5
      PSHBOTH  XAR6
      PSHBOTH  XAR7
     .else
      PSH  AR5
      PSH  AR6
      PSH  AR7
     .endif
 
	SFTL	T0, #-1					;half size of the image
	MOV     XAR0, XAR4				;initialize AR4
	ADD		T0, AR4					;AR4 points to the third quater of the image
	SFTL	T0, #-1					;quater size of the image
	MOV     XAR0, XAR2				;initialize AR2
	MOV		XAR4, XAR6				;initialize AR6
	ADD		T0, AR2					;AR2 points to the second quater of the image
	ADD		T0, AR6					;AR6 points to the fourth quater of the image
	SUB     #1, T0					;prepare loop counter
	MOV		T0, BRC0				;loop counter
	MOV     AR1, T2					;starting address of the output buffer
	
	||rptblocal loop_end-1 
	ADD		*AR0+, T2, AR1			;load pixel_0 and get the histogram index
	ADD		*AR2+, T2, AR3			;load pixel_1 and get the histogram index
	ADD		*AR4+, T2, AR5 			;load pixel_2 and get the histogram index
	ADD		*AR6+, T2, AR7			;load pixel_3 and get the histogram index
    ADD     #1, *AR1				;update histogram according to pixel_0
    ADD		#1, *AR3				;update histogram according to pixel_1
    ADD		#1, *AR5				;update histogram according to pixel_2
    ADD		#1, *AR7				;update histogram according to pixel_3
loop_end:
;
; Return to calling function
;----------------------------------------------------------------
    .if __large_model 
          POPBOTH XAR7
          POPBOTH XAR6
          POPBOTH XAR5
          .else 
          POP		AR7							;restore AR7 from stack
	      POP		AR6							;restore AR6 from stack
	      POP		AR5							;restore AR5 from stack
	      .endif
     RET								;return to calling function
;----------------------------------------------------------------
;End of file
hwdctal.asm/    1002737196  0     0     0       5250      `
;****************************************************************
; Function:    IMG_fdct_8x8
; Version:     1.1
; Processor:   C5510
; Description: 2-D Forward Discrete Cosine Transform (DCT) 
;                   for 8*8 image block using built-in hardware extensions.

;
; Usage:      void IMG_fdct_8x8(short * fdct_data, short * inter_buffer)
;
;Change history:
; 
;       VERSION   DATE     /    AUTHORS        COMMENT
;         0.2    03-Jul-01 /    CHENG          Modified to be a C-callable function, 
;                                              avoid the hard-coded memory setup
;         0.1    21-Jul-99 /    BALMELLE       modified for MPEG-4 implementation on C55xx
;         0.0    21-Jul-98 /    Guermeur       original created
; Copyright Texas instruments Inc, 2001
;****************************************************************
  .def _IMG_fdct_8x8
  .dp 0
;-----------     
_IMG_fdct_8x8:
;-----------
;//---------------------------------------------------
;// Context save 
;//----------------------------------------------------
     .if __large_model 
      pshboth(XAR5)
      pshboth(XAR6)
     .else
      push(AR5,AR6)
     .endif
      push(T3)
;//---------------------------------------------------
;// Get arguments and Initialization code
;//----------------------------------------------------
     XAR2=XAR0
      T3 = #3
      XAR3=XAR0
      
      AR3 = AR3 + #1
      T0 = #0x10
       XAR6=XAR0
       AC0 = *AR2 << T3
       T1 = #0x2f
       || repeat(#63)
       AC0 = *AR3+ << T3
       || *AR2+ = AC0
       XAR2 =XAR0
       AR2 = AR2 + #8   
       XAR3 =XAR1                      ; adress of column operation results
       XAR4 =XAR1
       AR4 = AR4 + #8
       XAR5 = XAR1
       AR5 = AR5 + #16
       
       AR1 = AR0
       
       BRC0 = #6                                ; 7 iterations in the next localrepeat
                                                ; DCT N=8
                                                ; load column 0
       AC0 = copr(#0x24,AC0,*(AR2+T0),*(AR1+T0)); begin 1
       AC1 = copr(#0x26,AC0,*(AR2+T0),*(AR1+T0)); begin 2
       AC0 = copr(#0x27,AC0,*(AR2+T0),*(AR1+T0)); begin 3
       AC1 = copr(#0x25,AC0,*(AR2-T1),*(AR1-T1)); begin 4
       localrepeat {
                                                ; load column i+1, exe column i
       AC0 = copr(#0x24,AC0,*(AR2+T0),*(AR1+T0)); cycle 1
       AC1 = copr(#0x20,AC0,AC1) , dbl(*AR3+)=AC0  ; cycle 2
       AC0 = copr(#0x21,AC1,AC0) , dbl(*AR3+)=AC1  ; cycle 3
       AC1 = copr(#0x33,AC0,AC1) , dbl(*AR3+)=AC0  ; cycle 4
       AC0 = copr(#0x32,AC1,AC0) , dbl(*AR3+)=AC1  ; cycle 5
       AC1 = copr(#0x26,AC0,*(AR2+T0),*(AR1+T0)); cycle 6
       AC0 = copr(#0x27,AC0,*(AR2+T0),*(AR1+T0)); cycle 7
       AC1 = copr(#0x25,AC0,*(AR2-T1),*(AR1-T1)); cycle 8
       }
                                                ; load line 0, exe column 7, store column 6
       AC0 = copr(#0x24,AC0,*(AR5+T0),*(AR4+T0)); cycle 1
       AC1 = copr(#0x20,AC0,AC1), dbl(*AR3+)=AC0  ; cycle 2
       AC0 = copr(#0x21,AC1,AC0), dbl(*AR3+)=AC1  ; cycle 3
       AC1 = copr(#0x33,AC0,AC1), dbl(*AR3+)=AC0  ; cycle 4
       AC0 = copr(#0x32,AC1,AC0), dbl(*AR3+)=AC1  ; cycle 5
       AC1 = copr(#0x26,AC0,*(AR5+T0),*(AR4+T0))  ; cycle 6
       BRC0 = #7                                ; 8 iterations of the following localrepeat
       AC0 = copr(#0x27,AC0,*(AR5+T0),*(AR4+T0))  ; cycle 7
       AC1 = copr(#0x25,AC0,*(AR5-T1),*(AR4-T1))  ; cycle 8
                                                ; special DCT mode
       AC1 = copr(#0x23,AC0,AC1)
                                                ; load line 1, exe line 0, store column 7
       AC0 = copr(#0x24,AC0,*(AR5+T0),*(AR4+T0)); cycle 1
       AC1 = copr(#0x20,AC0,AC1), dbl(*AR3+)=AC0  ; cycle 2
       AC0 = copr(#0x21,AC1,AC0), dbl(*AR3+)=AC1  ; cycle 3
       AC1 = copr(#0x33,AC0,AC1), dbl(*AR3+)=AC0  ; cycle 4
       AC0 = copr(#0x32,AC1,AC0), dbl(*AR3+)=AC1  ; cycle 5
       localrepeat {
                                                ; load line i+1, exe line i, store line i-1
                                                ; (i>0) or store
                                                ; column 7 (i=0)
       AC1 = copr(#0x26,AC0,*(AR5+T0),*(AR4+T0)); cycle 6
       AC0 = copr(#0x27,AC0,*(AR5+T0),*(AR4+T0)); cycle 7
       AC1 = copr(#0x22,AC0,*(AR5-T1),*(AR4-T1)); cycle 8
                                                ; load line i+2, exe line i+1, store line i
       AC0 = copr(#0x24,AC0,*(AR5+T0),*(AR4+T0)); cycle 1
       AC1 = copr(#0x20,AC0,AC1), dbl(*AR6+)=AC0   ; cycle 2
       AC0 = copr(#0x21,AC1,AC0), dbl(*AR6+)=AC1   ; cycle 3
       AC1 = copr(#0x33,AC0,AC1), dbl(*AR6+)=AC0   ; cycle 4
       AC0 = copr(#0x32,AC1,AC0), dbl(*AR6+)=AC1   ; cycle 5
       }
;//-----------------------------------------------------------------------------
;// Context restore
;//-----------------------------------------------------------------------------
        T3 = pop() 
       .if __large_model  
        XAR6=popboth()
        XAR5=popboth()
       .else  
        AR5,AR6=pop()
       .endif
       return
       

hwidctal.asm/   1002737208  0     0     0       4492      `
;****************************************************************
; Function:     IMG_idct_8x8
; Version:     0.2
; Processor:   C5510
; Description: 2-D   Inverse Discrete Cosine Transform (DCT) 
;                   for 8*8 DCT coefficients using built-in hardware extensions.

;
; Usage:      void IMG_idct_8x8(short * idct_data, short * inter_buffer)
;
;Change history:
; 
;       VERSION   DATE     /    AUTHORS        COMMENT
;         0.2    03-Jul-01 /    CHENG          Modified to be a C-callable function, 
;                                              avoid the hard-coded memory setup
;         0.1    21-Jul-99 /    BALMELLE       modified for MPEG-4 implementation on C55xx
;         0.0    21-Jul-98 /    Guermeur       original created
 
; Copyright Texas instruments Inc, 2001
;****************************************************************

        .mmregs
	    .def	_IMG_idct_8x8
        .text
;//--------------------------------------------------
;//program section
;//--------------------------------------------------
_IMG_idct_8x8:
;//---------------------------------------------------
;// Context save 
;//----------------------------------------------------
    .if __large_model  
	pshboth(XAR5)
	pshboth(XAR6)
	.else 
	push(AR5,AR6)
	.endif
;//---------------------------------------------------
;// Initialization code
;//----------------------------------------------------

	bit(ST1, #ST1_CPL) = #0 
	;bit(ST1,#ST1_SXMD) = #1   
;//---------------------------------------------------
;// Get arguments
;//----------------------------------------------------
	XAR3=XAR1
	XAR4=XAR1
	XAR5=XAR1
	XAR1 = XAR0
	XAR2 = XAR0
	DR0 = #0x10
	AR2 = AR1 + #8
	DR1 = #0x2f
    XAR6 = XAR0
	AR4 = AR3 + #8
	AR5 = AR4 + #8
    
	BRC0 = #6                                   ; 7 iterations in the next localrepeat
                                                ; load column 0
	AC0 = copr(#0x2d,AC0,*(AR2+DR0),*(AR1+DR0)) ; begin 1
	AC1 = copr(#0x29,AC0,*(AR2+DR0),*(AR1+DR0)) ; begin 2
	AC0 = copr(#0x28,AC0,*(AR2+DR0),*(AR1+DR0)) ; begin 3
	AC1 = copr(#0x2c,AC0,*(AR2-DR1),*(AR1-DR1)) ; begin 4
	localrepeat {
	; load column i+1, exe column i
	AC0 = copr(#0x2d,AC0,*(AR2+DR0),*(AR1+DR0)) ; cycle 8
	AC1 = copr(#0x2f,AC0,AC1) , dbl(*AR3+)=AC0  ; cycle 7
	AC0 = copr(#0x2e,AC1,AC0) , dbl(*AR3+)=AC1  ; cycle 6
	AC1 = copr(#0x3a,AC0,AC1) , dbl(*AR3+)=AC0  ; cycle 5
	AC0 = copr(#0x3b,AC1,AC0) , dbl(*AR3+)=AC1  ; cycle 4
	AC1 = copr(#0x29,AC0,*(AR2+DR0),*(AR1+DR0)) ; cycle 3
	AC0 = copr(#0x28,AC0,*(AR2+DR0),*(AR1+DR0)) ; cycle 2
	AC1 = copr(#0x2c,AC0,*(AR2-DR1),*(AR1-DR1)) ; cycle 1
	}
	; load line 0, exe column 7, store column 6
	AC0 = copr(#0x2d,AC0,*(AR5+DR0),*(AR4+DR0)) ; cycle 8
	AC1 = copr(#0x2f,AC0,AC1), dbl(*AR3+)=AC0  ; cycle 7
	AC0 = copr(#0x2e,AC1,AC0), dbl(*AR3+)=AC1  ; cycle 6
	AC1 = copr(#0x3a,AC0,AC1), dbl(*AR3+)=AC0  ; cycle 5
	AC0 = copr(#0x3b,AC1,AC0), dbl(*AR3+)=AC1  ; cycle 4
	AC1 = copr(#0x29,AC0,*(AR5+DR0),*(AR4+DR0)) ; cycle 3
	BRC0 = #7
	AC0 = copr(#0x28,AC0,*(AR5+DR0),*(AR4+DR0)) ; cycle 2
    AC1 = copr(#0x2c,AC0,*(AR5-DR1),*(AR4-DR1)) ; cycle 1
	; special IDCT mode
	AC1 = copr(#0x2b,AC0,AC1)
	; load line 1, exe line 0, store column 7
	AC0 = copr(#0x2d,AC0,*(AR5+DR0),*(AR4+DR0)) ; cycle 8
	AC1 = copr(#0x2f,AC0,AC1), dbl(*AR3+)=AC0 ; cycle 7
	AC0 = copr(#0x2e,AC1,AC0), dbl(*AR3+)=AC1 ; cycle 6
	AC1 = copr(#0x3a,AC0,AC1), dbl(*AR3+)=AC0 ; cycle 5
	AC0 = copr(#0x3b,AC1,AC0), dbl(*AR3+)=AC1 ; cycle 4
	localrepeat {
	; load line i+1, exe line i, store line i-1 (i>0) or store column 7 (i=0)
	AC1 = copr(#0x29,AC0,*(AR5+DR0),*(AR4+DR0)) ; cycle 3
	AC0 = copr(#0x28,AC0,*(AR5+DR0),*(AR4+DR0)) ; cycle 2
	AC1 = copr(#0x2a,AC0,*(AR5-DR1),*(AR4-DR1)) ; cycle 1
	; load line i+2, exe line i+1, store line i
	AC0 = copr(#0x2d,AC0,*(AR5+DR0),*(AR4+DR0)) ; cycle 8
	AC1 = copr(#0x2f,AC0,AC1), dbl(*AR6+)=AC0 ; cycle 7
	AC0 = copr(#0x2e,AC1,AC0), dbl(*AR6+)=AC1 ; cycle 6
	AC1 = copr(#0x3a,AC0,AC1), dbl(*AR6+)=AC0 ; cycle 5
	AC0 = copr(#0x3b,AC1,AC0), dbl(*AR6+)=AC1 ; cycle 4
	}

;//-----------------------------------------------------------------------------
;// Context restore
;//-----------------------------------------------------------------------------
   	bit(ST1, #ST1_CPL) = #1  
    .if __large_model  
    XAR6 = popboth()
	XAR5 = popboth() 
    .else
    AR5,AR6=pop()
    .endif
    return
    
  
    


image_scale_2al/1024580778  1     0     0       3052      `
 ;****************************************************************
; Function:    IMG_scale_by_2
; Version:     0.0
; Processor:   C5510
; Description:  Image up-scale by a factor of 2
; hardware extension.
;
; Usage:    void IMG_scale_by_2(unsinged char *org_image, unsinged char *inter_image
; , int row, int column);
;Change history:
; 
;       VERSION   DATE      /    AUTHORS        COMMENT
;         1.0    05/15/02       CHENG PENG          original creation
; Benchmark 0.27x(2xrow)x(2xcolumn)+23
; code size 216 words
; Copyright Texas instruments Inc, 2002
;****************************************************************
      
 
    .def _IMG_scale_by_2
 
  .text

_IMG_scale_by_2:
   
    bit(ST1,#ST1_CPL) = #0
    bit(ST1,#ST1_SATD) = #1   
    bit(ST2,#ST2_ARMS) = #0 
    push(T2,T3) 
  || XAR2=XAR0
   XAR3=XAR0
   AC0 = T1
   ||T2=#-1;
   AC0=AC0 << T2
   AC2=AC0 << T2    
   ||AR3=AR3+AC0
    ;Destination
	XAR0 = XAR1 
	XAR1=XAR0
	AC3=XAR0                
	AR1 = AR1 + T1               
    ||AC0 = #0x31 ;AC0 = #0x35      
    T1 = T1+#2
    
    BRC0 = #2
         AC1 = copr (#0x00 , AC0, dbl(*AR2));
kernel_begin:		
				localrepeat{
			AC1 = copr (#0x12, AC0, dbl(*AR2+));
			AC1 = copr (#0x14, AC0, dbl(*AR3+));
			AC1 = copr (#0x15, AC0, AC1);
			AC1 = copr (#0x13, AC0, AC1);
			}
			
            T2=T0 + #-2
            BRC0 = T2		; repeat 62 times
			T2=AC2+#-2
			localrepeat {
            
			;BRC1=T2
			 
			BRC1=T2
			localrepeat{
			AC1 = copr (#0x12, AC0, dbl(*AR2+)), dbl(*AR0+)=AC1;
			AC1 = copr (#0x14, AC0, dbl(*AR3+)), dbl(*AR1+)=AC1;

			AC1 = copr (#0x15, AC0, AC1), dbl(*AR0+)=AC1;
			AC1 = copr (#0x13, AC0, AC1), dbl(*AR1+)=AC1;
			}
			 
            AC1 = copr (#0x12, AC0, dbl(*AR2+)), dbl(*AR0+)=AC1;
			AC1 = copr (#0x14, AC0, dbl(*AR3+)), dbl(*AR1+)=AC1;

			AC1 = copr (#0x15, AC0, AC1), dbl(*(AR0+T1))=AC1;
			AC1 = copr (#0x13, AC0, AC1), dbl(*(AR1+T1))=AC1;
            } 
            T2=AC2+#-4
            
            BRC0=T2
			localrepeat{
			AC1 = copr (#0x12, AC0, dbl(*AR2+)), dbl(*AR0+)=AC1;
			AC1 = copr (#0x14, AC0, dbl(*AR3+)), dbl(*AR1+)=AC1;

			AC1 = copr (#0x15, AC0, AC1), dbl(*AR0+)=AC1;
			AC1 = copr (#0x13, AC0, AC1), dbl(*AR1+)=AC1;
			}
			BRC0=#2
			localrepeat{
			AC1 = copr (#0x12, AC0, AC1), dbl(*AR0+)=AC1;
			AC1 = copr (#0x14, AC0, AC1), dbl(*AR1+)=AC1;

			AC1 = copr (#0x15, AC0, AC1), dbl(*AR0+)=AC1;
			AC1 = copr (#0x13, AC0, AC1), dbl(*AR1+)=AC1;
			 }
kernel_end:            
           XAR0=AC3
           T1=T1+#-4
           AR0=AR0+T1
           AR1=AR0+#-2
          T1=T1+#2 
          AC0=T1
          AC0=AC0 << #1
          T0=AC0
          CSR=T0
       
        repeat(CSR)
        dbl(*(AR0+T1))=dbl(*(AR1+T1))
           
           ;dbl(*(AR0+T0))=dbl(*(AR1+T0))
           
		
			 	 
    T2,T3=pop();
    ;;;;;;;;;;;;;;;;;
    bit(ST1,#ST1_CPL) = #1
    bit(ST1,#ST1_SATD) = #0   
    bit(ST2,#ST2_ARMS) = #1 
    return
interColmn.asm/ 1013719060  0     0     0       3516      `
;****************************************************************
; Function:    	interlaceCol
; Version:    	1.00
; Processor:   	C55xx
; Description: 	interlace the low-pass output and high-pass output
;				to a buffer for reconstruction
;
; Usage:  		interlaceCol( int *low, int *high, int *output, 
;						       int IMAGE_WIDTH, int HEIGHT, 
;				               int filter_length)
;                                     
;   Arguments:
;         low:	The low-pass output from the deomposition
;        high:  The high-pass output from the decompositon
;      output:	The interlaced signal buffer
; IMAGE_WIDTH:	widht of the image
;      HEIGHT:  height of the column, it may be different from 
; 				the height of the image
;
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ


; Register usage                
; --------------                
      .asg    AR0, low          	;linear buffer
      .asg    AR1, high         	;linear buffer
      .asg    AR2, output       	;circular buffer
      
      .asg    XAR2, xoutput         ;extended output    
      .asg    BSA23, out_base  	    ;base addr for output
      .asg    BK03, out_sz      	;circ buffer size for filter_sz
    
ST2mask  .set  0000000000000100b   	;circular/linear pointers

      .global _interlaceCol

      .text
_interlaceCol:

;
; Configure the status registers as needed.
;----------------------------------------------------------------

	AND	#001FFh, mmap(ST0_55)		;clear all ACOVx,TC1, TC2, C
 
	OR	#04140h, mmap(ST1_55)		;set CPL, SXMD, FRCT

	AND	#0F9DFh, mmap(ST1_55)		;clear M40, SATD, 54CM    
    
	AND	#07A00h, mmap(ST2_55)		;clear ARMS, RDM, CDPLC, AR[0-7]LC

	AND	#0FFDDh, mmap(ST3_55)		;clear SATA, SMUL

;
; Setup loop counts
;----------------------------------------------------------------
	MOV		mmap(T1), out_sz		;output circular buffer size
	MOV		mmap(AR2), out_base
	SUB		#2, AR3					;filter_length - 2
	MOV		XAR3, xoutput
	
	SFTL	T1, #-1         		
	SUB		#1, T1
	MOV		T1, BRC0				;outer loop executes nr times    


; Set circular/linear ARx behavior

	MOV		#ST2mask, mmap(ST2_55)	;configure circular/linear pointers

;
; Start of outer loop
;----------------------------------------------------------------
	RPTBLOCAL	loop1-1     		;start the outer loop
    
    MOV    *(low+T0), *output+
    MOV    *(high+T0), *output+
 	
loop1:					    		;end of outer loop

;
; Restore status regs to expected C-convention values as needed
;----------------------------------------------------------------
	BCLR	FRCT					;clear FRCT

	AND	#0FE00h, mmap(ST2_55)		;clear CDPLC and AR[7-0]LC

	BSET	ARMS					;set ARMS

;
; Return to calling function
;----------------------------------------------------------------
	||RET							;return to calling function

;----------------------------------------------------------------
;End of file
interlacemn.asm/1013719188  0     0     0       3891      `
;****************************************************************
; Function:    	interlace
; Version:     	1.00
; Processor:   	C55xx
; Description: 	interlace the wavelet filter bank outputs to an 
;   			buffer for reconstruction
;
; Note:			Call this function before calling recon_1D()
; Usage:  		interlace( int *input, int *output,
;			    		   int length, int filter_lh)
; Arguments:
;     input:    the signal from the output of the filter bank. 
;				the first half is the low-pass output while
;				the second half is the high-pass output
;    output:	output buffer
;    length:	size of input buffer
; filter_lh:    size of the wavelet filter
; 
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ


; Register usage                
; --------------                
      .asg    AR0, low          	;circular buffer
      .asg    AR4, high         	;circular buffer
      .asg    AR1, output       	;linear buffer
      
      .asg    XAR0, xlow            ;extended low
      .asg    XAR4, xhigh           ;extended high  
      .asg    BSA45, high_base  	;base addr for low_filter
      .asg    BSA01, low_base   	;base addr for high_filter
      
      .asg    BK03, low_sz      	;circ buffer size for filter_sz
      .asg    BK47, high_sz     	;circ buffer size for filter_sz 
    
ST2mask  .set  0000000000010001b   	;circular/linear pointers

      .global _interlace

      .text
_interlace:

;
; Configure the status registers as needed.
;----------------------------------------------------------------

	AND	#001FFh, mmap(ST0_55)		;clear all ACOVx,TC1, TC2, C
 
	OR	#04140h, mmap(ST1_55)		;set CPL, SXMD, FRCT

	AND	#0F9DFh, mmap(ST1_55)		;clear M40, SATD, 54CM    
    
	AND	#07A00h, mmap(ST2_55)		;clear ARMS, RDM, CDPLC, AR[0-7]LC

	AND	#0FFDDh, mmap(ST3_55)		;clear SATA, SMUL

;
; Setup loop counts
;----------------------------------------------------------------
	SFTL	T0, #-1         		;T0 = T0/2, input_length/2

	MOV		xlow, xhigh
	AMAR	*(high+T0)

; Set circular/linear ARx behavior

	MOV		#ST2mask, mmap(ST2_55)	;configure circular/linear pointers

	MOV     mmap(low), low_base    	;lower part address
	MOV		mmap(high), high_base	;higher part address
  
	MOV		mmap(T0), low_sz        ;lower part size
	MOV		mmap(T0), high_sz       ;higher part size
	
	SFTL    T1, #-1   				;Set the offset into T1
	SUB     #1, T1
    SUB	    T0, T1
    NEG     T1, T1
	MOV		T1, low
	MOV		T1, high	
	
	SUB		#1, T0
	MOV		T0, BRC0            	;outer loop executes nr times   

;
; Start of outer loop
;----------------------------------------------------------------
	RPTBLOCAL	loop1-1     		;start the outer loop
    
    MOV    *low+, *output+
    MOV    *high+, *output+
 	
loop1:					    		;end of outer loop

;
; Restore status regs to expected C-convention values as needed
;----------------------------------------------------------------
	BCLR	FRCT					;clear FRCT

	AND	#0FE00h, mmap(ST2_55)		;clear CDPLC and AR[7-0]LC

	BSET	ARMS					;set ARMS

;
; Return to calling function
;----------------------------------------------------------------
	||RET							;return to calling function

;----------------------------------------------------------------
;End of file

JPEG_deqal.asm/ 1002737324  0     0     0       1197      `
;****************************************************************
; Function:    IMG_dequantize_8x8
; Version:     0.1
; Processor:   C5510
; Description: 	dequantization without zigzag source addressing,
;	            i.e., simply pointwise multiplication of two arrays at
;	            qtab_p and src_p. (NOTE) it assumes that source data is
;               already unzigzag'd at src_p!!! 
; Usage:         IMG_dequantize_8x8(int * quantize_tbl,int * deq_data);
; Arguments:
;	      Qtable: Quantization table
; reconstruction: It contains the input quantized block
;                 and contains the dequantized block at
;                 the end of function.
;Change history:
;        VERSION   DATE     /    AUTHORS        COMMENT
;         0.1     08/08/01  /    Cheng         Optimization    
;         0.0     ?/?/00    /      Yoo           Creation
;Copyright Texas instruments Inc, 2001
;****************************************************************
  

     .def _IMG_dequantize_8x8
 
;**********
_IMG_dequantize_8x8:
;**********

    XAR2 = XAR1
	BRC0 = #63
	mar(T0 = #16)
	|| localrepeat {
	AC0 = *AR0+ * *AR2+
	*AR1+ = HI(AC0 << T0)
	}
	return

JPEG_qtal.asm/  1013702886  0     0     0       2237      `
;****************************************************************
; Function:    IMG_jpeg_quantize
; Version:     1.1
; Processor:   C5510
; Description: This function computes the quantization 
;              step using a reciprocal table of the 
;              quantization terms which is computed 
;              in IMG_jpeg_make_recip_tbl. 
; Usage:       IMG_jpeg_quantize(short * quantize_input,short * zigzag, short * recip_tbl,int * quantize_output);
; Arguments:	
;	  inputBlock: Input block of 8*8
;         zigzag: zigzag table
;      recip_tbl: reciprocal table of quantization terms
;        Qoutput: Quantization result of the input block
 ;Change history:
;        VERSION   DATE     /    AUTHORS        COMMENT
;         1.1    08/08/01   /    CHENG         Modified to C-callable function
;         1.0    02/23/01   /    PERESSE        Creation
;Copyright Texas instruments Inc, 2001
;****************************************************************
 

          .def _IMG_jpeg_quantize
p_interm  .set 0x0000
;*******
_IMG_jpeg_quantize:
;*******
; ARO holds input
; AR1 holds zigzag
; AR2 hold recip_tbl
; AR3 hold output
   
      .if __large_model 
         pshboth(XAR5)
         pshboth(XAR7)
      .else
         push(AR5,AR7)
      .endif
       
       SP =SP +#-1
       bit(ST1,#ST1_FRCT)= #1
       bit(ST1,#ST1_M40)= #1
       bit(ST1,#ST1_SATD) =#1
        
        AR4=@p_interm
       *AR4=#0
       
       BRC0 = #31
       AC0 = *AR4
       AR7 = AR3 + *AR1+
       T0 = *AR2+
       localrepeat {                            ; performs the quantization
       AR5 = AR3 + *AR1+                              
       AC0 = rnd(AC0 + (T0 * *AR0+)),
       AC1 = *AR4 << #16
       *AR7 = HI(AC0)
       || T0 = *AR2+ 
       AR7= AR3+*AR1+
       AC1 = rnd(AC1 + (T0 * *AR0+)),
       AC0 = *AR4 << #16
       *AR5 = HI(AC1)
       || T0 = *AR2+
       }
       bit(ST1,#ST1_FRCT)= #0
       bit(ST1,#ST1_M40)= #0
       bit(ST1,#ST1_SATD) =#0
       SP =SP +#1
      ; AR5,AR7 = pop()
        .if __large_model  
        XAR7=popboth()
        XAR5=popboth()
       .else  
        AR5,AR7=pop()
       .endif
       return
  

JPEG_Qtbal.asm/ 1013700774  0     0     0       1590      `
;****************************************************************
; Function:     IMG_jpeg_make_recip_tbl
; Version:     1.1
; Processor:   C5510
; Description: This function computes the reciprocal table 
;              of the quantization terms which will be used 
;              in JPEG_Quant.   
; Usage:       IMG_jpeg_make_tbl(short * quantize_tbl);
;Arguments:     
;           reciproQtable: It contains input quantization table
;                          and also contains the reciprocal table
;                          at the end of the function.           	
; Change history:
; 
;       VERSION   DATE     /    AUTHORS        COMMENT
;         1.1    08/08/01  /    Cheng          Seperation of the reciprocal transform
;                                              of Quantization table from JPEG_init
;         1.0    02/23/01  /    PERESSE        migration and optimization on C5510
;         0.0    07/10/99  /    YOO            original created on C549
;
;Copyright Texas instruments Inc, 2001
;****************************************************************
 
          .def _IMG_jpeg_make_recip_tbl
;p_interm  .set 0x0000
_IMG_jpeg_make_recip_tbl:   
        bit(ST1, #ST1_SXMD) = #0
       BRC0 = #63
       localrepeat {
       AC0 = *AR0 * #16
       AC0 = AC0 + #8                           ; (YYOO)
       *AR1= LO(AC0 << #-4)
       AC0 = #0x8000                            ; 2^15
       repeat(#15)
       subc(*AR1, AC0, AC0)                ; 2^15/Q
       *AR0+ = AC0
       }
       bit(ST1, #ST1_SXMD) = #1
       returnmad16x16al.asm/ 1013725796  0     0     0       6910      `
;****************************************************************
; Function:    IMG_mad_16x16_4step
; Version:     0.0
; Processor:   C5510
; Description:  Motion estimation by 4-step searching using the built-in
; hardware extension.
;
; Usage:    void IMG_mad_16x16_4step(short *src_data, short * search_window, 
;                                    unsigned int *match)
 
;Change history:
; 
;       VERSION   DATE      /    AUTHORS        COMMENT
;         1.1    10/10/01       CHENG          original created based on video macros 
; Copyright Texas instruments Inc, 2001
;****************************************************************

    .include "macros_hwa_me.inc"
    .sect "index_block"
block_index	   .int -196,192,192,-98,96,96,-49,48,48,-25,24,24     
     
    
   .def _IMG_mad_16x16_4step
   .text


searchBase   .set 0x0000               ; local variable to store the address of search_window
_IMG_mad_16x16_4step:
     .if __large_model                
       pshboth(XAR7)
       pshboth(XAR6)
       pshboth(XAR5)
     .else
       push(AR6,AR7)
       push(AR5)
      .endif 
      push(@ST1_L) || mmap()
      push(@ST2_L) || mmap()	
       SP=SP + #-1
      

       bit(ST1,#ST1_CPL)= #0
       bit(ST2,#ST2_ARMS) = #0 
	   bit(ST1,#ST1_SXMD)=#0
       XAR7=XAR2
       @searchBase=AR1               ; keep the addresses of search_window and match
       XAR4=XAR1 ; cheng   
       XAR6=XAR0 
       AC3=#0xFFFF ; AR6 holds the address of src_data and AC3 hold mad and is initialized
       XAR3=XAR1 
       AR2=#block_index    ; AR3 holds the start address of search_window
	  ; searching distance = 8
	   BRC0=#2 || T1=#4  ; for given distance d, we need calculate upper, midle and low ADs (9 ADs)
                         ; T1=distance/2 because of pixel package.
       AR3=AR3+#392  ; the start address of the center 16x16 block in search_window    
 blockrepeat  {  
      ;init.
       T0 = #33 
       XCDP=XAR6 ; src_data address
       BRC1=#6  || AR3=AR3+*AR2+ ; the star address of upper, middle, low blocks.
       XAR0=XAR3 ; search_window address
      ; test 
      ;AR0=#0x80
      ;AR0=AR0+#0x184 ; test code for d=8
        XAR1=XAR0
        AR1=AR1+#24   
      _Hwa_ME_8 
      ; if ARO=search_window+0x184, AC0=1535 1C3B AC1=000017E9
      ;call _store
      
      @AC2_L = LO(AC0 <<#0)                 ;get first AD result from AC0
      ||mmap()
      AC2 = AC2 & #0x0000ffff ; validataion
       XAR4=XAR3
       ;XAR5=XAR4 
      AC3=min(AC2,AC3) ; update mad
      if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4  ; update the location of the best-match block
      @AC2_L = HI(AC0 <<#0)                 ;get second AD result from AC0
      ||mmap()
      AC2 = AC2 & #0x0000ffff 
      || AR4=AR4+T1 
      AC3=min(AC2,AC3)
     if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
     @AC2_L = LO(AC1 <<#0)                 ;get third AD result from AC0
     ||mmap()
     AC2 = AC2 & #0x0000ffff ; Validation
     || AR4=AR4+T1
     AC3=min(AC2,AC3)
     if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4                
     }
   ; searching distance 4 T=4/2=2
     BRC0=#2 || T1=#2 
     XAR3=XAR5 
     AC3=#0xFFFF 
 blockrepeat  {  
   ;init
    T0 = #33 
     XCDP=XAR6 
    BRC1=#6  || AR3=AR3+*AR2+
    XAR0=XAR3 
  ; test 
  ;AR0=#0x80
  ;AR0=AR0+#0x186 ; test code for d=4
  XAR1=XAR0
  AR1=AR1+#24 
  _HWa_ME_4 
 ; if ARO=search_window+0x186, AC0=1535 170C AC1=000017D3
   
  @AC2_L = LO(AC0 <<#0)                 ;get first AD
  ||mmap()
  AC2 = AC2 & #0x0000ffff 
   XAR4=XAR3
  AC3=min(AC2,AC3)
  if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
  @AC2_L = HI(AC0 <<#0)                 ;get second AD
  ||mmap()
  AC2 = AC2 & #0x0000ffff 
  || AR4=AR4+T1 
  AC3=min(AC2,AC3)
  if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
  @AC2_L = LO(AC1 <<#0)                 ;get third AD  ||mmap()
  AC2 = AC2 & #0x0000ffff 
  || AR4=AR4+T1
  AC3=min(AC2,AC3)
  if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4                
  }
   ; searching distance =2 T1=2/2=1
   BRC0=#2 || T1=#1  
   XAR3=XAR5  
   AC3=#0xFFFF   
 blockrepeat  {  
  ;init
  T0 = #33 
  XCDP=XAR6 
  BRC1=#6  || AR3=AR3+*AR2+
  XAR0=XAR3 
  ;AR0=#0x80
  ;AR0=AR0+#0x1E5 ; test code for d=2
  XAR1=XAR0
  AR1=AR1+#24 
  _HWa_ME_2
 ; if ARO=search_window+0x1E5, AC0=126A 0FE6 AC1=00001736
      
  @AC2_L = LO(AC0 <<#0)                 ;get first AD
  ||mmap()
  AC2 = AC2 & #0x0000ffff 
  XAR4=XAR3
  AC3=min(AC2,AC3)
  if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
  @AC2_L = HI(AC0 <<#0)                 ;get second AD
  ||mmap()
  AC2 = AC2 & #0x0000ffff 
  || AR4=AR4+T1 
  AC3=min(AC2,AC3)
  if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
  @AC2_L = LO(AC1 <<#0)                 ;get third AD ||mmap()
  AC2 = AC2 & #0x0000ffff 
  || AR4=AR4+T1
  AC3=min(AC2,AC3)
  if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4                
       
  }
  
  
  ;;;;;;; distance =1
    BRC0=#2 || T1=#1 
    XAR3=XAR5  
    AC3=#0xFFFF   
   
   
   blockrepeat  {  
  ; init
    T0 = #33 
    XCDP=XAR6 
    BRC1=#6  || AR3=AR3+*AR2+
    XAR0=XAR3  
    
    ;test  
    ;AR0=#0x80
    ;AR0=AR0+#0x1B4 ; test code for d=1
    XAR1=XAR0
    AR1=AR1+#24 
    
   _HWa_ME_1
    ; if ARO=search_window+0x1B4, AC0=0CF6 0CD2 170C AC1=00000D38
   
  
   @AC2_L = LO(AC0 <<#0)                 ;get first AD
   ||mmap()
   AC2 = AC2 & #0x0000ffff 
    XAR4=XAR3
   AR4=AR4-@searchBase  
   AR4=AR4<<#1 ; the location in the search window
   AC3=min(AC2,AC3) 
   ||AR4=AR4+#1
   if (!CARRY) execute(D_unit)
       ||XAR5 =XAR4
    
   @AC2_L = HI(AC0 <<#0)                 ;get second AD
   ||mmap()
   AC2 = AC2 & #0x0000ffff  ||AR4=AR4+T1
   AC3=min(AC2,AC3)
   if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
  
   @AC2_L = LO(AC1 <<#0)                 ;get third AD
   AC2 = AC2 & #0x0000ffff ||AR4=AR4+T1
   AC3=min(AC2,AC3) 
   if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  }
  
   
  
 AC0=AR5 || AR4=#48 ; turn one-dime to two-dim by integer division
 
  bit(ST1,#ST1_SATD)= #1
 AC0=AR5
 || *AR7=#48
 repeat(#(16-1))
 subc(*AR7,AC0,AC0)
 

 @AC1_L = LO(AC0 <<#0) ; hold row positoin      
 ||mmap()
 @AC2_L = HI(AC0 <<#0)  ; hold column posion     
 ||mmap()
 AC1=AC1<<#8 
 AC1=AC1+AC2 ; package row and column positon together
 *AR7=AC1    ;store row position and column positon
 ||AR7=AR7+#1 
 *AR7=AC3 ; store corresponding mad
   SP=SP + #1
  @ST2_L = pop() || mmap()
  @ST1_L = pop() || mmap()
    .if __large_model 
       XAR5=popboth()
       XAR6=popboth()
       XAR7=popboth()
   .else
       AR5=pop()
       AR6,AR7=pop()
   .endif
   
  return
mad16x16fsal.as/1047427469  22    0     0       9075      `
;*******************************************************************************
; Function:    IMG_mad_16x16
; Version:     2.2
; Processor:   C5510
; Description:  Calculate 16x16 Minimum Absolute Difference
; void IMG_mad_16x16(unsigned short *ref_data, unsigned short* src_data, 
;                  int pitch, int sx, int sy, unsigned int *match);
; Change history:
; 
;       VERSION   DATE      /    AUTHORS            COMMENT
;        2.2    02/28/03        CHENG PENG          original creation
; Benchmark 85.5 x sx x sy + 95 cycles
; code size 301 words
; Copyright Texas instruments Inc, 2003
;*******************************************************************************

    
   .def _IMG_mad_16x16
   .text


step_c             .set 0x0000               ; local variable to store the address of search_window
image_pitch        .set 0x0001
image_double_pitch .set 0x0002
jump               .set 0x0003
base               .set 0x0004
d1_loop            .set 0x0005
start_point_odd    .set 0x0006
start_point_even   .set 0x0007


_IMG_mad_16x16:
     .if __large_model                
       pshboth(XAR7)
       pshboth(XAR6)
       pshboth(XAR5)
     .else
       push(AR6,AR7)
       push(AR5)
      .endif 
       push(T3,T2)
       push(@ST1_L) || mmap()
       push(@ST2_L) || mmap()
       SP=SP + #-8 
	   bit(ST1,#ST1_SXMD)=#0
	   @base=AR0
	   @image_double_pitch=T0
	   @step_c=#0xc
    || AC0=T0
       AC0=AC0-#0xB
    || T0=T0>>1
       @jump=AC0
       
       XAR6=XAR1 ; AR6 holds the address of src_data
       XAR7=XAR3
       @image_pitch=T0
       XAR3=XAR0 ; AR3 holds the address of ref_data  
       AC0=AR2 ; AC0=sy  
    || AC3=#0xFFFF;AC3 hold mad and is initialized
   
       repeat(#(16-1))
       subc(@step_c,AC0,AC0)
       
       T3=AC0; T3 is how many 12 set per row
    || @step_c=#0x6
       AC0=AC0 <<#16
       AC1=AC0*T1
       T1=AC1+#-1
       BRC0=T1
       T1=#3
    || AC1=AC1 << #16
       AC1=AC1*T1
       AC1=AC1+#-1
       T1=0 ; T1 is row index 
       @d1_loop=LO(AC1 <<#0) 
    || T2=0; T2 is column index 
  
  blockrepeat  {  
     XCDP=XAR6 ; src_data address
  || BRC1=#6 
     AC0=@step_c*T2
     AC1=T1*@image_pitch  
     AC1=AC1+AC0
  || T0=@jump  
     AR0=AC1+@base   
     
     AR1=AR0+@image_pitch ; + PITCH
     XAR3=XAR0   
  
			AC0,AC1 = copr(#0x5a,AC0,AC1,*AR0+,*AR1,coef(*CDP+)) 			
            AC0,AC1 = copr(#0x43,AC0,AC1,*AR0+,*AR1,coef(*CDP+))  
            AC0,AC1 = copr(#0x43,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x47,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x47,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+)) 
            AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			localrepeat { 
			;repeat(#0x5)		; repeat 6 times
            AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))     
			AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			repeat(#0x3) 
			AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0,*AR1+,coef(*CDP+)) 
		    
			AC0,AC1 = copr(#0x4e,AC0,AC1,*(AR0+T0),*AR1+,coef(*CDP+))
			AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))		
			;repeat(#0x5)		; repeat 6 times
            AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
            AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+)) 
            repeat(#0x3)
              AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))        
			
			AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*(AR1+T0),coef(*CDP+))
			AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			}
            repeat(#0x7)		; repeat 8 times
            AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
            AC0,AC1 = copr(#0x4d,AC0,AC1,*AR0,*AR1+,coef(*CDP))
            AC0,AC1 = copr(#0x4d,AC0,AC1,*AR0,*AR1+,coef(*CDP))
            AC0,AC1 = copr(#0x49,AC0,AC1,*AR0,*AR1+,coef(*CDP))
            AC0,AC1 = copr(#0x49,AC0,AC1,*AR0,*AR1+,coef(*CDP))
			AC0,AC1 = copr(#0x40,AC0,AC1,*AR0,*AR1,coef(*CDP))     
     
     
      T0=#4
      @AC2_L = LO(AC0 <<#0)                 ;get first AD result from AC0
      ||mmap()
      AC2 = AC2 & #0x0000ffff ; validataion
      XAR4=XAR3
       AR4=AR4-@base 
       AR4=AR4<<#1 ; the location in the search window
       
      AC3=min(AC2,AC3) ; update mad
      if (!CARRY) execute(D_unit)
      || XAR5 =XAR4  ; update the location of the best-match block
      @AC2_L = HI(AC0 <<#0)                 ;get second AD result from AC0
      ||mmap()
      AC2 = AC2 & #0x0000ffff 
      || AR4=AR4+T0 
      AC3=min(AC2,AC3)
     if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
     @AC2_L = LO(AC1 <<#0)                 ;get third AD result from AC0
     ||mmap()
     AC2 = AC2 & #0x0000ffff ; Validation
     || AR4=AR4+T0
     AC3=min(AC2,AC3)
     if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4                
     
       T2=T2+#1 
       AC0=T2
       AC0=AC0-T3
      if (AC0 == 0) execute(AD_unit)
      T2=#0
     if (AC0 ==0) execute(AD_unit)
     T1=T1+1
    }
    AC0=T3 
    AC0=AC0 << #16
    AC0=AC0*#3 
   T3=AC0
    BRC0=@d1_loop
 || T1=0; T1 is row index
   @step_c=#0x2
  T2=0 ; T2 is colulmn index 
  T0=#1
 blockrepeat  {  
      XCDP=XAR6 ; src_data address
      BRC1=#6 
   || AC0=@step_c*T2
      AC1=T1*@image_pitch  
      AC1=AC1+AC0
      AR0=AC1+@base   
      XAR3=XAR0
         
      @start_point_odd=AR0
      XAR1=XAR0
      AR1=AR1+@image_pitch 
      @start_point_even=AR1    
      AC0,AC1 = copr(#0x54,AC0,AC1,*AR0+,*AR1,coef(*CDP))
      AC0,AC1 = copr(#0x40,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
      AC0,AC1 = copr(#0x47,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
      AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
      AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
      AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
      AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
      AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
      AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
      AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
	  blockrepeat {
		    repeat(#0x4)		; repeat 5 times
            AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
		
			AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			AR0=@start_point_odd
			AR0=AR0+@image_double_pitch
			@start_point_odd=AR0
			AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			repeat(#0x4)		; repeat 5 times
            AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
		
			AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			AR1=@start_point_even
			AR1=AR1+@image_double_pitch
		    @start_point_even=AR1
			AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			}
            repeat(#0x7)		; repeat 8 times
            AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
            AC0,AC1 = copr(#0x49,AC0,AC1,*AR0,*AR1+,coef(*CDP))
			AC0,AC1 = copr(#0x40,AC0,AC1,*AR0,*AR1,coef(*CDP))
                     
            @AC2_L = LO(AC0 <<#0)                 ;get first AD
            ||mmap()
            AC2 = AC2 & #0x0000ffff 
            XAR4=XAR3
            AR4=AR4-@base 
            AR4=AR4<<#1 ; the location in the search window
            AC3=min(AC2,AC3) 
          ||AR4=AR4+#1
            if (!CARRY) execute(D_unit)
            ||XAR5 =XAR4
    
            @AC2_L = HI(AC0 <<#0)                 ;get second AD
            ||mmap()
            AC2 = AC2 & #0x0000ffff  ||AR4=AR4+T0
            AC3=min(AC2,AC3)
            if (!CARRY) execute(D_unit)
            ||XAR5 =XAR4
  
            @AC2_L = LO(AC1 <<#0)                 ;get third AD
            AC2 = AC2 & #0x0000ffff ||AR4=AR4+T0
            AC3=min(AC2,AC3) 
            if (!CARRY) execute(D_unit)
            ||XAR5 =XAR4
            T2=T2+#1
            AC0=T2
            AC0=AC0-T3
    
           if (AC0 == 0) execute(AD_unit)
             T2=#0
            if (AC0 ==0) execute(AD_unit)
             T1=T1+1
   }

  AC0=AR5 ;turn one-dime to two-dim by integer division
 
  bit(ST1,#ST1_SATD)= #1
 
 repeat(#(16-1))
 subc(@image_double_pitch,AC0,AC0)
 

 @AC1_L = LO(AC0 <<#0) ; hold row positoin      
 ||mmap()
 @AC2_L = HI(AC0 <<#0)  ; hold column posion     
 ||mmap()
 AC1=AC1<<#8 
 AC1=AC1+AC2 ; package row and column positon together
 *AR7=AC1    ;store row position and column positon
 ||AR7=AR7+#1 
 *AR7=AC3 ; store corresponding mad
   SP=SP + #8
  @ST2_L = pop() || mmap()
  @ST1_L = pop() || mmap()
   T3,T2=pop()
    .if __large_model 
       XAR5=popboth()
       XAR6=popboth()
       XAR7=popboth()
   .else
       AR5=pop()
       AR6,AR7=pop()
   .endif
   
  return

mad8x8al.asm/   1047427498  0     0     0       8155      `
;*******************************************************************************
; Function:    IMG_mad_8x8
; Version:     2.2
; Processor:   C5510
; Description:  Calculate 8x8 Minimum Absolute Difference
; void IMG_mad_8x8(unsigned short *ref_data, unsigned short* src_data, 
;                  int pitch, int sx, int sy, unsigned int *match);
; Change history:
; 
;       VERSION   DATE      /    AUTHORS        COMMENT
;         2.2    02/28/03       CHENG PENG          original creation
; Benchmark 38.5 x sx x sy + 95 cycles
; code size 270 words
; Copyright Texas instruments Inc, 2003
;*******************************************************************************

    
   .def _IMG_mad_8x8
   .text


step_c             .set 0x0000   ; local variable to store the address of search_window
image_pitch        .set 0x0001
image_double_pitch .set 0x0002
jump               .set 0x0003
base               .set 0x0004
d1_loop            .set 0x0005
start_point_odd    .set 0x0006
start_point_even   .set 0x0007


_IMG_mad_8x8:
     .if __large_model                
       pshboth(XAR7)
       pshboth(XAR6)
       pshboth(XAR5)
     .else
       push(AR6,AR7)
       push(AR5)
      .endif 
       push(T3,T2)
       push(@ST1_L) || mmap()
       push(@ST2_L) || mmap()
       SP=SP + #-8 
	   bit(ST1,#ST1_SXMD)=#0
	   @base=AR0
	   @image_double_pitch=T0
	   @step_c=#0xc
    || AC0=T0
       AC0=AC0-#0x7
    || T0=T0>>1
       @jump=AC0
       
       XAR6=XAR1 ; AR6 holds the address of src_data
       XAR7=XAR3
       @image_pitch=T0
       XAR3=XAR0 ; AR3 holds the address of ref_data  
       AC0=AR2 ; AC0=sy
    || AC3=#0xFFFF;AC3 hold mad and is initialized
   
       repeat(#(16-1))
       subc(@step_c,AC0,AC0)
       
       T3=AC0; T3 is how many 12 set per row
    || @step_c=#0x6
       AC0=AC0 <<#16
       AC1=AC0*T1
       T1=AC1+#-1
       BRC0=T1
       T1=#3
    || AC1=AC1 << #16
       AC1=AC1*T1
       AC1=AC1+#-1
       T1=0 ; T1 is row index  
       @d1_loop=LO(AC1 <<#0) 
    || T2=0; T2 is column index 
  
  blockrepeat  {  
     XCDP=XAR6 ; src_data address
  || BRC1=#6 
     AC0=@step_c*T2
     AC1=T1*@image_pitch  
     AC1=AC1+AC0
  || T0=@jump  
     AR0=AC1+@base   
     AR1=AR0+@image_pitch ; + PITCH
     XAR3=XAR0   
     BRC1 = #2		; repeat 3 times			
			AC0,AC1 = copr(#0x5a,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x43,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x43,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x47,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
            AC0,AC1 = copr(#0x47,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
       		localrepeat {
			repeat(#0x1)		; repeat 2 times
            AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			AC0,AC1 = copr(#0x4e,AC0,AC1,*(AR0+DR0),*AR1+,coef(*CDP+))
			AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			repeat(#0x1)		; repeat 2 times
            AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*(AR1+DR0),coef(*CDP+))
			AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			}
            repeat(#0x3)		; repeat 4 times
            AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			repeat(#0x1)		; repeat 2 times
            AC0,AC1 = copr(#0x4d,AC0,AC1,*AR0,*AR1+,coef(*CDP))
            AC0,AC1 = copr(#0x49,AC0,AC1,*AR0,*AR1+,coef(*CDP))
            AC0,AC1 = copr(#0x49,AC0,AC1,*AR0,*AR1+,coef(*CDP))
         	AC0,AC1 = copr(#0x40,AC0,AC1,*AR0,*AR1,coef(*CDP))    
		    AC0,AC1 = copr(#0x40,AC0,AC1,*AR0,*AR1,coef(*CDP))    
      T0=#4
      @AC2_L = LO(AC0 <<#0)      ;get first AD result from AC0
      ||mmap()
      AC2 = AC2 & #0x0000ffff 
      XAR4=XAR3
      AR4=AR4-@base 
      AR4=AR4<<#1   
     
     
      AC3=min(AC2,AC3) ; update mad
      if (!CARRY) execute(D_unit)
      || XAR5 =XAR4  ; update the location of the best-match block
      @AC2_L = HI(AC0 <<#0)                 ;get second AD result from AC0
      ||mmap()
      AC2 = AC2 & #0x0000ffff 
      || AR4=AR4+T0 
      AC3=min(AC2,AC3)
     if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4
     @AC2_L = LO(AC1 <<#0)                 ;get third AD result from AC0
     ||mmap()
     AC2 = AC2 & #0x0000ffff ; Validation
     || AR4=AR4+T0
     AC3=min(AC2,AC3)
     if (!CARRY) execute(D_unit)
          ||XAR5 =XAR4                
     T2=T2+#1
     AC0=T2
     AC0=AC0-T3
     
     if (AC0 == 0) execute(AD_unit)
      T2=#0
     if (AC0 ==0) execute(AD_unit)
     T1=T1+1
    }
    AC0=T3
   AC0=AC0 << #16
   AC0=AC0*#3 
   T3=AC0
    BRC0=@d1_loop
 || T1=0; T1 is row index
   @step_c=#0x2
  T2=0 ; T2 is colulmn index 
  T0=#1
 blockrepeat  {  
      XCDP=XAR6 ; src_data address
       BRC1=#2 
   || AC0=@step_c*T2
      AC1=T1*@image_pitch  
      AC1=AC1+AC0
      AR0=AC1+@base   
      XAR3=XAR0   
      @start_point_odd=AR0
      XAR1=XAR0
      
      AR1=AR0
     AR1=AR1+@image_pitch 
     
      @start_point_even=AR1    
       AC0,AC1 = copr(#0x54,AC0,AC1,*AR0+,*AR1,coef(*CDP))
                        AC0,AC1 = copr(#0x40,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
                        AC0,AC1 = copr(#0x47,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
                        AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
                        AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
                        AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			blockrepeat {
			repeat(#0x1)		; repeat 5 times
                        AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			AR0=@start_point_odd
			AR0=AR0+@image_double_pitch
		
			@start_point_odd=AR0
			repeat(#01)
			AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
		
			repeat(#0x1)		; repeat 5 times
              AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			AR1=@start_point_even
			AR1=AR1+@image_double_pitch
			@start_point_even=AR1
	
			repeat(#01)
			AC0,AC1 = copr(#0x4f,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
			}
                        repeat(#0x3)		; repeat 8 times
                        AC0,AC1 = copr(#0x4e,AC0,AC1,*AR0+,*AR1+,coef(*CDP+))
                        AC0,AC1 = copr(#0x49,AC0,AC1,*AR0,*AR1+,coef(*CDP))
			AC0,AC1 = copr(#0x40,AC0,AC1,*AR0,*AR1,coef(*CDP))
                
            @AC2_L = LO(AC0 <<#0)                 ;get first AD
            ||mmap()
            AC2 = AC2 & #0x0000ffff 
            XAR4=XAR3
            AR4=AR4-@base 
            AR4=AR4<<#1 ; the location in the search window
            AC3=min(AC2,AC3) 
          ||AR4=AR4+#1
            if (!CARRY) execute(D_unit)
            ||XAR5 =XAR4
    
            @AC2_L = HI(AC0 <<#0)                 ;get second AD
            ||mmap()
            AC2 = AC2 & #0x0000ffff  ||AR4=AR4+T0
            AC3=min(AC2,AC3)
            if (!CARRY) execute(D_unit)
            ||XAR5 =XAR4
  
            @AC2_L = LO(AC1 <<#0)                 ;get third AD
            AC2 = AC2 & #0x0000ffff ||AR4=AR4+T0
            AC3=min(AC2,AC3) 
            if (!CARRY) execute(D_unit)
            ||XAR5 =XAR4
            T2=T2+#1
            AC0=T2
            AC0=AC0-T3
            if (AC0 == 0) execute(AD_unit)
             T2=#0
            if (AC0 ==0) execute(AD_unit)
             T1=T1+1
   }

  AC0=AR5 ;turn one-dime to two-dim by integer division
 
  bit(ST1,#ST1_SATD)= #1
 
 repeat(#(16-1))
 subc(@image_double_pitch,AC0,AC0)
 

 @AC1_L = LO(AC0 <<#0) ; hold row positoin      
 ||mmap()
 @AC2_L = HI(AC0 <<#0)  ; hold column posion     
 ||mmap()
 AC1=AC1<<#8 
 AC1=AC1+AC2 ; package row and column positon together
 *AR7=AC1    ;store row position and column positon
 ||AR7=AR7+#1 
 *AR7=AC3 ; store corresponding mad
   SP=SP + #8
  @ST2_L = pop() || mmap()
  @ST1_L = pop() || mmap()
     T3,T2=pop()
    .if __large_model 
       XAR5=popboth()
       XAR6=popboth()
       XAR7=popboth()
   .else
       AR5=pop()
       AR6,AR7=pop()
   .endif
   
  return

perimetermn.asm/1027962366  0     0     0       2934      `
;****************************************************************
; Function:    	IMG_perimeter
; Version:     	1.00
; Processor:   	C55xx
; Date:			08-13-2001
; Description: 	procudex the boundary of an object in a binary image. 
;				It echoes the boundary pixels with a value of 0xFF
;				and sets the other pixels to 0x00.
;              
; Usage:  	   	IMG_perimeter( short *in_data, int cols, short *out_data );
;
; Copyright Texas instruments Inc, 2001
;****************************************************************
 

      .global _IMG_perimeter

      .text
_IMG_perimeter:
;
; Configure the status registers as needed.
;----------------------------------------------------------------
     .if __large_model 
      pshboth  XAR5
      pshboth  XAR6
      pshboth  XAR7
     .else
      psh  AR5
      psh  AR6
      psh  AR7
     .endif
     
	;PSH		AR5							;push AR5 into stack
	;PSH		AR6							;push AR6 into stack
	;PSH		AR7							;push AR7 into stack
	MOV		XAR0, XAR2					;AR2 holds pixel_left
 	ADD     #1, AR0                     ;starting from input[1]
 	MOV     XAR0, XAR3
 	ADD     #1, AR3, AR3
 	;ADD		#1, AR0, AR3				;AR3 holds pixel_right
 	MOV		XAR0, XAR4					
 	SUB		T0, AR4						;AR4 holds pixel_up
 	MOV		XAR0, XAR5
 	ADD     T0, AR5						;AR5 holds pixel_down
 	
	SUB		#4, T0						;loop number
    MOV		T0, BRC0					;setup loop number

	MOV		#0, *AR1+					;the first output pixel, 
	MOV		#-2, AC0					;reset AC0
	MAC		*AR2+, *AR3+, AC0			;AC0 = pixel_left * pixel_right +
	MAC		*AR4+, *AR5+, AC0			;pixel_up * pixel_down 	
 	MOV		*AR0+, AC1            	  	;center pixel	
	||XCCPART AC0 != #0					;possible to be boundary
	ADD     #-1, AC1					;AC1 = AC1 - 1
	MOV		#0x00, T1					;if it's not boundary, output 0xFF
	||XCCPART AC1 == #0					;it is the boundary
	MOV		#0xFF, T1					
	
 	rptblocal loop_end-1
	MOV		#-2, AC0					;reset AC0
	||MOV  	T1, *AR1+                  	;update output
	MAC		*AR2+, *AR3+, AC0			;AC0 = pixel_left * pixel_right +
	MAC		*AR4+, *AR5+, AC0			;pixel_up * pixel_down 	
 	MOV		*AR0+, AC1            	  	;center pixel	
	||XCCPART AC0 != #0					;possible to be boundary
	ADD     #-1, AC1					;AC1 = AC1 - 1
	MOV		#0x00, T1					;if it's not boundary, output 0xFF
	||XCCPART AC1 == #0					;it is the boundary
	MOV		#0xFF, T1					
loop_end:	

	MOV		T1, *AR1+
	MOV		#0, *AR1+					;the last output pixel
;
; Return to calling function
;----------------------------------------------------------------
         .if __large_model 
          POPBOTH XAR7
          POPBOTH XAR6
          POPBOTH XAR5
          .else 
          POP		AR7							;restore AR7 from stack
	      POP		AR6							;restore AR6 from stack
	      POP		AR5							;restore AR5 from stack
	      .endif
	RET									;return to calling function

;----------------------------------------------------------------
;End of file
pixel_interal.a/1013715796  40    0     0       2414      `
;****************************************************************
; Function:    IMG_pix_inter_16x16
; Version:     0.2
; Processor:   C5510
; Description:  Half-pixel interpolation  
;
; Usage:      void IMG_pix_inter_16x16(short *reference_window, short *pixel_inter_block,  
;                                       int offset, short *align_variable);

;Change history:
; 
;       VERSION   DATE     /    AUTHORS        COMMENT
;         0.2    09-30-01 /    CHENG          original created based on video macros 
; Copyright Texas instruments Inc, 2001
;****************************************************************
    
    .include "macros_hwa_pi.inc" ; Pixel_interpolation macros
  
    .def _IMG_pix_inter_16x16
 
  .text

_IMG_pix_inter_16x16:
   
    push(T3,T2)
    bit(ST1,#ST1_CPL) = #0
    bit(ST1,#ST1_SATD) = #1   
    bit(ST2,#ST2_ARMS) = #0 
    
    ;source
    XAR2=XAR0
	AR2=AR2+T0
	|| DR0 = #16
	XAR3=XAR2
    AR3 = AR3 + #(48/2)          ; second line src address    
 
    ;Destination
	XAR0 = XAR1                   ; first line stored value array addr
	AR1 = AR0 + #18              ; second line stored value addr 
    T2 = T1 ; hold algin_variable
    || T1 = #0x14                  ; jump between two line of stored values
    T3 = T2 - #1
    if ( T3 == #0) goto #_PIalign1
    T3 = T2 - #2
    if ( T3 == #0) goto #_PIalign2
     T3 = T2 - #3
    if ( T3 == #0) goto #_PIalign3
_PIalign0: 
    AC0 = #0x34                  ; set alignment controller    
    _HWA_PI_16x16_0
    bit(ST1,#ST1_CPL) = #1
    bit(ST1,#ST1_SATD) = #0   
    bit(ST2,#ST2_ARMS) = #1 
    T3,T2 = pop()    
    return
_PIalign1: 
  	AC0 = #0x35                   ; set alignment controller        
    _HWA_PI_16x16_1
    bit(ST1,#ST1_CPL) = #1
    bit(ST1,#ST1_SATD) = #0   
    bit(ST2,#ST2_ARMS) = #1 
    T3,T2 = pop()    
    return
_PIalign2: 
    AC0 = #0x36                   ; set alignment controller      
    _HWA_PI_16x16_2
     bit(ST1,#ST1_CPL) = #1
    bit(ST1,#ST1_SATD) = #0   
    bit(ST2,#ST2_ARMS) = #1 
    T3,T2 = pop()  
    return
_PIalign3: 
    T0=#14
  	AC0 = #0x37                 ; set alignment controller      
    _HWA_PI_16x16_3              
     bit(ST1,#ST1_CPL) = #1
    bit(ST1,#ST1_SATD) = #0   
    bit(ST2,#ST2_ARMS) = #1 
    T3,T2 = pop()  
    return 
      

 
    
  
  
  recInplcemn.asm/1013719372  0     0     0       5793      `
;****************************************************************
; Function:    	reconInplace
; Version:     	1.00
; Processor:   	C55xx
; Description: 	reconstruction wavelet-decompsed signal
;
; Usage:  		reconInplace( int *input, int *output,
;			   			 	   int length, int *wavename )
;                                     
; Arguments:
;     input:	the wavelet decomposed signal buffer
;    output:    the reconstructed signal buffer
;    length:    length of the signal buffers
;  wavename:    the wavelet filter coefficients
;
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ

; Register usage                                  
; --------------                                  
	  .asg    AR0, signal			;linear buffer     
	  .asg    AR1, wksp_add			;wksp address
	  .asg    AR2, filter_add		;filter address
      .asg    AR3, low          	;circular buffer
      .asg    AR4, high         	;circular buffer
      .asg    CDP, wksp       		;circular buffer   
      .asg    XAR0, xsignal
      .asg    XAR3, xlow
      .asg    XAR4, xhigh
  	  ;For reconstruction  
  	  ;---------------------------------------
      .asg    AR1, low_fl           ;circular
      .asg    AR2, high_fl			;circular
      .asg    AR4, low_sg           ;circular
      .asg    AR7, high_sg                    
      ;---------------------------------------
      
      .asg    BSA23, low_base   	;base addr for high
      .asg    BSA45, high_base  	;base addr for low
      .asg    BSAC, wksp_base                     
      
      ;For reconstruction
      ;---------------------------------------
      .asg 	  BSA01, low_fl_base
      .asg    BSA23, high_fl_base
      .asg    BSA45, low_sg_base
      .asg    BSA67, high_sg_base
      ;----------------------------------------
            
      .asg    BK03, low_sz      	;circ buffer size for filter_sz
      .asg    BK47, high_sz     	;circ buffer size for filter_sz 
      .asg    BKC, wksp_sz
      
      ;For reconstruction  
      .asg   BK03, fl_sz
      .asg   BK47, hf_sg_sz               
      
      .asg   CSR, inner_cnt
      .asg   BRC0, outer_cnt
    
ST2mask1  .set  0000000100011000b   ;circular/linear pointers       
ST2mask2  .set  0000000110010110b

      .global _reconInplace

      .text
_reconInplace:

;
; Configure the status registers as needed.
;----------------------------------------------------------------

	AND	#001FFh, mmap(ST0_55)		;clear all ACOVx,TC1, TC2, C
 
	OR	#04140h, mmap(ST1_55)		;set CPL, SXMD, FRCT

	AND	#0F9DFh, mmap(ST1_55)		;clear M40, SATD, 54CM    
    
	AND	#07A00h, mmap(ST2_55)		;clear ARMS, RDM, CDPLC, AR[0-7]LC

	AND	#0FFDDh, mmap(ST3_55)		;clear SATA, SMUL

;
; Setup loop counts
;----------------------------------------------------------------   
	MOV		mmap(T0), wksp_sz
	SFTL	T0, #-1         		;T0 = T0/2, input_length/2  
	MOV		mmap(T0), low_sz        ;lower part size
	MOV		mmap(T0), high_sz       ;higher part size   

	MOV		xsignal, xlow
	MOV		xlow, xhigh
	AMAR	*(high+T0)
	
	MOV     mmap(low), low_base    	;lower part address
	MOV		mmap(high), high_base	;higher part address
	MOV		mmap(wksp_add), wksp_base
 

; Set circular/linear ARx behavior
	MOV		#ST2mask1, mmap(ST2_55)	;configure circular/linear pointers
	
	MOV		*filter_add, T1
	SFTL    T1, #-1   				;Set the offset into T1
	SUB     #1, T1
    SUB	    T0, T1
    NEG     T1, T1
	MOV		T1, low
	MOV		T1, high	       
	MOV		#0, wksp
	
	SUB		#1, T0
	MOV		T0, BRC0            	;outer loop executes nr times   

;
; Start of outer loop
;----------------------------------------------------------------
	RPTBLOCAL	loop1-1     		;start the outer loop
    
    MOV    *low+, *wksp+
    MOV    *high+, *wksp+
 	
loop1:					    		;end of outer loop


;
;Reconstruction
;-------------------------
	MOV		*filter_add+, T1
	AMAR	*(filter_add+T1)
	AMAR	*(filter_add+T1)
	MOV		mmap(filter_add), low_fl_base
	AMAR	*(filter_add+T1)
	MOV		mmap(filter_add), high_fl_base     
	
	MOV		#0, low_fl
	MOV		#0, high_fl
	MOV		#0, wksp
	
	MOV		T0, outer_cnt  

	MOV		mmap(T1), fl_sz
	ADD		#1, T0
	MOV		mmap(T0), hf_sg_sz
	SUB		#3, T1
	MOV		T1, inner_cnt
	NEG		T1, T0

; Set circular/linear ARx behavior
	MOV		#ST2mask2, mmap(ST2_55)	;configure circular/linear pointers
	                                                 
	RPTBLOCAL 	loop2-1
	
	MPY *low_fl+, *wksp+, AC0
	::MPY *high_fl+, *wksp+, AC1   
	
	||RPT inner_cnt
	MAC *low_fl+, *wksp+, AC0
	::MAC *high_fl+, *wksp+, AC1
	
	MAC *low_fl+, *(wksp+T0), AC0
	::MAC *high_fl+, *(wksp+T0), AC1
	
	MOV HI(AC0), *signal+
	MOV HI(AC1), *signal+
	
loop2:	
	
;
; Restore status regs to expected C-convention values as needed
;----------------------------------------------------------------
	BCLR	FRCT					;clear FRCT

	AND	#0FE00h, mmap(ST2_55)		;clear CDPLC and AR[7-0]LC

	BSET	ARMS					;set ARMS

;
; Return to calling function
;----------------------------------------------------------------
	||RET							;return to calling function

;----------------------------------------------------------------
;End of file

reconColmn.asm/ 979160968   0     0     0       5059      `
;****************************************************************
; Function:    	reconCol
; Version:     	1.00
; Processor:   	C55xx
; Description: 	reconstruction a column of an image
;
; Usage:  		reconCol( int *input, int *col, int IMAGE_WIDTH, 
;						   int HEIGHT, int *wavename)
;     
; Note:			Before calling this function, interlace_col() 
;				should be called first to interlace the decomposed
;				signal into buffer input                                
;   Arguments:
;	    input:	the interlaced decompsed signal buffer
;         col:  the starting address of the column
; IMAGE_WIDTH:	width of the image
;      HEIGHT:  column size
;    wavename:  wavelet filter coefficients buffer
;
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ


; Register usage
; --------------
      .asg     CDP, input           ;circular pointer
      .asg     AR1, output         	;linear pointer
      .asg     AR3, low_filter	    ;circular pointer
      .asg     AR4, high_filter     ;circular pointer
                   
      .asg	   BSAC, input_base		;base addr for input
      .asg     BSA23, low_fl_base   ;base addr for low_filter
      .asg     BSA45, high_fl_base	;bass addr for high_filter
                                                              
      .asg     BKC, input_sz		;input circular buffer size
      .asg     BK03, low_fl_sz      ;circ buffer size for filter_sz
      .asg     BK47, high_fl_sz     ;circ buffer size for filter_sz 

      .asg     CSR, inner_cnt       ;inner loop count
      .asg     BRC0, outer_cnt      ;outer loop count

ST2mask  .set  0000000100011000b  	;circular/linear pointers

      .global _reconCol

      .text
_reconCol:

;
; Configure the status registers as needed.
;----------------------------------------------------------------

	AND	#001FFh, mmap(ST0_55)		;clear all ACOVx,TC1, TC2, C
 
	OR	#04140h, mmap(ST1_55)		;set CPL, SXMD, FRCT

	AND	#0F9DFh, mmap(ST1_55)		;clear M40, SATD, 54CM    
    
	AND	#07A00h, mmap(ST2_55)		;clear ARMS, RDM, CDPLC, AR[0-7]LC

	AND	#0FFDDh, mmap(ST3_55)		;clear SATA, SMUL       
	
;
; Setup passed parameters in their destination registers
; Setup circular/linear CDP/ARx behavior
;----------------------------------------------------------------   
 	MOV 	mmap(T1), input_sz
 	SFTL	T1, #-1
 	SUB		#1, T1
 	MOV		T1, outer_cnt;           
 	
 	MOV		T0, T1					;T1 = WIDTH
 	
   	MOV	 	*AR2+, T0				;length of filter
    AMAR 	*(AR2+T0)				
    AMAR 	*(AR2+T0)               ;AR2 point to lower rec filter
    MOV		mmap(AR2), low_fl_base	;get the low_pass filter address
    
    AMAR 	*(AR2+T0)               ;AR2 point to higher rec filter
	MOV		mmap(AR2), high_fl_base	;get the high_pass filter address

; Set circular/linear ARx behavior

	MOV	#ST2mask, mmap(ST2_55)		
	
	MOV		#0, low_filter		    	
	MOV		#0, high_filter		    	   
	
	MOV		mmap(T0), low_fl_sz		    
    MOV		mmap(T0), high_fl_sz		    
   		
 
;
; Setup loop counts
;----------------------------------------------------------------
	
	SUB		#3, T0      
	MOV		T0, inner_cnt   		;inner loop executes times
	NEG		T0, T0          		;T0 is used to reset input pointer   
	
	MOV		#0,	input					
	MOV		mmap(AR0), input_base	;base address of input             
	
;
; Start of outer loop
;----------------------------------------------------------------
	RPTBLOCAL	loop1-1				;start the outer loop
    
;1st iteration                                          
	
  	MPY	*low_filter+, *input+, AC0
	::MPY	*high_filter+, *input+, AC1
   
;inner loop
	||RPT	inner_cnt
	MAC	*low_filter+, *input+, AC0
	::MAC	*high_filter+, *input+, AC1

;last iteration
	MAC	*low_filter+, *(input+T0), AC0
	::MAC	*high_filter+, *(input+T0), AC1
	
  
;store result to memory
	MOV	HI(AC0), *(output+T1)		;store short result to memory
	MOV	HI(AC1), *(output+T1)		;store short result to memory
	
loop1:								;end of outer loop

;
; Restore status regs to expected C-convention values as needed
;----------------------------------------------------------------
	BCLR	FRCT					;clear FRCT

	AND	#0FE00h, mmap(ST2_55)		;clear CDPLC and AR[7-0]LC

	BSET	ARMS					;set ARMS

;
; Return to calling function
;----------------------------------------------------------------
	||RET							;return to calling function

;----------------------------------------------------------------
;End of file

reconmn.asm/    1013719734  0     0     0       5024      `
;****************************************************************
; Function:    	recon
; Version:     	1.00
; Processor:   	C55xx
; Description: 	reconstruction wavelet-decompsed signal
; 
; Usage:		recon( int *input, int *output, 
;						  int length, int *wavename );      
; Note:			before calling the function, interlace() should be
;				called first. In other word, the input buffer is 
;				the interlaced signal of the filter bank outputs
;                               
; Arguments:
;     input:	interlaced filter bank outputs
;    output:    output buffer
;    length:    size of input buffer
;  wavename:    wavelet filter coefficients
;
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ


; Register usage
; --------------
      .asg     CDP, input           ;circular pointer
      .asg     AR1, output         	;linear pointer
      .asg     AR2, low_filter	    ;circular pointer
      .asg     AR4, high_filter     ;circular pointer
     
                   
      .asg	   BSAC, input_base		;base addr for input
      .asg     BSA23, low_fl_base   ;base addr for low_filter
      .asg     BSA45, high_fl_base	;bass addr for high_filter
                                                              
      .asg     BKC, input_sz		;input circular buffer size
      .asg     BK03, low_fl_sz      ;circ buffer size for filter_sz
      .asg     BK47, high_fl_sz     ;circ buffer size for filter_sz 

      .asg     CSR, inner_cnt       ;inner loop count
      .asg     BRC0, outer_cnt      ;outer loop count

ST2mask  .set  0000000100010100b  	;circular/linear pointers

      .global _recon_1D

      .text
_recon:

;
; Configure the status registers as needed.
;----------------------------------------------------------------

	AND	#001FFh, mmap(ST0_55)		;clear all ACOVx,TC1, TC2, C
 
	OR	#04140h, mmap(ST1_55)		;set CPL, SXMD, FRCT

	AND	#0F9DFh, mmap(ST1_55)		;clear M40, SATD, 54CM    
    
	AND	#07A00h, mmap(ST2_55)		;clear ARMS, RDM, CDPLC, AR[0-7]LC

	AND	#0FFDDh, mmap(ST3_55)		;clear SATA, SMUL       
	
;
; Setup passed parameters in their destination registers
; Setup circular/linear CDP/ARx behavior
;----------------------------------------------------------------
   	MOV	 	*AR2+, T1				;length of filter
    AMAR 	*(AR2+T1)				
    AMAR 	*(AR2+T1)               ;AR2 point to lower rec filter
    MOV		mmap(AR2), low_fl_base	;get the low_pass filter address
    
    AMAR 	*(AR2+T1)               ;AR2 point to higher rec filter
	MOV		mmap(AR2), high_fl_base	;get the high_pass filter address

; Set circular/linear ARx behavior

	MOV	#ST2mask, mmap(ST2_55)		
	
	MOV		#0, low_filter		    	
	MOV		#0, high_filter		    	   
	
	MOV		mmap(T1), low_fl_sz		    
    MOV		mmap(T1), high_fl_sz		    
    MOV 	mmap(T0), input_sz		
 
;
; Setup loop counts
;----------------------------------------------------------------
	SFTL    T0, #-1         		;T0 = T0/2-1, input length
	SUB     #1, T0
	MOV	    T0, outer_cnt   		;outer loop executes nr times
	
	SUB		#3, T1      
	MOV		T1, inner_cnt   		;inner loop executes times
	NEG		T1, T0          		;T0 is used to reset input pointer   
	
	MOV		#0,	input					
	MOV		mmap(AR0), input_base	;base address of input             
	
;
; Start of outer loop
;----------------------------------------------------------------
	RPTBLOCAL	loop1-1				;start the outer loop
    
;1st iteration                                          
	
  	MPY	*low_filter+, *input+, AC0
	::MPY	*high_filter+, *input+, AC1
   
;inner loop
	||RPT	inner_cnt
	MAC	*low_filter+, *input+, AC0
	::MAC	*high_filter+, *input+, AC1

;last iteration
	MAC	*low_filter+, *(input+T0), AC0
	::MAC	*high_filter+, *(input+T0), AC1
	
  
;store result to memory
	MOV	HI(AC0), *output+			;store short result to memory
	MOV	HI(AC1), *output+			;store short result to memory
	
loop1:								;end of outer loop

;
; Restore status regs to expected C-convention values as needed
;----------------------------------------------------------------
	BCLR	FRCT					;clear FRCT

	AND	#0FE00h, mmap(ST2_55)		;clear CDPLC and AR[7-0]LC

	BSET	ARMS					;set ARMS

;
; Return to calling function
;----------------------------------------------------------------
	||RET							;return to calling function

;----------------------------------------------------------------
;End of file
row2colmn.asm/  978123920   0     0     0       1587      `
;****************************************************************
; Function:    	row2col
; Version:     	1.00
; Processor:   	C55xx
; Description: 	copy a buffer to a column of an image
;              
; Usage:  	   	row2col( row, col, HEIGHT );
; Arguments:	
;       row:	the address of the buffer
;       col:	the starting address of the column
;    HEIGHT:    the size of the column
;                                     
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

; Stack frame
; -----------
RET_ADDR_SZ       .set 1            ;return address
REG_SAVE_SZ       .set 0            ;save-on-entry registers saved
FRAME_SZ          .set 0            ;local variables
ARG_BLK_SZ        .set 0            ;argument block

PARAM_OFFSET      .set ARG_BLK_SZ + FRAME_SZ + REG_SAVE_SZ + RET_ADDR_SZ


ST2mask  .set  0000000000000000b   	;circular/linear pointers


      .global _row2col
                           
      .text
_row2col:

	SUB		#1, T1
	MOV		T1, BRC0
	                
	RPTBLOCAL	loop1-1 	                
	
	MOV	    *AR0+, *(AR1+T0)
	
loop1:
;
; Return to calling function
;----------------------------------------------------------------
	RET							;return to calling function

;----------------------------------------------------------------
;End of file

row2rowmn.asm/  978124050   0     0     0       1180      `
;****************************************************************
; Function:    	row2row
; Version:     	1.00
; Processor:   	C55xx
; Description: 	copy elements of one buffer to another buffer
;              
; Usage:  	   	col2row(row1, row2, LENGTH );
;                                     
; Arguments:	
;      row1:	starting address of buffer 1, the source buffer
;      row2:	starting address of buffer 2, the destination
;    LENGTH:	size of the buffers
; Copyright Texas instruments Inc, 2000
;****************************************************************

      .ARMS_off                     ;enable assembler for ARMS=0
      .CPL_on                       ;enable assembler for CPL=1
      .mmregs                       ;enable mem mapped register names

      .global _row2row
                           
      .text
_row2row:

	SFTL	T0, #-1
	SUB		#1, T0
	MOV		T0, CSR
	
	RPT		CSR
	MOV	    dbl(*AR0+), dbl(*AR1+)

; Return to calling function
;----------------------------------------------------------------
	RET							;return to calling function

;----------------------------------------------------------------
;End of file
sad_16x16al.asm/1047426629  0     0     0       1326      `
;*******************************************************************************
; Function:    IMG_sad_16x16
; Version:     2.2
; Processor:   C5510
; Description:  Calculate sum of the absolute difference for 16x16 blocks
; unsigned short IMG_sad_16x16(unsigned short *srcImg, unsigned 
;                            short *search_point, int pitch); 
;
; Change history:
; 
;       VERSION   DATE      /    AUTHORS        COMMENT
;         2.2    02/28/03       CHENG PENG          original creation
; Benchmark 156 cycles
; code size 28 words
; Copyright Texas instruments Inc, 2003
;*******************************************************************************

   
    
   .def _IMG_sad_16x16
   .text
_IMG_sad_16x16:
  T0=T0>>1
  T0=T0-#7
  XCDP=XAR0;
  XAR0=XAR1
    || BRC0 = #0xE
  	AC0,AC1 = copr(#0x5c,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
    repeat(#0x5)
  	AC0,AC1 = copr(#0x43,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
  	AC0,AC1 = copr(#0x43,AC0,AC1,*(AR0+T0),*AR1,coef(*CDP+))
    localrepeat{
   repeat(#0x6)
    AC0,AC1 = copr(#0x43,AC0,AC1,*AR0+,*AR1,coef(*CDP+));
    AC0,AC1 = copr(#0x43,AC0,AC1,*(AR0+T0),*AR1,coef(*CDP+))
    } 
    AC0,AC1 = copr(#0x43,AC0,AC1,*AR0,*AR1,coef(*CDP))
    AC0,AC1 = copr(#0x40,AC0,AC1,*AR0,*AR1,coef(*CDP))            
  
    T0=AC0
    return
sad_8x8al.asm/  1047426559  0     0     0       1432      `
;*******************************************************************************
; Function:    IMG_sad_8x8
; Version:     2.2
; Processor:   C5510
; Description:  Calculate sum of the absolute difference for 8x8 blocks
; unsigned short IMG_sad_8x8(unsigned short *srcImg, unsigned 
;                            short *search_point, int pitch); 
;
; Change history:
; 
;       VERSION   DATE      /    AUTHORS        COMMENT
;         2.2    02/28/03       CHENG PENG          original creation
; Benchmark 52 cycles
; code size 28 words
; Copyright Texas instruments Inc, 2003
;*******************************************************************************

   
    
   .def _IMG_sad_8x8
   .text
_IMG_sad_8x8:
  T0=T0>>#1
  T0=T0-#3
  XCDP=XAR0;
  XAR0=XAR1
  ||  BRC0 = #0x6 ;repeat 7 times
  	AC0,AC1 = copr(#0x5c,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
    repeat(#0x1); repeat 2 times
  	AC0,AC1 = copr(#0x43,AC0,AC1,*AR0+,*AR1,coef(*CDP+))
  	AC0,AC1 = copr(#0x43,AC0,AC1,*(AR0+T0),*AR1,coef(*CDP+))
    localrepeat{
   repeat(#0x2) ; repeat 3 times
    AC0,AC1 = copr(#0x43,AC0,AC1,*AR0+,*AR1,coef(*CDP+));1-7
    AC0,AC1 = copr(#0x43,AC0,AC1,*(AR0+T0),*AR1,coef(*CDP+));8
    } 
    AC0,AC1 = copr(#0x43,AC0,AC1,*AR0,*AR1,coef(*CDP))
    AC0,AC1 = copr(#0x40,AC0,AC1,*AR0,*AR1,coef(*CDP))            
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
  
  T0=AC0
    
  return
swidct.asm/     1013745146  0     0     0       10727     `
;****************************************************************
; Function:    IMG_sw_idct_8x8
; Version:     0.2
; Processor:   C5510
; Description: 2-D  Inverse Discrete Cosine Transform (DCT) 
;                   for 8*8 DCT coefficients.

;
; Usage:       void IMG_sw_idct_8x8(short * idct_data, short * inter_uffer)
;
;Change history:
; 
;       VERSION   DATE     /    AUTHORS        COMMENT
;         0.2    03-Jul-01 /    CHENG          Modified to be a C-callable function, 
;                                              avoid the hard-coded memory setup
;         0.1    21-Jul-99 /    BALMELLE       modified for MPEG-4 implementation on C55xx
;         0.0    21-Jul-98 /    Guermeur       original created
; Copyright Texas instruments Inc, 2001
;****************************************************************
           .mmregs
            .sect  "idctcoef"		
r_coefs		.copy "m4idct.tab"
            .def    _IMG_sw_idct_8x8
            .text
;//---------------------------------------------------
;// Create local variables
;//----------------------------------------------------
ARG0      .set 0x0000
ARG1      .set 0x0001
p_interm  .set 0x0002
p_interm2 .set 0x0004
 
_IMG_sw_idct_8x8:
;//---------------------------------------------------
;// Context save 
;//----------------------------------------------------
    push(DR3,DR2)
    pshboth(XAR5)
    .if __large_model  
    pshboth(XAR6)
    pshboth(XAR7)
    .else
    push(AR6,AR7)
    .endif
       
;//---------------------------------------------------
;// Initialization code
;//----------------------------------------------------
    bit(ST1,#ST1_FRCT) = #1
    bit(ST1,#ST1_SXMD) = #1
    bit(ST2,#ST2_ARMS) = #0
	bit(ST2,#ST2_CDPLC) = #1		            ;set circular addressing with CDP
   	bit(ST2,#ST2_AR0LC) = #1		            ;set circular addressing with AR0
   	bit(ST2,#ST2_AR1LC) = #1		            ;set circular addressing with AR1
	bit(ST2,#ST2_AR7LC) = #1	                ;set circular addressing with AR7
  
     SP = SP + #-6
    @(ARG0) = AR0
    @(ARG1) = AR1
    @(p_interm)=AR1
      @(p_interm)=@(p_interm)+#64
    @(p_interm2)=AR1  
    @(p_interm2)=@(p_interm2)+#128
    XAR2=XAR1 ; cheng
    XAR6=XAR1 ; cheng
	BKC  = #(4)                                 ;set circular addressing length for coefs  3 bytes
	|| DR2 = #4	                                ;2 bytes
	BK03 = #(64)                                ;set circular addressing length for AR0 and AR1  3 bytes
	|| DR3 = #0                                 ;Shift between the two 1-D IDCT  2 bytes
	BK47 = #(64)                                ;set circular addressing length for AR7  3 bytes
	|| DR1 = #6                                 ;For addressing  2 bytes
    
    XAR7 = XAR1
    XCDP = #r_coefs
	BOFC = #((r_coefs) & 0x0ffff)               ;set coefs[] start address  3 bytes
	AR4 = #(8)
	BOF01 = @(ARG0)                             ;set p_buffer_in[] start address  3 bytes
	|| AR0 = #0                                 ;AR0-> X(0) (input)  2 bytes
	BOF67 = @(ARG1)                             ;set p_buffer_out[] start address  3 bytes

	|| DR0 = #2                                 ;For addressing  2 bytes
	AR1 = #4                                    ;AR1-> X(4) (input)  2 bytes
	|| CDP = #0                                 ;4 bytes
	AR7 = #(6*8)                                ;AR7-> x(6) (output)  4 bytes
                                                ;|dummy|interm8|interm5|interm7|interm6|interm8|...(all long words)
 
	AR6=@(p_interm)
	AR2=@(p_interm2)
 
	BRC1 = #7                                   ;Inner loop iteration number (8 raws of the matrix)
	|| AR5 = #8                                 ;For swap purpose with DR1 for addressing  2 bytes
	AR3 = #3                                    ;3 bytes

   	|| BRC0 = #1                                ;1st pass : 1-D IDCT on the raws of the input matrix
                                                ;2nd pass : 1-D IDCT on the raws of 1st 1-D IDCT output matrix
                                                ;(transposed during store phase)
	blockrepeat {                               ;*************************  3 bytes

	localrepeat {                               ; *** begin 1st stage (8 times)
	AC0 = *(AR0+DR0) * coef(*CDP+),             ; AC0=X(0)*C4
	AC2 = *(AR1+DR0) * coef(*CDP+)              ; AC1=X(4)*C4

	dbl(*AR6+) = AC1                            ;AC1=interm6
	|| AC0 = AC0 - AC2                          ;ACO=X(0)*C4-X(4)C(4)  ACO=interm2

	dbl(*AR2) = AC0                             ;dbl(*AR2)=a_interm2
	|| AC0 = AC0 + (AC2 << #1)                  ;ACO=X(0)*C4+X(4)C(4)  ACO=a_interm1

	AC1 = *AR0 *coef(*CDP+),                    ;AC1=X(2)*C6
	AC3 = *AR1 *coef(*CDP+)                     ;AC3=X(6)*C6

	AC1 = AC1 - (*(AR1+DR1) * coef(*(CDP+DR0))), ;AC1=X(2)C6-X(6)C2  AC1=interm3
	AC3 = AC3 + (*(AR0+DR1) * coef(*(CDP+DR0)))	 ;AC3=X(6)C6+X(2)C2  AC3=interm4

	AC2 = dbl(*AR2)                             ;AC2=interm2
	|| AC0 = AC0 - AC3                          ;AC0=interm1-interm4  AC0=interm8
	
	dbl(*AR6+) = AC0                            ;AC0=interm8
	|| AC0 = AC0 +(AC3 << #1)                   ;AC0=interm1+interm4  AC0=interm5

	dbl(*AR6+)= AC0                             ;AC0=interm5
	|| AC2 = AC2 - AC1                          ;AC2=interm2-interm3  AC2=interm7

        dbl(*AR6+)= AC2                         ;AC2=interm7
	AC1 = AC1 + dbl(*AR2)                       ;AC1=interm+interm3  AC1=interm6
	}                                           ; *** end 1st stage

	CDP = #0
	|| AR1 = AR1-AR3
	dbl(*AR6) = AC1                             ;AC1=interm6
	|| mar(AR0 + AR3)                           ;AR0->X(3)

                   
    AR6 = @(p_interm) ;AR6-> interm6
    
    AR6 = AR6 + #8
	mar(AR7 - #41)                              ;AR1-> X(1)
	BRC1 = #7
	|| swap(AR5,DR1)                            ;3 bytes

	BOFC = #((r_coefs+3) & 0x0ffff)             ; set coefs[] start address at C3 (CDP->C3)  3 bytes

	localrepeat{                                ; *** begin 2nd stage

	AC0 = *AR1 * coef(*CDP+),                   ;AC0 = X(1)*C3
	AC2 = *(AR0+DR0) * coef(*CDP+)              ;AC2 = X(3)*C3  4 bytes
	|| swap(AR5,DR1)

	AC0 = AC0 - (*AR0 * coef(*CDP+)),           ;AC0 = AC0-X(5)*C1
	AC2 = AC2 + (*(AR1+DR1) * coef(*CDP+))      ;AC2 = AC2+X(1)*C1  4 bytes
	|| swap(AR5,DR1)

	AC0 = AC0 - (*AR1 * coef(*CDP+)),           ;AC0 = AC0-X(7)*C5
	AC2 = AC2 + (*(AR0-DR0) * coef(*CDP+))      ;AC2 = AC2+X(5)*C5  4 bytes

	AC0 = AC0 - (*(AR0+DR1) * coef(*CDP+)),     ;AC0 = AC0-X(3)*C7  AC0=interm11
	AC2 = AC2 + (*(AR1+DR0) * coef(*CDP+))      ;AC2 = AC2+X(7)*C7  AC2=interm12
	|| swap(DR0,DR2)

	AC1 = dbl(*(AR6-DR0)) - AC0                 ;AC1=(interm6-interm11)  AC1=x(6)
	|| mar(AR7+ #41)

    *(AR7+DR1) = HI(saturate(rnd(AC1 << DR3))) ;x(6)

    AC3 = dbl(*AR6) - AC2                      ;AC3=(interm5-interm12)  AC3=x(7)

    *(AR7+DR1) = HI(saturate(rnd(AC3 << DR3))) ;x(7)
    AC1 = dbl(*(AR6+DR0)) + AC2                ;AC1=(interm5+interm12)  AC1=x(0)
    *(AR7+DR1) = HI(saturate(rnd(AC1 << DR3))) ;x(0)
    
    AC3 = dbl(*(AR6+DR1)) + AC0                 ;AC3=(interm6+interm11)  AC3=x(1)

    *AR7 = HI(saturate(rnd(AC3 << DR3)))        ;x(1)
    || swap(DR0,DR2)
    }                                           ; *** end 2nd stage

                         
    AR6=@(p_interm)                             ; AR6-> interm7
   
    AR6 = AR6 + #6
    AR1 = AR1+DR2                               ; AR1-> X(5)

    mar(AR7 + #24)
    || mar(AR0 - DR0)                           ; AR0-> X(1)
        
    BOFC = #((r_coefs+3) & 0x0ffff)             ; set coefs[] start address at C3
    CDP = #3

    localrepeat {                               ; *** begin 3rd stage
    AC0 = *AR0 * coef(*CDP-),                   ; AC0=X(1)*C7
    AC2 = *(AR1-DR0) * coef(*CDP-)              ; AC2=X(5)*C7
    || swap(DR1,AR5)

	AC0 = AC0 - (*AR1 * coef(*CDP-)),           ; AC0=AC0-X(3)*C5
	AC2 = AC2 + (*(AR0+DR1) * coef(*CDP-))      ; AC2=AC2+X(1)*C5
	AC0 = AC0 -(*AR0 * coef(*CDP-)),            ; AC0=AC0-X(7)*C1
	AC2 = AC2 -(*(AR1+DR0) * coef(*CDP-))       ; AC2=AC2-X(3)*C1
	|| swap(DR1,AR5)

	AC0 = AC0 +( *(AR1 + DR1) * coef (*CDP-)),  ; AC0=AC0+X(5)*C3  AC0=interm9
	AC2 = AC2 +( *(AR0 + DR0) * coef (*CDP-))   ; AC2=AC2+X(7)*C3  AC2=interm10
	|| swap(DR0,DR2)

	AC1 = AC2 + dbl(*(AR6-DR0))                 ;AC1=interm10+interm7  AC1=x(2)
	|| mar(AR7 + #41)                           ;AR7-> x(2) first column

	AC3 = dbl(*AR6) + AC0                       ;AC3=interm8+interm9  AC3=x(3)
	*(AR7+DR1) = HI(saturate(rnd(AC1 << DR3)))  ;x(2)

	AC1 = dbl(*(AR6+DR0)) - AC0                 ;AC1=interm8 - interm9  AC1=x(4)

	*(AR7+DR1) = HI(saturate(rnd(AC3 << DR3)))  ;x(3)

	AC3 = dbl(*(AR6+DR1)) - AC2                 ;AC3=interm7-interm10  AC3=x(5)
	*(AR7+DR1) = HI(saturate(rnd(AC1 << DR3)))  ;x(4)

	*AR7 = HI(saturate(rnd(AC3 << DR3)))        ;x(5)
	|| swap(DR0,DR2)
	}
                                                ; *** end 3rd stage
	BOF01 = @(ARG1)                             ; The output matrix becomes the input matrix
	|| swap(DR1,AR5)

	DR3 = #-5                                   ; The output results are
	|| mar(*AR1-)                               ; shifted by and DR3.

	mar(AR7 + #1)                               ; AR7->x6
	|| mar(*AR0-)

	BOF67 = @(ARG0)                             ; The input buffer becomes the output buffer

	BOFC = #((r_coefs) & 0x0ffff)               ; set coefs[] start address at C4

	 AR6=@(p_interm)                   ;AR6 -> dummy (first element of interm)
 
   
    CDP = #0
	}
    
 
     SP = SP + #6

;//---------------------------------------------------
;//  Context restoration
;//----------------------------------------------------
    bit(ST1,#ST1_FRCT) = #0
    bit(ST2,#ST2_ARMS) = #1
    bit(ST2,#ST2_CDPLC) = #0                    ;reset circular addressing with CDP
   	bit(ST2,#ST2_AR0LC) = #0                    ;reset circular addressing with AR0
   	bit(ST2,#ST2_AR1LC) = #0                    ;reset circular addressing with AR1
   	bit(ST2,#ST2_AR7LC) = #0                    ;reset circular addressing with AR7
   
;//---------------------------------------------------
;//  Context restoration
;//----------------------------------------------------

    .if __large_model
    XAR7 = popboth()
    XAR6 = popboth()
    .else
    AR6,AR7=pop()
    .endif
    XAR5 = popboth() ; 
    DR3,DR2 = pop() ;
   	return
  
    


thresholdmn.asm/1013710728  0     0     0       1795      `
;****************************************************************
; Function:    	IMG_threshold
; Version:     	1.00
; Processor:   	C55xx
; Description: 	Performs thresholding oeration on an input image.
;           	Pixels that are above the threshold value are 
;				written to the output unmodified. Other pixels 
;				clamped to zero in the output image
;              
; Usage:  	   	IMG_threshold( short *in_data, short out_data, short cols, 
;						   short rows, short threshold_value );
; 
; Copyright Texas instruments Inc, 2001
;****************************************************************
 
      .global _IMG_threshold

      .text
_IMG_threshold:
	MOV		T0, HI(AC0)				;number of row of the image
	MPY		T1, AC0, AC1			;the size of the image
	SFTL	AC1, #-1				;half size of theimage
	SUB		#1, AC1, T0				
	MOV		T0, BRC0				;loop counter
	
	MOV		AR2, T1					;threshold value
    MOV		#2, T0					;index step size is 2
    MOV     XAR0, XAR2
    MOV     XAR1, XAR3
    ADD     #1, AR2, AR2			;odd index input pixel buffer
 	ADD		#1, AR3, AR3			;odd index output pixel buffer
 	
 	MOV		#0xFF, AC2				;AC2 = 0x0000FF
 	SFTL	AC2, #16				;AC2 = 0xFF0000
 	ADD		#0xFF, AC2				;AC2 = 0xFF00FF

 	||rptblocal loop_end-1
 	SUB 	dual(*AR0), T1, AC0		; threshold - input
    MOV		*(AR2+T0), *(AR0+T0), AC1	
    								;AC1 keeps the original input
 	||SFTL	AC0, #-8				;(threshold-input)>>8
 	AND		AC2, AC1				;input & 0xFF00FF
 	AND		AC1, AC0				;finial resuolt
 	MOV		AC0, *(AR3+T0), *(AR1+T0);output result
loop_end:
;
; Return to calling function
;----------------------------------------------------------------
	RET									;return to calling function

;----------------------------------------------------------------
;End of file

ycbcr422_rgb565/1047425246  59    0     0       3348      `
;*******************************************************************************
; Function:    IMG_ycbcr422_rgb565
; Version:     2.2
; Processor:   C5510
; Description:  Color conversion YCbCr422->RGB565
; 
;
; void IMG_ycbcr422_rgb565(short *coeff,short *y_data,short *cb_data,
;                        short *cr_data, short *rgb_data, short number_pixels); 
;
; Change history:
; 
;       VERSION   DATE      /    AUTHORS        COMMENT
;         1.0    02/28/03       CHENG PENG          original creation
; Benchmark 12 x number_pixels+47 cycles
; code size 111 words
; Copyright Texas instruments Inc, 2003
;*******************************************************************************

             .mmregs
             .sect "offset_buffer"
offset_buffer .int 0, 0, 0
           .def _IMG_ycbcr422_rgb565
	       .text  

_IMG_ycbcr422_rgb565:
   
    .if __large_model                
       pshboth(XAR7)
       pshboth(XAR6)
       pshboth(XAR5)
     .else
       push(AR6,AR7)
       push(AR5)
     .endif 
      push(T3,T2)
      push(@ST1_L) || mmap()
      push(@ST2_L) || mmap()	
   
    bit(ST1,#ST1_CPL) = #0 
	bit(ST2, #ST2_RDM) = #1 	  
	|| CDP = #0

	bit(ST2, #ST2_CDPLC) = #1	  
	|| BK47 = #6			      	
	bit(ST2, #ST2_AR5LC) = #1	  
	|| BKC = #7	
	bit(ST1, #ST1_SXMD) = #1
				  
	BOFC= @AR0_L               
    ||mmap() 
 
	
	
 
    T2 = #0xFF
 	||AC0=T0 ; size
	AC0=AC0 >> #1
	||AR0=#offset_buffer
	BOF45=@AR0_L
	||mmap()
	AC0=AC0-#1
	||XAR7=XAR1

    AR5 = #0
    ||T0=AC0
    BRC0=T0
    ||AC0 = *CDP+ << #4    		 
	 AR7=AR7+#1                    
	 ||AC0 += *CDP+ <<#7 

	AC1 = *CDP+ <<#4
	
	AC1 += *CDP+ << #7 
 
	AC1 +=*CDP+ << #7 
	
	AC0=-AC0
	AC1=-AC1
	||dbl(*AR5+)=AC0 
    dbl(*AR5+)=AC1
    ||AC1=AC0
 	AC2 = *CDP+ << #4 
	AC2 += *CDP+ << #7
	AC2=-AC2
   
   	dbl(*AR5+)=AC2
	 AC0=dbl(*AR5+)  
     T0=#-5
   Blockrepeat{
   
      AC1=AC0
      AC0  = AC0 + (*AR1 * coef(*CDP+)),
      AC1 =  AC1 + (*AR7 * coef(*CDP+))
      AC0  = AC0 + (*AR3 * coef(*CDP+)),
      AC1 =  AC1 +  (*AR3 * coef(*CDP+))
      
     
      AC0= AC0 <<< T0 
      ||AC2= dbl(*AR5)   
      AC0= AC0 & 0xF800
      AC1= AC1 <<< T0 
      || AC3=dbl(*AR5+)  
      AC1= AC1 & 0xF800
       
      AC2 = AC2 + (*AR1 * coef(*CDP+)),
      AC3 = AC3 + (*AR7 * coef(*CDP+))
      AC2 = AC2 + (*AR2 * coef(*CDP+)),      
      AC3 = AC3 + (*AR2 * coef(*CDP+))
      AC2 = AC2 + (*AR3+ * coef(*CDP+)),
      AC3 = AC3 + (*AR3+ * coef(*CDP+))
      
       AC0= AC0 |(AC2 <<< #-10) ;-11
       ||AC2= dbl(*AR5) 
       AC1=AC1 |(AC3 <<< #-10) 
       ||AC3= dbl(*AR5+) 
       AC0=AC0 & 0xFFE0
       AC1=AC1 & 0xFFE0
       
     
	  AC2  = AC2 + (*AR1 * coef(*CDP+)),
      AC3 =  AC3 + (*AR7 * coef(*CDP+))
      AC2  = AC2 + (*AR2+ * coef(*CDP+)),
      AC3 =  AC3 +  (*AR2+ * coef(*CDP+))
      
      AC0 = AC0 | (AC2 <<< #-16) ;-17
      ||mar(AR1+#02)
	  AC1 = AC1 | (AC3 <<< #-16) 
	  ||mar(AR7+#02) 
	  *AR4+ =pair(lo(AC0))
	  ||AC0=dbl(*AR5+)
	}
    @ST2_L = pop() || mmap()
    @ST1_L = pop() || mmap()
    T3,T2=pop()
    .if __large_model 
       XAR5=popboth()
       XAR6=popboth()
       XAR7=popboth()
   .else
       AR5=pop()
       AR6,AR7=pop()
   .endif
   
   return

1dDwtDsp.c/     1002737626  0     0     0       1327      `
 

void  IMG_wave_decom_one_dim( int *in_data, int *wksp, int *wavename, int Length, int Level )
{          
	int		i;
	for( i = 0; i < Level; i++ )
	{
		decomInplace( in_data, wksp, Length, wavename );
		Length>>=1;
	}
}

void IMG_wave_recon_one_dim( int *in_data, int *wksp, int *wavename, int Length, int Level )
{         
	int		i;      
	
	Length>>=(Level-1);
	for( i = 0; i < Level; i++ )
	{
		reconInplace(in_data, wksp, Length, wavename);
		Length<<=1;
	}
}	  

void IMG_wavep_decom_one_dim( int *in_data, int *wksp, int *wavename, int Length, int Level )
{          
	int		i, j;   
	int		start, seg_num;
	
	seg_num = 1;
	for( i = 0; i < Level; i++ )
	{   
		start = 0;         
		for( j = 0; j < seg_num; j++ )
		{
			decomInplace( &in_data[start], wksp, Length, wavename );
			start += Length;
		}
		Length>>=1;      
		seg_num<<=1;
	}   
}

void IMG_wavep_recon_one_dim( int *in_data, int *wksp, int *wavename, int Length, int Level )
{         
	int		i, j;      
	int		start, seg_num;
	
	Length>>=(Level-1);         
	seg_num = 1<<(Level-1);
	for( i = 0; i < Level; i++ )
	{   
		start = 0;
		for( j = 0; j < seg_num; j++ )
		{
			reconInplace(&in_data[start], wksp, Length, wavename);
			start +=Length;
		}
		Length<<=1;           
		seg_num>>=1;
	}
}

2DWavelet.c/    1002742424  0     0     0       3492      `
 

void IMG_wave_decom_two_dim( int **image, int *ws, int Width, int Height, int *wavename, int Level )
{
	int		i, k, half, ImgWid;
	
	ImgWid = Width;	
	for( k = 0; k < Level; k++ )
	{	
		half = Height>>1;	
		for( i = 0; i < Height; i++ )   
			decomInplace( image[i], ws, Width, wavename );
		for( i = 0; i < Width; i++ )
		{
			col2row( &image[0][i], ws, ImgWid, Height );
			decomCol( ws, &image[0][i], &image[half][i], ImgWid, Height, wavename ); 
		}
		Width>>=1; Height>>=1;
	}
}

void IMG_wave_recon_two_dim( int **image, int *ws, int Width, int Height, int *wavename, int Level )
{ 
	int		i, k, half, ImgWid;         
	
	ImgWid = Width;   
	Width>>=(Level-1); Height>>=(Level-1);
	for( k = 0; k < Level; k++ )
	{
		half = Height>>1;
		for( i = 0; i < Width; i++ )
   		{
   			interlaceCol( &image[0][i], &image[half][i], ws, ImgWid, Height, wavename[0] );
   			reconCol( ws, &image[0][i], ImgWid, Height, wavename );
   		}
   		for( i = 0; i < Height; i++ ) 
			reconInplace( image[i], ws, Width, wavename );
		Width<<=1; Height<<=1;
	}
}
void IMG_wavep_decom_two_dim( int **image, int *ws, int Width, int Height, int *wavename, int Level )
{
	int		i, j, k, half, ImgWid, ImgHt;  
	int		row_start, col_start, seg_num;
	
	ImgWid = Width;	ImgHt = Height;
	seg_num = 1;
	for( k = 0; k < Level; k++ )
	{	
		//Do the decomposition for each row         
		//-----------------------------------------------------------
		for( i = 0; i < ImgHt; i++ )
		{
			row_start = 0;
			for( j = 0; j < seg_num; j++ )
			{   
				decomInplace( &image[i][row_start], ws, Width, wavename );
				row_start += Width;    
			}   
		}
		//===========================================================  
			
		//Do the decomposition for each column
		//----------------------------------------------------------- 
		for( i = 0; i < ImgWid; i++ )
		{
			col_start = 0; 
			for( j = 0; j < seg_num; j++)
			{
				half = col_start + (Height>>1);
				col2row( &image[col_start][i], ws, ImgWid, Height );
				decomCol( ws, &image[col_start][i], &image[half][i], ImgWid, Height, wavename ); 
				col_start += Height;
			}
		}       
		//===========================================================
		Width>>=1; Height>>=1;
		seg_num<<=1;   
	}
}

void IMG_wavep_recon_two_dim( int **image, int *ws, int Width, int Height, int *wavename, int Level )
{         
	int		i, j, k, half, ImgWid, ImgHt;  
	int		row_start, col_start, seg_num;
	
	ImgWid  = Width;	
	ImgHt   = Height;    
	Width >>=(Level-1);         
	Height>>=(Level-1);
	seg_num = 1<<(Level-1);
	
	for( k = 0; k < Level; k++ )
	{	
		//Do the reconstruction for each column
		//----------------------------------------------------------- 
		for( i = 0; i < ImgWid; i++ )
		{
			col_start = 0; 
			for( j = 0; j < seg_num; j++)
			{
				half = col_start + (Height>>1);
				interlaceCol( &image[col_start][i], &image[half][i], ws, ImgWid, Height, wavename[0] );
				reconCol( ws, &image[col_start][i], ImgWid, Height, wavename ); 
				col_start += Height;
			}
		}       
		//Do the reconstruction for each row         
		//-----------------------------------------------------------
		for( i = 0; i < ImgHt; i++ )
		{
			row_start = 0;
			for( j = 0; j < seg_num; j++ )
			{   
				reconInplace( &image[i][row_start], ws, Width, wavename );
				row_start += Width;    
			}   
		}
		
		Width<<=1; Height<<=1;
		seg_num>>=1;  
	}
}


imagelib.h/     1047065966  0     0     0       2850      `
#ifndef _IMAGELIB
#define _IMAGELIB
void IMG_conv_3x3(unsigned char *input, unsigned char *output,unsigned char *mask,int column, int shift); 
void IMG_corr_3x3(unsigned char *input, unsigned char *output,unsigned char *mask,int row, int column, int shift, int roundval);
void IMG_dequantize_8x8(short *quantize_tbl, short *deq_data);
void IMG_fdct_8x8 (short *fdct_data, short *inter_buffer);
void IMG_idct_8x8 (short *idct_data, short *inter_buffer);
void IMG_jpeg_make_recip_tbl(short *quantize_tbl);
void IMG_jpeg_quantize(short *quantize_input, short *zigzag, short *recip_tbl,int *quantize_output);
//void IMG_jpeg_vlc(int *input_zigzag, int *output,int type); 
void IMG_jpeg_vlc(int *ptr,int *output,int *VLC_status, int type); 
void IMG_mad_8x8(unsigned short *ref_data, unsigned short* src_data, int pitch, int sx, int sy, unsigned int *match);
void IMG_mad_16x16(unsigned short *ref_data,unsigned short *src_data, int pitch, int sx, int sy,unsigned int *match);
void IMG_mad_16x16_4step(short *src_data, short * search_window, unsigned int *match);
void IMG_pix_inter_16x16(short *reference_window, short *pixel_inter_block,  int offset, short align_variable);
void IMG_sw_fdct_8x8 (short *fdct_data, short *inter_buffer);
void IMG__sw_idct_8x8 (short *idct_data, short *inter_buffer);
void IMG_wave_decom_one_dim(short *in_data, short *wksp, int *wavename, int length, int level);
void IMG_wave_decom_two_dim(short **image, short * wksp, int width, int height, int *wavename, int level);
void IMG_wave_recon_one_dim(short *in_data, short *wksp, int *wavename, int length, int level);
void IMG_wave_recon_two_dim(short **image, short * wksp, int width, int height, int *wavename, int level);
void IMG_wavep_decom_one_dim(short *in_data, short *wksp, int *wavename, int length, int level);
void IMG_wavep_decom_two_dim(short **image, short * wksp, int width, int height, int *wavename,int level);
void IMG_wavep_recon_one_dim(short *in_data, short *wksp, int *wavename, int length, int level);
void IMG_wavep_recon_two_dim(short **image, short * wksp, int width, int height, int *wavename, int level);
void IMG_boundary(short * in_data, int rows, int cols, int *out_coord, int *out_gray);
void IMG_histogram(short * in_data, short *out_data, int size);
void IMG_perimeter( short * in_data, int cols, short *out_data);
void IMG_scale_by_2(short *org_image, short *inter_image, int row, int column);
unsigned short IMG_sad_8x8(unsigned short *srcImg, unsigned short *search_point, int pitch);
unsigned short IMG_sad_16x16(unsigned short *srcImg,unsigned short *search_point, int pitch);
void IMG_threshold(short * in_data, short *out_data, short cols, short rows, short threshold_value);
void IMG_ycbcr422_rgb565(short *coeff,short *y_data,short *cb_data,short *cr_data, short *rgb_data, short size); 
#endif
imagesample.h/  1002805086  0     0     0       84810     `
#pragma DATA_SECTION( goldhill, "lily")
short goldhill[128][128] = {
{
  10, 228, 229, 230, 230, 231, 233, 232, 231, 231, 233, 233, 230, 234, 233, 233,
 235, 233, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 234, 235,
 235, 235, 235, 235, 235, 235, 235, 235, 235, 232, 227, 229, 230, 228, 227, 222,
 228, 224, 222, 227, 224, 224, 225, 226, 230, 225, 223, 227, 230, 233, 232, 233,
 233, 232, 230, 230, 230, 229, 229, 231, 229, 228, 230, 229, 230, 229, 229, 232,
 229, 226, 228, 227, 226, 228, 228, 226, 228, 226, 226, 227, 223, 226, 227, 224,
 224, 221, 224, 220, 221, 220, 220, 216, 223, 221, 221, 221, 220, 216, 220, 211,
 213, 214, 218, 203, 215, 209, 212, 210, 210, 208, 208, 207, 205, 202, 202, 204
},
{
 199, 232, 229, 232, 234, 230, 234, 231, 232, 233, 230, 233, 234, 228, 223, 230,
 229, 231, 232, 234, 233, 234, 235, 235, 232, 234, 232, 231, 233, 235, 233, 226,
 235, 235, 233, 235, 235, 235, 235, 235, 233, 234, 234, 232, 232, 233, 231, 232,
 230, 229, 231, 230, 232, 229, 231, 231, 231, 230, 230, 229, 230, 229, 228, 231,
 231, 234, 230, 231, 228, 232, 230, 229, 232, 233, 230, 230, 232, 231, 233, 231,
 232, 227, 229, 229, 227, 227, 228, 228, 228, 230, 227, 218, 226, 223, 222, 222,
 224, 220, 218, 219, 220, 217, 217, 215, 219, 214, 212, 214, 213, 212, 210, 211,
 213, 213, 212, 211, 211, 205, 200, 203, 204, 203, 206, 204, 205, 204, 200, 197
},
{
 199, 230, 232, 231, 231, 234, 234, 232, 229, 231, 234, 233, 234, 234, 231, 231,
 235, 232, 232, 234, 235, 235, 235, 235, 235, 235, 234, 234, 232, 235, 235, 235,
 235, 233, 234, 232, 234, 233, 232, 232, 231, 232, 234, 231, 230, 230, 230, 230,
 232, 229, 230, 230, 232, 229, 233, 229, 229, 230, 232, 230, 229, 227, 232, 231,
 232, 230, 232, 232, 229, 234, 231, 234, 231, 234, 231, 229, 230, 233, 232, 231,
 228, 225, 227, 231, 229, 226, 227, 230, 226, 226, 226, 228, 225, 227, 225, 225,
 222, 220, 221, 221, 220, 218, 212, 219, 217, 218, 216, 217, 212, 212, 214, 211,
 210, 213, 209, 209, 205, 208, 207, 210, 210, 206, 210, 205, 208, 206, 202, 203
},
{
 200, 232, 231, 234, 232, 232, 232, 231, 233, 232, 232, 231, 230, 234, 231, 231,
 233, 233, 233, 223, 233, 230, 233, 232, 232, 233, 231, 231, 232, 234, 235, 235,
 234, 234, 235, 231, 232, 232, 233, 233, 230, 231, 231, 230, 229, 229, 230, 233,
 232, 231, 232, 230, 229, 232, 228, 232, 228, 232, 229, 229, 232, 228, 233, 231,
 228, 229, 227, 230, 230, 229, 222, 231, 231, 228, 230, 231, 231, 231, 230, 221,
 227, 227, 228, 226, 228, 227, 229, 227, 228, 224, 227, 225, 221, 221, 226, 223,
 223, 220, 214, 220, 219, 217, 218, 211, 216, 216, 215, 210, 212, 212, 215, 213,
 213, 215, 213, 213, 208, 209, 207, 208, 209, 208, 200, 202, 203, 202, 201, 202
},
{
 197, 230, 231, 232, 233, 232, 232, 231, 229, 232, 233, 230, 233, 232, 234, 231,
 233, 233, 231, 235, 230, 233, 233, 233, 232, 233, 233, 231, 231, 233, 233, 232,
 232, 233, 233, 232, 232, 234, 230, 232, 232, 228, 234, 229, 228, 230, 230, 231,
 230, 231, 230, 230, 229, 231, 229, 229, 229, 228, 230, 224, 230, 229, 229, 230,
 229, 229, 229, 232, 231, 230, 231, 229, 230, 229, 230, 229, 230, 227, 228, 227,
 227, 227, 227, 228, 226, 229, 227, 227, 226, 224, 223, 223, 222, 222, 221, 223,
 223, 220, 217, 216, 222, 215, 217, 216, 217, 213, 216, 216, 214, 213, 211, 211,
 211, 211, 213, 210, 208, 206, 210, 207, 206, 205, 206, 204, 203, 200, 198, 198
},
{
 196, 228, 229, 229, 229, 229, 232, 232, 231, 233, 230, 230, 231, 232, 230, 231,
 233, 230, 231, 234, 231, 230, 225, 232, 233, 230, 232, 230, 233, 233, 233, 230,
 234, 231, 234, 224, 231, 234, 231, 230, 229, 230, 230, 229, 230, 231, 229, 227,
 230, 228, 218, 228, 229, 224, 231, 229, 226, 226, 226, 220, 230, 228, 226, 228,
 226, 228, 219, 226, 228, 227, 228, 227, 232, 226, 229, 229, 229, 225, 226, 228,
 228, 225, 227, 219, 224, 227, 223, 219, 222, 225, 221, 221, 223, 219, 220, 221,
 218, 219, 218, 213, 216, 214, 216, 213, 213, 212, 212, 211, 213, 212, 211, 210,
 208, 212, 210, 207, 207, 206, 203, 204, 203, 203, 198, 201, 199, 198, 194, 197
},
{
 197, 229, 229, 230, 227, 230, 229, 223, 227, 231, 230, 229, 228, 227, 230, 225,
 228, 230, 230, 229, 227, 230, 230, 230, 230, 232, 229, 230, 232, 230, 229, 228,
 230, 231, 231, 233, 230, 228, 230, 228, 226, 226, 223, 228, 227, 230, 228, 227,
 229, 227, 227, 222, 226, 227, 227, 226, 226, 228, 227, 227, 224, 227, 229, 228,
 225, 226, 227, 220, 225, 224, 227, 226, 229, 227, 220, 227, 225, 230, 220, 225,
 225, 222, 226, 225, 226, 224, 222, 223, 222, 223, 215, 222, 221, 220, 218, 217,
 218, 218, 217, 215, 215, 212, 214, 211, 212, 210, 210, 211, 211, 208, 207, 203,
 207, 208, 208, 206, 203, 204, 205, 207, 200, 202, 197, 201, 198, 202, 198, 194
},
{
 196, 230, 228, 221, 228, 229, 227, 226, 229, 228, 221, 231, 229, 229, 229, 221,
 229, 229, 229, 229, 228, 228, 230, 229, 226, 226, 230, 222, 229, 228, 230, 231,
 228, 229, 230, 229, 231, 226, 226, 226, 226, 228, 223, 226, 227, 226, 227, 225,
 227, 226, 225, 227, 225, 227, 220, 226, 227, 227, 226, 220, 223, 226, 225, 225,
 226, 226, 224, 225, 226, 226, 227, 226, 226, 227, 222, 222, 227, 226, 224, 215,
 221, 224, 216, 224, 221, 219, 218, 220, 221, 221, 217, 215, 218, 218, 215, 214,
 214, 216, 216, 214, 212, 213, 212, 209, 213, 211, 210, 211, 208, 207, 205, 205,
 205, 205, 201, 203, 205, 204, 196, 200, 198, 198, 200, 199, 196, 196, 190, 187
},
{
 160, 226, 224, 223, 222, 225, 226, 226, 225, 226, 225, 225, 225, 226, 229, 227,
 225, 227, 228, 228, 227, 224, 227, 225, 227, 225, 226, 224, 229, 226, 228, 225,
 227, 224, 228, 220, 226, 222, 224, 223, 226, 225, 228, 227, 225, 226, 229, 227,
 225, 224, 225, 225, 222, 225, 221, 223, 226, 223, 218, 224, 226, 222, 228, 220,
 225, 227, 220, 226, 224, 226, 224, 219, 227, 223, 218, 226, 222, 222, 216, 222,
 218, 222, 219, 213, 206, 201, 195, 188, 184, 180, 178, 179, 180, 187, 194, 197,
 189, 192, 180, 179, 177, 176, 188, 183, 179, 173, 168, 186, 184, 180, 186, 176,
 178, 172, 166, 171, 169, 170, 170, 163, 166, 167, 162, 162, 162, 165, 161, 161
},
{
 162, 169, 180, 180, 166, 191, 193, 194, 203, 189, 210, 201, 203, 181, 198, 200,
 201, 205, 217, 216, 216, 216, 218, 210, 209, 209, 211, 210, 210, 209, 201, 207,
 205, 209, 206, 201, 205, 210, 208, 205, 205, 205, 201, 207, 204, 207, 204, 205,
 203, 209, 198, 202, 201, 201, 201, 196, 199, 198, 198, 198, 202, 203, 199, 197,
 201, 197, 199, 196, 195, 198, 199, 195, 197, 189, 187, 188, 189, 185, 186, 185,
 180, 181, 170, 176, 173, 173, 174, 171, 168, 171, 166, 168, 169, 169, 169, 165,
 162, 166, 166, 163, 168, 165, 165, 163, 159, 155, 158, 160, 164, 161, 157, 157,
 165, 160, 159, 163, 159, 163, 160, 157, 163, 164, 161, 161, 160, 163, 160, 162
},
{
 160, 163, 161, 163, 162, 167, 163, 164, 164, 166, 168, 171, 175, 169, 175, 172,
 173, 175, 177, 194, 206, 195, 197, 206, 205, 210, 200, 211, 204, 199, 211, 210,
 206, 210, 209, 206, 204, 207, 203, 204, 203, 203, 203, 200, 203, 216, 191, 190,
 187, 185, 186, 185, 177, 180, 184, 184, 188, 184, 181, 184, 180, 179, 176, 179,
 178, 182, 180, 181, 185, 184, 184, 172, 178, 176, 173, 181, 179, 172, 174, 175,
 170, 178, 170, 167, 176, 168, 173, 174, 168, 171, 163, 163, 167, 166, 163, 166,
 165, 164, 162, 164, 166, 158, 153, 155, 154, 159, 153, 155, 155, 153, 154, 151,
 149, 154, 154, 153, 156, 157, 152, 154, 153, 161, 164, 159, 159, 163, 158, 154
},
{
 156, 179, 180, 177, 181, 187, 181, 183, 183, 185, 184, 177, 182, 181, 180, 164,
 167, 169, 174, 172, 172, 173, 174, 174, 178, 177, 180, 195, 199, 201, 197, 193,
 200, 191, 185, 197, 195, 198, 191, 193, 187, 189, 189, 191, 188, 187, 187, 175,
 182, 180, 172, 179, 176, 176, 174, 180, 176, 176, 175, 177, 181, 182, 184, 182,
 180, 178, 175, 172, 173, 175, 174, 170, 170, 171, 173, 172, 168, 166, 170, 169,
 173, 170, 172, 170, 166, 167, 165, 165, 163, 163, 160, 160, 163, 160, 164, 166,
 165, 162, 158, 158, 157, 162, 158, 155, 166, 161, 163, 159, 160, 159, 154, 158,
 159, 160, 157, 159, 157, 153, 154, 151, 151, 158, 156, 162, 156, 157, 153, 153
},
{
 150, 158, 154, 160, 164, 167, 174, 171, 185, 179, 175, 182, 183, 181, 185, 188,
 184, 188, 184, 188, 192, 190, 188, 187, 185, 179, 171, 172, 174, 172, 173, 195,
 212, 208, 206, 190, 189, 186, 185, 172, 181, 180, 178, 179, 178, 178, 168, 179,
 176, 173, 174, 175, 170, 169, 166, 180, 180, 181, 175, 182, 182, 176, 176, 174,
 176, 170, 172, 172, 170, 171, 165, 177, 171, 175, 170, 167, 171, 169, 172, 171,
 168, 171, 171, 172, 175, 180, 179, 180, 178, 182, 178, 180, 183, 189, 182, 169,
 163, 165, 164, 161, 166, 162, 161, 173, 173, 171, 164, 167, 159, 158, 151, 158,
 155, 154, 153, 152, 160, 164, 157, 152, 145, 148, 147, 141, 149, 146, 143, 150
},
{
 146, 164, 159, 159, 166, 159, 157, 156, 158, 157, 141, 158, 149, 148, 147, 136,
 157, 134, 163, 169, 178, 167, 161, 158, 168, 165, 163, 162, 158, 146, 141, 147,
 143, 149, 141, 151, 167, 163, 150, 153, 154, 167, 162, 155, 162, 169, 123, 161,
 163, 159, 160, 159, 157, 157, 160, 160, 157, 157, 156, 157, 156, 158, 158, 160,
 167, 179, 184, 183, 181, 186, 179, 185, 183, 184, 174, 182, 177, 179, 180, 170,
 178, 173, 174, 175, 174, 172, 174, 170, 167, 170, 169, 169, 169, 168, 164, 167,
 170, 166, 158, 157, 164, 164, 159, 163, 159, 158, 161, 160, 162, 162, 163, 160,
 156, 146, 155, 153, 145, 151, 138, 146, 150, 153, 147, 146, 146, 145, 150, 151
},
{
 136, 102, 123, 140, 123, 128, 147, 146, 151, 155, 142, 149, 137, 140, 131, 137,
 134, 138, 140, 132, 131, 130, 130, 141, 142, 136, 139, 140, 138, 140, 146, 140,
 141, 138, 143, 139, 139, 142, 137, 119, 123, 123, 118, 129, 125, 125, 118, 140,
 132, 138, 153, 159, 139, 140, 161, 166, 173, 174, 169, 173, 165, 158, 160, 136,
 155, 155, 138, 151, 148, 144, 172, 171, 177, 165, 166, 166, 162, 161, 160, 162,
 163, 165, 166, 168, 164, 165, 158, 165, 158, 159, 153, 155, 154, 151, 153, 164,
 168, 168, 153, 159, 162, 158, 156, 156, 158, 152, 153, 152, 161, 150, 164, 157,
 146, 158, 123, 124, 132, 136, 138, 145, 146, 146, 144, 131, 140, 141, 142, 131
},
{
 138, 112, 146, 146, 149, 150, 147, 150, 149, 148, 152, 152, 151, 150, 151, 150,
 150, 149, 151, 152, 150, 150, 145, 150, 159, 162, 167, 168, 166, 169, 167, 167,
 170, 165, 159, 167, 164, 165, 158, 163, 160, 161, 161, 153, 163, 159, 162, 152,
 156, 159, 161, 154, 159, 157, 162, 173, 159, 169, 167, 172, 150, 136, 124, 119,
 117, 114, 115, 117, 120, 140, 152, 146, 159, 157, 153, 151, 156, 158, 157, 148,
 152, 148, 154, 153, 152, 154, 155, 151, 150, 149, 161, 152, 158, 155, 150, 146,
 158, 147, 142, 145, 143, 155, 146, 146, 143, 133, 131, 137, 128, 141, 138, 141,
 139, 126, 131, 145, 133, 145, 141, 129, 130, 122, 128, 129, 128, 124, 132, 136
},
{
 120,  83,  72, 135, 148, 145, 151, 147, 144, 148, 143, 150, 149, 145, 148, 154,
 150, 151, 151, 145, 152, 150, 151, 154, 155, 152, 155, 157, 164, 167, 171, 174,
 172, 170, 176, 169, 167, 169, 172, 173, 169, 166, 173, 171, 171, 170, 172, 170,
 173, 173, 172, 173, 173, 175, 170, 172, 123, 119, 119, 129, 123, 111, 127, 142,
 121, 117, 111, 108, 121, 117, 127, 123, 129, 142, 152, 151, 153, 155, 154, 161,
 157, 149, 158, 158, 152, 149, 147, 149, 143, 148, 141, 145, 145, 140, 139, 143,
 139, 138, 134, 135, 135, 137, 144, 135, 155, 152, 147, 151, 149, 143, 151, 146,
 143, 145, 127, 135, 131, 135, 137, 133, 143, 141, 138, 135, 122, 121, 125, 121
},
{
 126,  79,  71, 118, 132, 136, 133, 135, 132, 135, 140, 142, 141, 143, 143, 144,
 141, 152, 149, 149, 153, 152, 157, 147, 157, 151, 153, 155, 151, 158, 147, 162,
 167, 167, 165, 166, 171, 170, 170, 163, 162, 161, 165, 165, 167, 158, 149, 161,
 135, 165, 165, 166, 166, 169, 163, 167, 121, 107, 117, 112, 108, 105, 113, 113,
 116, 120, 110, 129, 113, 114, 106, 130, 118, 120, 117, 114, 114, 145, 145, 156,
 156, 148, 151, 147, 145, 145, 143, 137, 144, 145, 148, 152, 143, 140, 152, 148,
 145, 143, 132, 144, 142, 143, 144, 141, 144, 138, 127, 125, 143, 137, 128, 140,
 126, 137, 139, 130, 130, 137, 139, 131, 137, 143, 141, 143, 120, 129, 131, 149
},
{
 130,  76,  63, 117, 148, 147, 145, 145, 155, 149, 135, 150, 153, 156, 152, 150,
 151, 153, 152, 150, 152, 146, 153, 153, 159, 154, 155, 156, 159, 161, 125, 136,
 138, 156, 154, 156, 157, 156, 151, 153, 127, 138, 137, 131, 140, 113, 122, 135,
 130, 145, 149, 146, 151, 145, 150, 123, 106, 103, 114, 115, 106, 105, 103, 101,
 106, 107,  99, 125, 122, 124, 118, 125, 128, 113, 119, 111, 112, 112, 107, 122,
 139, 140, 141, 139, 137, 133, 129, 132, 134, 140, 139, 139, 135, 128, 138, 127,
 135, 135, 127, 131, 131, 138, 130, 138, 139, 140, 136, 140, 130, 134, 135, 132,
 137, 135, 135, 136, 139, 141, 139, 133, 133, 133, 135, 135, 133, 133, 135, 131
},
{
 125, 121, 111, 124, 132, 117, 131, 101, 128, 134, 138, 121, 115, 130, 103, 119,
 128, 116, 116, 119, 118, 126, 125, 119, 111, 109, 113, 100, 112, 114, 115, 114,
 123, 122, 136, 139, 146, 140, 135, 145, 120, 126, 123, 133, 144, 146, 141, 142,
 127, 149, 152, 141, 140, 137, 126, 124, 101, 104, 128, 137, 107, 128, 132, 130,
 131, 124, 102, 119, 134, 133, 117, 120, 118, 126, 113, 116, 113, 122, 114, 109,
 120, 105, 104, 117, 126, 131, 146, 106, 120, 115, 127, 119, 125, 127, 126, 130,
 125, 134, 126, 125, 124, 124, 133, 134, 134, 127, 131, 126, 126, 128, 139, 125,
 139, 140, 132, 131, 128, 129, 134, 131, 118, 121, 118, 110, 119, 130, 116, 126
},
{
 101,  70,  72,  70, 113,  97, 119, 118, 136, 126, 137, 137, 117, 126, 121, 123,
 128, 131, 116, 126, 142, 149, 149, 145, 147, 148, 145, 148, 145, 146, 139, 145,
 142, 145, 139, 144, 145, 147, 148, 148, 148, 138, 131, 130, 134, 138, 139, 131,
 110, 129, 125, 133, 131, 116, 110, 123, 124, 121, 143, 134, 133, 133, 131, 142,
 140, 145, 130, 128, 135, 133, 125, 127, 126, 126, 127, 141, 149, 128, 130, 139,
 131, 129, 110, 113, 145, 116, 131, 130, 142, 137, 123, 125, 116, 110, 107, 114,
 108, 114, 116, 125, 132, 121, 108, 116, 127, 113, 108, 123, 103, 114, 127, 123,
 112, 136, 120, 111, 108, 102, 104, 113, 104, 113, 120, 115, 120, 114, 107, 133
},
{
 108,  53,  51,  49,  63,  76, 106, 103, 110, 110, 105, 110, 113, 113, 110, 119,
 113, 123, 124, 120, 121, 115, 131, 155, 151, 154, 161, 161, 163, 129, 130, 132,
 150, 155, 158, 159, 155, 155, 129, 120, 113, 107, 113, 113, 106, 109, 118, 109,
 105, 112, 108, 119, 124, 128, 124, 111, 104, 111, 127, 137, 144, 147, 138, 143,
 144, 135, 145, 129, 134, 126, 130, 134, 130, 124, 128, 122, 119, 114, 121, 123,
 134, 128, 125, 136, 147, 110, 111, 117, 134, 114, 109, 121, 132, 114, 124, 120,
 108, 112, 106, 118, 110, 108, 106, 104, 116, 129, 121, 132, 105, 109, 104, 122,
 109, 117, 118, 104, 110, 107, 120, 123, 129, 126, 101, 105, 114, 112, 106, 112
},
{
 131,  48,  41,  49,  56,  64, 101, 107, 118,  97,  92, 100,  95, 104, 105, 106,
 108, 106, 107, 120,  95,  97,  95,  98, 100, 106, 103, 108, 138, 104, 105, 100,
 108, 113, 104, 119, 123, 113, 126, 107, 115, 133, 151, 150, 149, 145, 133, 145,
 137, 137, 123, 121, 102, 109, 109, 100, 111, 106, 114, 106, 114, 124, 121, 133,
 131, 129, 128, 125, 122, 120, 119, 122, 134, 129, 128, 127, 121, 119, 128, 129,
 126, 118, 116, 116, 131, 125, 109, 118, 111, 119, 116, 108, 123, 106, 114, 111,
 126, 118, 132, 126, 136, 136, 116, 120, 122, 114, 127, 114, 119, 152, 155, 131,
 125, 124, 126, 103, 121,  99,  97,  92,  98, 111, 109, 107, 126, 128, 127, 129
},
{
 104,  58,  49,  50, 119,  91,  90, 105, 115, 104, 105,  94,  91, 103,  97, 104,
 102,  98,  97, 126, 138, 142, 138, 147, 143, 143, 146, 140, 139, 137, 141, 143,
 140, 142, 144, 122, 141, 141, 128, 156, 154, 153, 156, 156, 157, 162, 156, 158,
 161, 158, 158, 154, 151, 123, 102, 107,  99, 102,  95,  95, 120, 124, 121, 142,
 130, 105, 124, 121, 112, 126, 123, 124, 124, 124, 119, 121, 116, 126, 117, 120,
 113, 121, 119, 123, 116, 117, 120, 118, 102, 101,  95,  96, 103, 100, 104, 118,
 104, 119, 121, 114, 110, 107,  96,  99, 114, 105,  96,  96, 101, 108,  97, 100,
 102, 112, 115,  95, 113, 119, 114,  96, 105, 105, 108, 116, 110, 128, 120, 103
},
{
  98,  44,  47,  42,  84,  76,  92, 101, 103, 100, 104, 114, 118, 116, 132, 132,
 134, 142, 135, 142, 142, 148, 146, 147, 147, 150, 147, 138, 140, 137, 130, 122,
 138, 107, 122, 125, 140, 124, 129, 150, 148, 145, 143, 151, 151, 147, 156, 154,
 155, 159, 157, 159, 161, 173, 131, 122, 115,  98,  98,  99, 106, 106, 119, 111,
 119, 122, 112, 101, 102, 117, 112, 116, 121, 108, 123, 124, 119, 125, 125, 127,
 120, 111, 113, 124, 108, 115, 125, 101, 120, 101,  95, 110,  92,  95,  97,  97,
 104, 102, 111,  96, 107, 100,  96, 102, 102, 103, 102,  93, 106,  93,  97,  94,
  99, 104, 111, 104,  93,  99, 111,  96,  94,  96,  94,  92, 106, 123, 121, 100
},
{
 108,  60,  61,  63, 116,  93, 126, 129, 127, 134, 135, 122,  87,  99, 103, 127,
 137, 142, 142, 139, 137, 136, 136, 136, 140, 138, 144, 140, 144, 146, 144, 148,
 131, 115, 116, 107, 118, 117, 133, 143, 153, 145, 153, 140, 147, 154, 152, 131,
 116, 107, 101,  99, 147, 125, 129, 121, 110,  96, 106, 103, 103,  98, 102, 104,
 109, 120, 116, 111, 116, 109, 109, 108, 106, 108, 107, 108,  95, 105, 118, 109,
 105, 120, 108, 110, 116, 107, 124, 102, 114, 117,  94, 118, 131, 136, 129, 143,
 143, 142, 147, 143, 136, 124, 115, 109, 110, 109, 106,  98, 108, 101,  93,  94,
  88,  88,  91,  93, 102, 100,  87,  90,  89,  95,  92,  92,  87, 103,  98, 103
},
{
  95,  56,  58,  61, 120,  86,  86, 111, 128, 127, 131, 126,  84,  87,  88,  95,
 106, 137, 134, 135, 133, 132, 140, 129, 138, 136, 142, 141, 139, 137, 143, 132,
 114, 113, 101,  99, 102, 112, 113, 146, 139, 113, 112, 140, 111,  97,  97,  99,
 128, 141, 148, 135, 142, 141, 140, 142, 149, 144, 119,  92, 101, 108, 110, 106,
 120, 114,  97,  97, 101, 118, 111, 103, 100,  98, 102,  99,  96, 111, 111, 115,
 100, 111, 123, 101, 114,  97, 103, 109, 105, 106, 145, 143, 148, 146, 148, 147,
 149, 149, 146, 154, 152, 148, 150, 149, 150, 143, 145, 147, 149, 148, 149, 146,
 157, 160, 163, 164, 160, 143, 121,  85,  87,  93,  96, 112, 106, 102,  99,  93
},
{
 106,  49,  55,  60, 111,  85, 113, 101, 114, 111, 106, 113,  88,  79,  89,  99,
  94,  97,  98, 110, 129, 131, 136, 133, 134, 138, 145, 141, 137, 140, 132,  96,
  96, 112, 140, 101,  99, 125, 131, 120, 118, 139, 136, 138, 141, 140, 143, 141,
 148, 139, 135, 141, 139, 143, 150, 148, 151, 152, 149, 149, 133, 105,  83,  93,
 100, 104,  93, 111, 114, 121, 134, 108, 112,  94,  97,  93,  94, 103, 100, 112,
  95, 102, 113, 133, 118, 109, 127, 116, 144, 143, 141, 126, 145, 155, 138, 127,
 135, 143, 130, 133, 111, 109, 134, 139, 126, 127, 126, 120, 130, 147, 146, 142,
 144, 137, 141, 140, 140, 142, 142, 140, 142, 140, 115, 101, 131, 104, 107, 101
},
{
  90,  52,  57,  59, 117,  78,  96,  91,  93, 100, 116, 100,  92,  77,  69,  88,
  91, 100, 105, 114, 129, 126, 122, 120, 106, 127, 131, 128, 104, 111, 105, 102,
 105,  99, 103, 107,  99, 104, 146, 142, 143, 147, 146, 141, 123, 142, 140, 138,
 141, 142, 136, 145, 148, 154, 153, 154, 162, 166, 166, 168, 164, 159, 160, 157,
 150, 107,  95, 101, 112, 113, 122, 122, 125, 125, 115,  97, 108, 112, 125, 124,
 145, 138, 130, 150, 146, 133, 106, 134, 118, 149, 125, 131, 115, 118,  98, 122,
 133, 107, 119, 124, 119, 129, 124, 118, 100, 119,  97, 128, 138, 137, 131, 128,
 106,  97,  94,  95, 102, 116,  97,  90,  86, 102,  91,  89,  91,  84,  88,  91
},
{
 135,  48,  50,  69, 120,  68,  75,  93,  88, 112,  90,  96,  98,  99,  90,  82,
  99,  92, 115, 121, 129,  94,  86,  88,  89, 106, 125,  95,  97,  99,  82,  92,
  90,  95,  88,  92, 101,  97, 130, 144, 147, 149, 146, 151, 153, 158, 120, 122,
 166, 173, 158, 162, 157, 160, 153, 152, 148, 154, 146, 142, 146, 142, 151, 149,
 153, 144,  97,  96,  94, 105, 101, 103, 102, 106, 137, 113, 106, 120, 109, 116,
  96, 120, 102, 124, 146, 117, 107, 133, 107, 118,  91,  97, 104, 103,  92,  98,
  90, 108, 123, 126, 126, 127, 130, 131, 119, 109, 122, 128, 115, 125, 126, 128,
 128, 115, 137, 111, 100,  97, 118, 122, 103, 109, 134, 132, 136, 133, 122, 136
},
{
 101,  68,  50,  54, 123,  88,  98,  75,  76,  87,  75, 103, 105, 109,  93,  97,
  85, 112, 100,  86, 102,  79,  71,  89,  91,  85,  82, 143, 135, 128, 128, 102,
  81,  81,  95,  96, 104, 100,  97, 130, 136, 142, 131, 135, 139, 141, 134, 105,
 131, 109, 101, 102, 114, 120, 132, 146, 142, 140, 141, 138, 150, 151, 150, 154,
 155, 150, 109, 113, 123, 100,  94, 107, 115, 124, 103, 129,  96, 102, 100,  93,
  91, 109,  93, 121, 111,  86,  89, 131, 107, 144,  89, 104, 103, 105,  83, 107,
  84,  88,  95, 115, 101, 107, 124, 113,  97, 106, 114,  91,  94, 110, 127, 123,
 105, 108, 116, 112, 112, 113,  94,  94, 104, 113,  99,  88,  92,  98, 101,  97
},
{
 103,  47,  65,  43, 102, 101, 164, 162, 159, 156, 158, 157, 159, 160,  86,  89,
 143, 147, 141, 130, 104,  80,  95,  74,  85,  67,  67, 108, 121, 101,  94,  91,
  82,  88,  79,  68,  95, 112, 122, 108, 119, 122, 110,  96,  97, 135,  94, 100,
 109,  93,  85,  78,  91, 100,  99, 143, 109, 122, 138, 121, 134, 122, 150, 150,
 146, 104, 100, 101, 131, 114, 101,  88, 114, 100, 101, 128, 100,  97, 108,  89,
  96,  95, 119, 112,  99,  83,  87, 104, 110, 115, 106,  99,  98, 109,  89, 102,
 106,  84,  93,  99, 124, 125, 117,  91,  93,  95, 122, 139, 110, 147, 114,  91,
 115,  96,  97, 100,  97, 125, 133, 123, 118, 113, 118, 112, 102,  95,  88,  96
},
{
 145,  92,  44,  68, 115, 113, 150, 154, 155, 152, 149, 151, 155, 113,  70,  78,
  96,  71, 107,  87,  81,  89,  93,  67,  82,  86,  88, 139, 127,  97,  98,  95,
 103, 112,  82,  75,  92,  93,  86, 105,  98,  90,  95,  95, 102, 112, 109, 103,
 112, 103, 107, 108, 111, 104, 117, 115, 115, 113, 100, 119, 118,  97, 102, 119,
 103, 101,  95, 101, 126, 147, 143, 103,  93,  91, 114, 116, 124, 102,  98,  97,
  95,  99,  97, 125, 102,  88,  81, 116, 123, 142,  95,  90,  97, 102, 105,  85,
  80,  97,  90,  99,  99,  87,  87,  86, 113, 118, 104, 110, 112, 112, 123,  92,
  83,  91,  85,  87,  90, 105, 124, 129, 126, 122, 147, 145, 145, 142, 145, 145
},
{
 150, 107,  79,  46, 110, 107, 139, 135, 115, 121, 142, 148, 143,  84,  61,  63,
  92,  75,  76,  87,  97,  80,  63,  68,  65,  67,  71, 104, 103,  81,  89,  68,
  71,  81,  83,  98,  86,  86, 113,  92, 102,  97, 100, 100,  94, 100,  95,  80,
  98,  87, 100,  96,  91,  97,  90,  97,  89,  90,  88,  85, 107, 120,  97,  93,
 107,  84,  92, 101,  93,  88,  79,  85,  94,  96, 115, 108, 106, 113, 123, 130,
  84, 109,  99,  93,  92,  92,  78,  93, 102, 115, 102, 108, 100,  85, 108, 122,
 134, 135, 149, 121, 110, 134, 142, 116, 100,  82,  89,  92,  76,  87,  75,  85,
  86,  79,  86,  94,  96, 128,  83,  93,  98, 118, 100, 146, 105,  98, 123, 147
},
{
 156, 119, 119,  99, 106, 103,  77,  69,  73,  69,  78,  83,  96,  79,  89,  84,
  99,  99, 105, 100,  99,  95,  92, 103,  87,  67,  71, 129, 120,  71,  63,  62,
  73,  82,  63,  90,  77,  75,  67,  88,  91,  78,  89,  90,  93,  83,  81,  79,
  87,  89,  73,  87,  78,  87,  93,  86,  74,  93,  76,  88,  84,  93, 104,  84,
  97,  89,  85,  95,  75,  99, 102,  89,  86,  87,  97, 100, 105, 113, 130,  90,
  89, 101,  89,  90,  89, 124, 143,  90, 100, 123, 107, 101, 109, 138, 153, 150,
 152, 129, 143, 107, 106, 103,  97, 103,  79,  87,  83,  83,  85,  83,  76,  86,
  73,  76,  78,  82,  85, 105, 114,  95,  85,  90,  93,  96,  95,  92, 139, 154
},
{
 109, 104, 116,  98, 159, 187, 149, 148, 143, 100, 105,  86,  76,  89,  93,  99,
  87,  97, 102,  97, 104,  81,  81,  74,  87, 102,  63, 135, 133,  83,  84,  69,
  89,  85, 100,  93, 100,  94,  69,  69,  80,  78,  88,  75,  78,  73,  67,  76,
  76,  76,  80,  73,  75,  87,  84,  85,  73,  92,  93,  77,  78,  88,  99,  88,
  88,  79,  75,  73,  70,  80,  80,  92,  85,  82,  99, 152, 123,  90,  73,  80,
 101,  88,  89,  84,  82,  81,  90, 108,  88, 105,  93,  96, 104, 105, 146,  96,
  91,  90, 107, 103,  94,  88,  90,  91,  83,  73,  80,  70,  85,  67,  69,  84,
  68,  67,  69,  74,  82,  83,  84,  91,  80,  85,  77,  84,  97,  94, 113, 151
},
{
  86, 102, 120, 103, 125, 137, 143,  97,  92,  92, 101, 101,  85,  89,  98,  77,
  86, 100, 114, 123, 107,  83,  75,  76,  70,  63,  69,  80, 102, 141, 140, 145,
 149, 141, 139, 139, 140, 137, 138, 136, 133, 131, 106,  81,  73,  70, 102,  83,
  71,  67,  70,  71,  74,  77,  75,  84,  74, 101,  95, 102,  92,  90,  96,  85,
  74,  72,  90,  95,  92,  77,  78,  73,  91,  76, 103, 109, 105, 107, 104, 113,
  96, 107,  91, 105, 143,  90,  77,  92, 131, 123, 125, 105, 110, 121, 114, 102,
  93,  95,  98,  93,  88,  93,  81,  98,  99,  76,  71,  76,  73,  82,  74,  91,
  75,  69,  69,  79,  82,  99,  76,  90, 118,  89,  80,  90,  94,  84,  79,  92
},
{
 126,  78, 122, 102, 125, 109, 154, 127, 110, 139, 124,  92,  92,  92,  91, 101,
 108,  99,  84,  96, 106,  95,  76,  74,  71,  79,  64,  65,  83,  93, 107, 141,
 139, 140, 141, 120,  93, 105,  98, 126, 126, 138, 142, 146, 137, 136, 142, 117,
 109, 130, 143, 145, 103,  70,  67,  75,  84,  84,  87, 153, 116,  93,  98,  95,
  93,  84,  74,  86,  77,  62,  69,  72,  88,  97,  86,  92,  99, 110, 133, 101,
  97, 102, 121, 121, 122, 123, 115, 116, 118, 117,  96,  97,  87, 103, 105, 100,
 101,  84,  85,  77,  88,  88,  86,  91,  87,  73,  69,  77,  81,  78,  76,  86,
  98, 101, 109, 112, 108, 116,  95, 112, 123, 133, 132, 133, 133, 130, 132, 129
},
{
 132,  92,  84, 109, 124, 112, 120, 118, 112, 105,  97,  81, 102, 112, 105,  83,
  82,  89,  78,  89,  78,  81,  69,  74,  82,  83,  70,  72,  71,  88,  92,  97,
 114, 119, 147,  87,  83,  89,  91, 102,  95,  89,  90, 122, 150, 153, 118,  99,
  99, 111, 148, 141, 145, 135, 146, 131, 140, 104,  96, 109,  96,  78,  85,  76,
  78,  76,  69,  85,  73,  72,  67,  80,  86,  83,  79,  83,  87,  89,  95,  95,
 110, 119, 127, 125, 133, 131, 133, 126, 126, 110,  96,  91,  96,  95,  95,  85,
  90,  83,  76,  71,  80,  75,  88,  86,  86,  76,  72,  70,  94, 107, 109, 107,
 114, 119, 119, 118, 128, 130, 129, 121, 131, 127, 125, 135, 132, 132, 140, 138
},
{
 131,  82,  82,  90, 144, 114, 124, 118, 117, 126, 104,  85,  80, 106,  97, 109,
  88, 109,  94,  77,  86, 109,  93,  90,  88, 105,  68,  73,  88,  76,  74,  87,
  86,  85,  91,  67,  75,  72,  71, 104,  83,  48,  50,  53,  73,  78,  86,  92,
 106, 107, 132, 153, 150, 152, 147, 145, 143, 144, 145, 142, 130,  97,  67,  66,
  67,  74,  70,  74,  74,  66,  68,  85,  82,  73,  70,  82,  88,  86,  99, 120,
 126, 117, 133, 133, 137, 130, 115, 100, 102, 104,  91,  82,  82,  74,  89,  98,
  77,  74,  67,  81,  80,  87,  83,  78,  80, 104, 117, 119, 125, 124, 131, 131,
 128, 105, 121, 138, 138, 128, 101,  83,  94, 112, 127, 125, 135, 133, 130, 128
},
{
  84,  88,  81,  93,  93, 119, 136, 116, 107, 128, 119,  96, 103, 106, 119,  94,
  74, 100, 120, 101,  89,  98, 113, 113, 119,  96,  95,  79,  70,  85,  86,  92,
  94,  88,  89, 102, 110,  77,  72,  59,  85,  47,  52,  61,  68,  75,  66,  91,
  93,  80,  91,  88, 136, 139, 140, 141, 140, 147, 143, 146, 105, 103, 130,  79,
  66,  67,  69,  67,  75,  66,  64,  76,  72,  90,  92,  71,  83,  78,  92, 126,
 152, 124, 137, 135, 132, 125, 117, 121, 117, 116, 102,  92,  67,  74,  75,  85,
  80,  70,  75,  70,  79,  81,  77,  91,  88, 123,  82, 107, 126,  84,  74, 109,
 106, 107, 122, 131,  92, 109, 111, 111, 116, 119, 109,  75, 120, 130, 134, 133
},
{
 118,  85,  86,  90, 111,  89, 133, 113, 132, 115, 108, 121, 115,  95,  85,  74,
  77, 112,  95,  93, 116, 123, 103,  96, 111, 107, 104,  88,  90,  84,  71,  78,
 140, 129, 138, 128, 139, 142, 143, 141, 137,  59,  48,  58,  64,  92,  62,  86,
  70,  70,  75,  76,  91,  76,  77, 114,  92, 103,  74,  71,  76,  83,  66,  89,
 112, 115, 137, 106,  77,  66,  66,  97,  99,  96, 103, 100, 108,  82,  86, 130,
 161, 121, 141,  96, 138, 158, 152, 134, 128, 115,  89,  90,  65,  69,  80, 111,
 137, 125, 116, 122, 120, 104,  93,  82,  82,  85,  93,  93, 124, 111,  84,  67,
  93,  87,  78, 102, 104,  89, 113,  94, 106,  86,  80, 120, 117, 113, 118, 118
},
{
  67,  95,  76,  88,  81,  90, 106, 107, 139, 119, 105, 115,  84, 117, 106,  70,
  70, 111,  98, 123,  93,  98, 107, 104, 113, 116,  93, 107,  84,  81,  73,  75,
  99, 152, 153, 150, 138, 135, 139, 136, 133,  57,  44,  49,  69, 143, 152, 153,
 149, 141, 122, 122, 142, 127, 129, 129, 135, 121, 106,  99,  71,  92,  61,  73,
  78,  74,  66,  89,  63,  88,  69,  67,  69,  73,  81,  73,  64, 103,  91,  95,
  82,  70,  98, 120, 145, 156, 162, 164, 163,  87,  82,  89,  70,  76, 115, 111,
 140,  64, 143, 137, 138, 134, 121, 124, 126, 123, 112,  97, 103,  77,  58,  61,
  80,  80,  88,  90, 106, 106, 110,  97,  98, 111, 118, 126, 109,  77, 118,  74
},
{
  48,  99,  83,  92,  83, 123,  84, 134, 144, 130,  96, 124, 109,  80,  74,  78,
  68,  69,  99,  90, 105,  74,  84,  91,  79,  96, 114, 105,  87,  80,  69,  70,
  77, 137, 150, 154, 144, 141, 146, 124, 157,  63,  50,  66, 106, 130, 135, 129,
 140, 140, 142, 144, 143, 148, 151, 147, 144, 140, 137, 142, 140, 134, 134, 129,
 134, 135, 129, 128, 131, 124, 130, 127, 104,  92,  73,  67,  82,  83,  92, 110,
  80,  89,  74,  71,  96, 144, 138, 126, 162, 124,  95,  95,  80,  84,  98,  85,
  73,  88, 122, 128,  89,  85, 100,  97,  79,  77,  83,  95, 109,  96,  81,  77,
  81,  70,  74,  71, 106, 111, 107, 100, 101,  88,  95, 105, 112, 123, 146,  61
},
{
  48,  96,  85,  86,  89,  89,  76,  96, 104, 120, 125, 130, 127,  94,  73,  87,
  83,  82, 100, 110,  98,  58,  85, 109, 116, 104,  94,  93,  78, 120,  64,  77,
 109,  75, 133, 150, 150, 157, 156, 155, 165,  60,  62,  47, 106, 137, 149, 136,
 146, 141, 141, 147, 141, 146, 132, 147, 144, 146, 151, 149, 145, 148, 130,  87,
  97,  97, 108, 125, 133, 124, 124, 121, 128, 127, 125, 121, 132, 127, 132, 128,
 136, 132, 105,  98,  87,  71,  75,  87,  86,  82,  95, 119, 130,  67,  52,  60,
  59,  63, 112,  85,  87,  77,  86,  86,  84,  97, 113,  77,  91,  97, 112,  79,
  99,  99, 103,  97,  83,  81,  65,  59,  81,  74,  73,  82,  85,  96,  74,  48
},
{
  41, 124, 124, 111,  81,  96,  93, 120, 118, 161, 139, 126, 133, 111, 115,  70,
  73, 107, 125,  97,  64,  64,  69,  65,  61,  97,  70, 125,  75,  87,  77,  75,
  87,  80,  92, 143, 148, 157, 165, 158, 159,  57,  68,  76,  93, 160, 152, 159,
 159, 155, 145, 150, 154, 156, 154, 148, 147, 153, 151, 143, 140, 124,  63,  71,
 110,  91,  88,  75, 101, 150, 118, 127, 149, 144, 125, 123, 123, 123, 117, 121,
 115, 115, 124, 129,  92,  69,  78,  66,  72,  74,  91,  91, 128, 102,  58,  71,
  70,  65, 125,  94,  66,  67,  80, 120, 124, 101, 106,  98, 121, 102, 113, 113,
  70,  68,  96,  96,  92,  62,  68,  85,  79,  78,  73,  85,  80,  77, 104,  50
},
{
  63, 107,  98, 115, 113, 111, 117, 142, 186, 170, 103, 115,  99, 130, 127, 132,
  74,  65,  66,  72, 119, 109, 105,  84,  72,  56,  53,  68,  86, 135,  93,  87,
  73,  89,  85, 159, 158, 157, 137, 111, 113, 116, 100,  96, 100, 146, 163, 158,
 155, 151, 146, 123, 145, 149, 152, 154, 152, 148, 150, 150, 146,  86,  74,  95,
 103, 114,  94,  78,  90,  62,  50,  56, 120,  95,  98, 114,  68,  81, 129, 112,
  78, 131, 121, 126,  76,  64,  66,  67,  60,  69,  91, 101,  92,  92,  54,  67,
  77,  72, 123,  96,  61,  62,  77,  87,  90,  88,  75,  97,  96,  92,  94, 102,
  83,  91,  98,  95,  90, 112,  61,  56,  87,  76,  81,  85,  91,  96, 107, 115
},
{
  56,  89,  91,  93, 110, 173, 126, 149, 144, 112, 144, 136, 127, 129, 107, 115,
 114,  77,  76,  70,  64, 103,  88, 117, 110,  68,  70, 116,  94, 109,  82, 119,
  71,  81,  75,  89,  97,  81,  73,  71,  89,  88,  81,  75, 123, 107, 123, 154,
 134, 136, 142, 162, 144, 151, 111, 156, 154, 153, 150, 151, 142, 131, 132, 109,
  90,  98, 116, 142, 137,  59,  56,  53,  61,  61,  60,  53,  46,  53,  47,  49,
  52,  70,  78, 126,  76, 107,  63,  64,  56,  82,  78,  98,  84,  83,  69,  65,
  74,  72, 112,  98,  68,  62,  60,  82,  71,  99,  93,  80, 102,  95,  79, 114,
 119, 115,  76,  59,  59,  81,  93,  70,  72,  85,  62,  93, 119, 104, 113,  97
},
{
  53, 127, 112, 174, 145, 161, 171, 174, 206, 160, 127, 192, 204, 146, 119, 101,
 117, 134,  84,  75,  80,  68, 110,  81,  70, 116,  95,  84,  94, 122,  98, 109,
 102,  66,  84,  84,  94,  81,  76,  68,  77,  75,  72,  87, 114, 134, 112, 146,
 111,  95,  86, 141, 157, 163, 158, 165, 156, 119, 159, 127, 105,  84,  95, 124,
 116,  73,  91,  87, 116,  67,  48,  44,  76,  75,  74,  58,  43,  54,  46,  54,
  51,  50,  57,  64,  60,  60,  63,  65,  59,  65,  94,  89,  81,  74,  68,  81,
  74,  77, 109,  83,  70,  66,  55,  65,  69,  83,  85,  87,  87,  87,  98,  93,
 101, 112,  60,  53,  59,  80,  98,  98,  58,  73,  84,  91,  96,  83,  73,  35
},
{
  95, 194, 178, 125, 172, 118, 171, 110, 119, 144, 144, 193, 136, 180, 126, 140,
 123, 117, 117,  90,  93,  62,  69, 121, 127,  98,  95, 130, 108,  93,  97, 123,
 112,  82,  74,  77,  69,  79,  67,  71,  69,  81,  93,  71,  78, 129, 119,  96,
 139,  99,  80, 135, 146, 158, 152, 175, 183, 168, 161, 123,  69,  71,  65, 108,
  63,  67,  69,  96, 106,  68,  62,  55,  72,  66,  79,  53,  41,  52,  44,  47,
  47,  47,  54,  52,  60,  60,  66,  81,  60,  66,  68,  74,  99,  76,  70,  53,
  48,  81, 102,  83,  53,  55,  51,  60,  63,  66,  55,  63,  88,  73,  98,  80,
  85,  81,  86,  51,  91,  80,  81,  77,  81,  65,  63,  95,  77,  79,  59,  43
},
{
  95, 164, 158, 109, 105, 100, 120, 135, 148, 132,  91, 167, 166, 168, 175, 133,
 126, 110, 112, 106, 106, 114,  72, 116, 107, 117,  95,  87, 103, 110,  64,  71,
 134, 122,  87,  80,  76,  63,  74,  71,  79,  95,  74,  68,  78,  87, 124, 104,
 114,  78,  67,  75, 159, 167, 163, 162, 164, 168, 167,  73,  84,  60,  67,  59,
  93,  85,  76,  84, 117,  64,  52,  46,  79,  72,  87,  48,  42,  45,  47,  42,
  49,  47,  60,  64,  55,  64,  64,  67,  75, 101,  68,  74,  70,  79,  76,  63,
  66,  93,  90,  73,  51,  55, 124,  55,  65,  64,  81,  63,  77,  86,  76,  62,
  59,  59,  68,  70,  85,  81,  78,  87,  90,  83,  85,  57,  57,  65,  56,  48
},
{
  70, 128, 189, 140, 137, 134, 107, 117, 121, 120, 179, 168, 195, 217, 113, 132,
 121, 124, 119, 119, 134,  86, 105, 101,  83,  62,  55,  75,  65,  74, 103, 123,
 114, 104, 116,  71,  83,  88,  75,  72,  66,  70,  87,  77,  79, 104, 126, 109,
 115, 128,  72,  66,  79, 165, 172, 182, 168, 167, 167, 159,  74,  79,  67,  68,
  98,  85,  80, 112,  89,  69,  55,  46,  77,  69,  97,  49,  46,  39,  44,  41,
  51,  41,  49,  51,  57,  78,  94,  90,  96,  83,  74,  69,  77,  80,  69,  74,
  58,  70, 106,  77,  63,  62,  84, 146, 113,  88,  52,  61,  74,  53,  77,  66,
  67,  52,  76,  92,  68,  58,  64, 104,  53,  55,  48,  46,  42,  51,  47,  47
},
{
  40, 219, 200, 102, 146, 166, 171,  99, 168, 187, 138, 167, 148, 103,  97, 105,
 103, 142, 132, 124, 123, 107, 120, 122, 123,  70,  61,  66,  62,  72, 125, 101,
  91,  81, 122, 117,  75,  90,  79,  75,  73,  81,  91,  67,  74,  78,  92, 118,
 140, 130,  92,  79,  68, 166, 150, 135, 158, 160, 154,  93,  99,  67,  57,  52,
  64,  62, 118, 125,  73,  66,  44,  44,  71,  76,  91,  46,  45,  39,  52,  49,
  96,  96,  77,  80,  75,  78,  79,  72,  72,  69,  73,  69,  54,  65,  68,  66,
  83, 123, 117, 149, 155, 157, 159, 162, 156, 159, 148, 150, 143,  91, 130, 107,
  89,  65,  55,  49,  57,  69,  61,  72,  53,  59,  47,  56,  41,  64,  86,  49
},
{
  42, 117, 165, 178, 120,  96, 116, 178, 188, 160, 214, 125, 107, 135, 135, 108,
  92,  96, 105, 100, 120, 123, 122,  75,  73,  84,  69,  55,  88, 103,  89, 111,
 112,  91, 103, 113, 104,  83,  75,  80,  76,  86, 118, 125, 117, 129, 130, 118,
 138, 135, 124,  86,  79,  87, 143, 149, 160, 153, 158, 154, 149,  71,  47,  47,
  56,  53,  66,  83,  85,  71,  68,  59,  79,  77,  79,  85,  92, 105,  92,  84,
  73,  93,  78,  78,  62,  60,  68,  68,  53,  53,  53,  55,  47,  64,  52,  70,
  68,  89, 120, 161, 167, 163, 162, 161, 158, 156, 150, 156,  79,  87, 136, 154,
  74,  47, 108,  61,  69,  59,  48,  57,  44,  56,  75,  41,  56,  68,  71,  52
},
{
  36, 139, 113, 126, 141, 135, 149, 155, 211, 174, 128, 116, 107,  99, 161, 135,
  86,  76, 123, 126, 120, 118, 123, 112,  64,  63,  71,  78,  72,  87, 112, 117,
  96,  70, 122, 102, 123,  85,  86,  98, 109, 120, 111, 130, 131, 107, 126, 125,
 128, 131, 121, 130,  85,  78, 129, 137, 131, 140, 136, 139, 121,  60,  36,  47,
  52,  55,  51,  79,  83,  78,  53,  44,  89,  75,  98,  78,  63,  78,  85,  89,
  85,  70,  60,  59,  62,  64,  58,  59,  66,  62,  57,  58,  57,  49,  51,  58,
  58,  57,  85, 160, 159, 163, 157, 137, 149, 111, 105,  97,  85,  83, 109, 142,
  57,  74,  70,  69,  39,  46,  34,  41,  33,  41,  50,  56,  57,  46,  56,  52
},
{
  67,  90, 125, 109, 100, 116, 169, 148, 103, 169, 131, 146, 117, 108,  88,  68,
 121, 122, 125, 124, 124, 108, 120, 125,  59,  54,  65,  57,  66,  69, 128,  79,
 119,  65,  69, 104, 121, 113,  81,  80, 103, 118, 108, 102, 138, 123, 134, 123,
 127, 137, 118, 145, 127,  97,  71, 113, 101, 130, 115, 119,  62,  48,  68,  58,
  42,  55,  55,  48,  48,  57,  66,  50,  87,  71,  76, 126,  76,  71,  74,  86,
 102,  99,  65,  90,  64,  59,  58,  62,  57,  63,  58,  54,  55,  44,  47,  53,
  55,  54,  62, 117, 112, 126, 115, 121,  94,  65,  65,  87,  72,  77,  79, 109,
  66, 110, 114,  75,  41,  41,  35,  31,  39,  37,  47,  39,  32,  33,  36, 108
},
{
  42,  53, 159, 103,  93,  95, 100,  97, 151, 151, 170, 147, 126,  81,  74, 107,
 129, 118, 118, 103, 100, 113, 119,  85,  72,  62,  55,  57,  71,  70,  71, 107,
 119,  89,  70, 111,  71,  63,  64,  79,  86,  76, 136, 105, 135, 137, 113, 142,
 119, 135, 128, 135, 130, 112, 114,  87,  88,  97, 103,  56,  53,  61,  42,  47,
  49,  63,  45,  48,  40,  51,  46,  65,  82,  77,  68, 103, 118,  70,  69, 123,
 131, 147, 147, 144, 134,  75,  64,  64,  62,  57,  57,  67,  65,  56,  48,  48,
  52,  60,  55,  84, 115, 120, 121,  59,  83,  65,  66,  55,  61,  74,  70,  73,
  73,  62, 110,  56,  34,  45,  34,  30,  31,  29,  46,  48,  31,  28,  22,  94
},
{
  47,  70,  62, 176,  86, 102, 153, 135, 131, 131, 132, 159,  73,  77, 125, 117,
 117, 117, 127, 125, 119, 121, 120,  83,  68,  60,  88,  71,  72,  67,  71, 122,
  73, 107,  68,  59, 130, 103,  69, 100,  76,  92,  89, 120, 106, 133, 125, 124,
 126, 129, 145, 114, 150, 112, 109, 104, 112,  98,  59,  72,  50,  53,  46,  46,
  49,  48,  51,  52,  69,  63,  45,  65, 110,  86,  82, 125, 150, 133, 140, 133,
 140, 152, 130, 138, 127,  67,  60,  58,  60,  56,  56,  60,  69,  59,  52,  48,
  50,  42,  50,  46,  89,  76,  89,  72,  60,  70,  60,  57,  70,  59,  69,  69,
  82,  65,  71,  56,  40,  30,  39,  26,  33,  31,  40,  34,  42,  38,  53,  42
},
{
  40,  88, 107, 126, 130, 191, 193, 173, 162, 139, 103,  73,  91,  89, 150, 108,
 116, 128, 128, 122, 115, 110,  94,  79,  79,  65,  69,  66,  71,  78,  76,  99,
  72,  66,  68,  66,  66, 105, 129,  67,  93,  87,  77, 129, 106, 125, 134, 121,
 136, 115, 146, 120, 133, 116, 127,  79,  83,  78,  70,  48,  45,  59,  72,  48,
  49,  57,  49,  58,  87,  72,  53,  54,  84,  76, 111, 118, 148, 135, 142, 146,
 143, 138, 123,  73,  66,  62,  68,  55,  66,  59,  56,  69,  63,  62,  58,  51,
  54,  54,  50,  54,  69,  83,  68,  61,  54,  57,  60,  58,  49,  59,  57,  60,
  82,  70,  43,  42,  38,  32,  31,  31,  29,  34,  28,  38,  47,  35,  27,  34
},
{
  32,  88,  82,  79, 126, 166, 198, 178, 175, 103,  87, 114, 114, 127, 113, 121,
 128, 118, 104, 118, 117, 111,  68,  50,  74,  71,  70,  63,  73,  68,  53,  66,
  62,  79,  71,  68,  92,  76,  89, 111,  75,  86,  84,  80, 116, 110, 132, 108,
 133, 123, 136, 139, 107, 141, 118, 129, 111,  80,  45,  42,  52,  52,  63,  58,
  84,  60,  72,  63,  74,  58,  49,  46,  59, 123,  99, 121, 136, 122, 122, 143,
 132, 145, 133,  78,  60,  64,  69,  57,  62,  62,  60,  59,  65,  63,  65,  49,
  58,  54,  53,  47,  46,  66,  51,  52,  52,  49,  53,  50,  62,  56,  66,  61,
  70,  79,  45,  30,  32,  28,  32,  24,  33,  26,  32,  50,  40,  42,  39,  23
},
{
  49,  92,  81,  85,  87,  93, 104, 128,  94,  82, 109, 118, 137, 139, 125, 122,
 102, 113, 122, 123, 125, 106,  65,  55,  69,  75,  56,  71,  81,  90,  71,  63,
  55,  66,  73,  90,  65,  70, 116,  93,  87, 109,  81, 117,  88, 110, 137, 125,
 120, 133, 112, 144, 113, 143, 114, 140,  83,  92,  50,  60,  69,  76,  56,  79,
  48,  71,  59,  73,  60,  58,  61,  49, 120,  92, 117,  95, 105, 117, 128, 105,
  76, 133, 126, 141,  63,  61,  57,  62,  67,  58,  61,  56,  62,  70,  67,  48,
  55,  53,  62,  49,  58,  57,  89,  59,  64,  46,  58,  64,  64,  49,  52,  55,
  64,  65,  45,  35,  28,  32,  31,  28,  29,  31,  44,  51,  37,  35,  35,  39
},
{
  60,  74,  85,  87,  85,  83, 106, 100, 107,  50, 121, 128, 137, 147, 117, 122,
 125, 124, 107, 110,  92,  62,  73,  56,  62,  60,  85,  69,  85, 113,  72,  87,
 105,  71,  58,  72,  85, 102, 132,  96, 133, 102, 110,  95, 119, 118, 111, 140,
 121, 115, 133, 133, 113, 140, 125, 137, 140,  79, 106,  67,  77,  65,  57,  80,
  51,  69,  50,  57,  69,  59,  51,  42,  80, 110, 127, 116, 106, 113, 122, 131,
  60,  80, 120, 134,  80,  60,  61,  62,  60,  57,  56,  57,  48,  63,  63,  63,
  57,  54,  53,  57,  55,  54,  50,  54,  52,  48,  51,  50,  50,  52,  66,  56,
 110, 138, 171,  79,  32,  28,  27,  31,  34,  42,  38,  29,  41,  31,  30,  38
},
{
  66,  76,  74,  70,  93, 100, 110, 121,  49,  52, 142, 159, 148, 160, 134, 132,
 124, 111, 109, 104,  78, 131,  79,  96,  65,  57,  68,  62,  56,  68,  71,  69,
  76,  80,  72,  84,  86,  75,  92, 116, 107, 115, 116,  92,  70,  75, 124, 123,
 136, 116, 141, 115, 131, 115, 142, 107, 143, 116,  87, 102,  65,  83,  67,  57,
  58,  70,  62,  58,  80,  72,  73, 103,  65, 105,  97,  98, 101,  64, 123, 125,
  73, 108,  88, 130, 138,  72,  62,  69,  60,  73,  61,  60,  58,  57,  53,  63,
  60,  58,  57,  54,  46,  56,  48,  54,  55,  49,  51,  58,  47,  63,  47,  64,
  49,  40,  49,  56,  47,  25,  35,  23,  30,  47,  44,  61,  38,  39,  41,  79
},
{
  27,  76,  79,  83, 101,  83,  66,  83,  64,  64, 156, 156, 150, 149, 148, 127,
 134, 135, 125, 102,  69, 125,  98, 111,  71, 100,  75,  64,  74,  66,  57,  73,
  67,  72,  93,  70,  70,  74,  96, 111, 101, 107,  71,  47,  68, 107, 129, 107,
 136, 131, 116, 138, 125, 117, 115, 139, 113, 135, 112, 106, 115,  88,  82,  47,
  54,  52,  69,  83,  78,  58,  97,  95,  46, 119,  97, 116, 125,  67,  80, 124,
  97,  98,  97, 118, 147,  89,  86,  59,  61,  63,  61,  65,  58,  55,  48,  52,
  49,  56,  54,  53,  56,  48,  60,  48,  84,  48,  58,  44,  43,  58,  51,  48,
  51,  52,  53,  78,  70,  29,  32,  43,  46,  41,  38,  34,  46,  36,  43,  41
},
{
  36,  80, 101,  94,  79,  84,  44, 123,  54,  62, 158, 146, 162, 156, 152, 147,
 157, 137, 104, 110,  66, 120, 112, 105,  57,  80,  90,  96,  96,  78,  70, 101,
  75,  79,  68,  85,  61,  71,  75,  54,  47,  97,  63,  75,  69, 122, 117, 133,
 118, 133, 116, 142, 116, 133, 117, 120, 121, 128, 117, 139,  93,  96,  74,  60,
  53,  78,  55,  76,  93, 112,  65,  41,  39,  40,  42,  56,  53,  56,  51,  64,
  56,  90,  95, 105, 122,  81,  83,  71,  55,  64,  59,  57,  53,  50,  57,  53,
  66,  65,  49,  49,  57,  54,  51,  65,  48,  57,  35,  46,  45,  43,  52,  57,
  65,  57,  61,  92,  67,  55,  50,  38,  49,  43,  32,  35,  30,  45,  36,  53
},
{
  34,  94,  90,  85,  98, 119,  85, 146,  64,  61, 143, 168, 163, 144,  67, 111,
 115, 139, 101, 129,  80, 130,  81,  81,  73,  67,  63,  78,  64,  88,  91,  63,
  66,  57,  70,  50,  59,  50,  87,  56,  71,  83, 101, 105,  75,  84, 108,  88,
 122, 130, 127, 122, 142, 111, 126, 113, 133, 127, 133, 116, 133, 108,  98,  77,
  94, 106,  93,  75,  65,  74,  63,  45,  38,  51,  45,  42,  44,  46,  55,  65,
  63,  77,  74, 102,  70, 128,  59,  64,  62,  54,  63,  58,  59,  60,  50,  53,
  51,  49,  50,  52,  59,  69,  46,  49,  44,  64,  44,  31,  56,  42,  49,  34,
  60,  69,  68,  83,  81,  59,  54,  37,  35,  36,  36,  36,  31,  36,  40,  56
},
{
  32, 107,  91,  83,  89, 134, 100, 143,  67,  66, 147, 167, 151, 149, 105,  79,
  96,  82, 132, 135,  64, 120,  47,  89,  78,  73,  95,  66,  59,  77,  67,  74,
  75,  44,  41,  47,  88,  59,  64,  54, 128,  78, 123, 121,  82,  74, 112, 116,
 133, 102, 130, 116, 130, 108, 124, 118, 132, 120, 137, 116, 144, 117,  77, 130,
  58,  68,  70,  64,  71,  68,  60,  70,  51,  38,  44,  39,  41,  47,  57,  62,
  72,  71,  63,  66,  90,  89,  77,  55,  51,  47,  50,  66,  69,  57,  56,  53,
  48,  55,  54,  54,  53,  51,  54,  39,  57,  59,  86,  38,  50,  55,  38,  47,
  42,  52,  44,  73,  50,  65,  35,  55,  39,  37,  31,  29,  31,  32,  77,  66
},
{
  38,  97,  98, 115, 136, 141, 119, 140,  69,  67, 163, 171, 170, 172, 112, 117,
  80,  88, 150, 137,  69, 195,  73,  70,  54,  83,  65,  60,  81,  65,  48,  46,
  60,  65,  48,  44,  40,  87,  67, 132, 100,  64, 136, 110, 105,  76,  69,  95,
 134, 125, 118, 131, 107, 124, 112, 134, 125, 120, 115, 120, 126, 129, 114, 103,
 108,  75,  71,  82,  71,  66,  72,  69,  67,  54,  39,  48,  45,  51,  42,  47,
  61,  63,  64,  85,  73,  87, 123,  63,  63,  48,  59,  58,  55,  62,  49,  60,
  54,  46,  51,  62,  50,  53,  40,  46,  52,  51,  55,  82,  79,  64,  60,  56,
  49,  64,  42,  64,  51,  62,  56,  61,  64,  31,  21,  33,  69,  89,  96,  55
},
{
  36, 100,  69, 136, 143, 135, 122, 133,  77,  62, 162, 165, 165, 164,  65,  51,
 118,  87, 142, 141,  88, 188,  66,  94,  66,  79,  50,  43,  47,  67,  43,  46,
  56,  70,  70,  67,  85, 104,  76, 160, 156,  66, 136, 111, 109,  53,  77,  76,
 111, 139, 108, 143, 126, 127, 110, 119, 116, 139, 108, 130, 118, 136, 116, 115,
 126,  94,  72,  67,  71,  70,  71,  86,  73,  60,  48,  44,  42,  46,  41,  71,
  61,  54,  67,  73,  57,  72,  56,  61,  48,  52,  57,  55,  64,  60,  65,  59,
  48,  54,  44,  49,  50,  52,  60,  53,  51,  58,  47,  72,  71,  66, 112,  56,
  54,  49,  72,  91,  63,  40,  46,  58,  59,  63,  41,  67,  68,  70,  57,  65
},
{
  34,  47,  67, 117, 141, 151, 115, 141,  73,  68, 145, 168, 156, 168,  77,  52,
 109,  79, 139, 140,  54, 113,  48,  51,  42,  55,  59,  45,  59,  56,  71,  79,
  93,  99,  93,  84, 110, 113,  84, 145,  86,  90, 137, 111, 109,  71,  66,  62,
  68, 129, 132, 109, 128, 110, 130, 120, 130, 126, 123, 118, 128, 140, 120, 144,
  96,  96,  93,  66,  89,  88,  63,  70, 118,  71,  75,  41,  40,  37,  42,  47,
  72,  56,  65,  67,  56,  57,  50,  50,  53,  53,  55,  54,  58,  62,  61,  58,
  59,  49,  48,  44,  53,  62,  44,  46,  59,  57,  50,  63,  87,  83, 102,  72,
  59,  61,  63,  91,  70,  37,  46,  88, 101,  81,  56,  58,  52,  57,  41,  69
},
{
  51,  41,  54,  98, 136, 160, 130, 137,  97,  61, 154, 164, 169, 164,  90,  53,
 114,  90, 137, 155,  58, 129,  55,  55,  52,  61,  55,  58,  85,  65, 110, 111,
 113, 123, 108,  55, 124, 127, 117, 177, 106,  79, 122, 108, 135,  60,  74,  84,
  94,  64, 104, 114, 133, 110, 115, 113, 119, 113, 127, 119, 138, 116, 128, 116,
 108,  59,  52,  69,  67,  69,  69,  73,  67,  67,  73,  62,  41,  43,  42,  43,
  50,  59,  59,  64,  70,  62,  48,  47,  59,  49,  52,  52,  57,  54,  59,  59,
  57,  44,  48,  52,  47,  46,  50,  45,  57,  46,  49,  54,  63,  58,  50,  42,
  62,  75,  65,  66,  69,  54,  50, 102,  89,  64,  61,  71,  69,  68,  41,  52
},
{
  63,  57,  56,  59,  97, 151, 151, 143,  70,  61, 142, 169, 168, 169,  91,  55,
 120,  73, 143, 208,  72, 129,  55,  86,  64, 112, 101,  99, 116, 115, 128, 127,
 154, 144, 125,  47, 141, 121, 122, 130,  90,  91, 117, 122, 117,  58,  68,  73,
  77,  72,  86,  84, 101, 126, 104, 123, 108, 117, 115, 118, 122,  86,  56,  68,
  92, 130,  69,  86,  70, 104,  74,  77,  79,  75,  72,  54,  65,  47,  42,  47,
  44,  48,  57,  66,  66,  56,  63,  50,  51,  54,  50,  47,  48,  46,  48,  59,
  52,  63,  55,  62,  57,  41,  56,  53,  56,  52,  46,  51,  58,  79,  53,  44,
  57,  59,  64,  66,  66,  61,  78,  85,  60,  61,  54,  55,  64,  44,  37,  66
},
{
  62,  47,  63,  59, 100, 164, 118, 142,  95, 151, 159, 171, 162, 157,  83,  56,
 117, 182, 142, 152,  53, 117, 108, 113,  88, 100, 115, 130, 127, 148, 130, 137,
 127, 134, 130,  42, 134, 131, 170, 170,  90,  99, 129, 105, 114,  76,  69,  89,
  80,  70,  61,  82,  84, 126, 105, 139, 106, 105,  74,  56,  62,  72, 134, 157,
 180, 176,  88,  76,  82,  88,  78,  83,  76,  82, 106,  81,  72,  51,  40,  47,
  47,  49,  54,  61,  68,  54,  49,  50,  44,  56,  53,  48,  44,  57,  53,  58,
  63,  65,  52,  54,  57,  50,  50,  51,  55,  57,  46,  45,  58,  55,  68,  51,
  67,  62,  63,  63,  67,  70,  97,  46,  81,  68,  63,  52,  43,  42,  37,  54
},
{
  65,  73,  69, 151, 155, 151, 136, 131, 151, 150, 136, 171, 148, 159,  93,  56,
 120,  90, 144, 123,  52, 127, 124, 132, 139, 154, 114, 130, 128, 134, 129, 132,
 139, 140, 134,  59, 128, 128, 120,  99, 163, 128, 127, 119, 132,  70,  78,  86,
  83,  74,  61,  82,  60,  67,  90,  66,  58,  61,  63,  72,  90, 113, 172, 195,
 205, 200,  91,  80,  74,  98,  85,  72,  72,  77,  72,  62,  81,  71,  48,  43,
  58,  49,  52,  60,  70,  78,  57,  49,  47,  56,  49,  44,  53,  46,  59,  51,
  54,  62,  47,  49,  48,  42,  48,  47,  46,  54,  66,  45,  43,  57,  79,  54,
  61,  65,  62,  60,  56,  70,  64,  59,  71,  73,  67,  48,  61,  42,  59,  60
},
{
  36,  56,  79, 151, 169, 155, 136, 106, 135, 162, 173, 155, 162, 153,  89,  51,
 108, 122, 138, 126,  53, 128, 132, 134, 106, 118, 123, 175, 130, 134, 127, 153,
 136, 155, 132,  75, 121, 130, 190, 135,  81,  98, 115, 132, 126,  90, 103,  76,
  91,  74,  78,  72,  54,  68,  62,  74, 105,  80,  74,  70,  95, 151, 205, 207,
 187, 204,  90,  97,  87, 104,  71,  84,  81,  73,  88, 114,  68,  82,  73,  51,
  52,  51,  60,  54,  60,  65,  63,  50,  51,  51,  53,  49,  62,  50,  75,  48,
  50,  46,  55,  48,  62,  64,  51,  50,  43,  55,  43,  47,  53,  45,  73,  75,
  56,  55,  54,  64,  68,  58,  41,  80,  84,  90,  82,  80,  78,  47,  43,  68
},
{
  46,  59,  82, 159, 153, 162, 142, 126, 161, 170, 169, 175, 159, 169,  99,  60,
 118, 153, 120, 114,  53, 107, 137, 138, 153, 157, 106, 124, 131, 130, 141, 147,
 142, 141, 134, 102, 121, 126,  85, 117, 133, 125, 127, 138, 115, 120,  74,  80,
  72,  60,  69,  65,  68, 114, 111, 133, 140, 118, 112, 119,  99, 122, 197, 209,
 199, 198,  94,  93,  96,  85,  73,  79,  85,  69,  70,  95,  75,  90,  81, 103,
  61,  50,  58,  58,  55,  67,  72,  58,  51,  52,  48,  50,  43,  44,  49,  50,
  49,  41,  43,  49,  47,  47,  47,  55,  54,  45,  48,  51,  42,  39,  48,  83,
  67,  64,  51,  57,  58,  67,  90,  83,  81,  84,  87,  88,  79,  82,  82,  36
},
{
  64,  76, 136, 155, 166, 171, 120, 132, 164, 174, 167, 174, 162, 181, 195,  61,
 114, 127, 123, 107,  47, 126, 144, 130, 120, 132, 102, 192, 139, 123, 140, 149,
 117, 128, 129,  95, 125, 122, 127, 131, 129, 123, 123, 137, 128,  61,  63,  76,
  74, 112,  97,  70,  73, 155, 154, 166, 163, 122,  82,  86, 153, 130, 193, 202,
 209, 205,  99,  76,  82, 108,  83,  86,  81,  72,  87,  87,  84, 122,  75,  89,
  86,  72,  54,  47,  56,  55,  76,  75,  52,  50,  46,  48,  43,  49,  48,  44,
  36,  34,  42,  50,  47,  50,  48,  47,  56,  49,  47,  54,  56,  37,  47,  65,
  98, 103,  79,  73,  73,  96,  73,  80,  82,  85,  86,  82,  95,  90,  32,  22
},
{
  65,  99, 144, 166, 134, 160, 141, 126, 164, 156, 174, 167, 177, 202, 178, 135,
 125, 121, 110, 127,  47, 113, 142, 145, 156, 152,  83, 128, 131, 132, 137, 150,
 137, 120, 121, 105, 115, 107, 130, 109, 123, 126, 109, 121, 121,  58, 104, 141,
 165, 182,  82,  97,  99, 187, 185, 177, 198, 127,  81,  85, 101, 157, 206, 211,
 205, 197,  94,  91,  95,  77,  83,  78,  85,  84,  93,  72,  99,  78,  93, 114,
  76,  83,  55,  57,  59,  56,  73,  71,  59,  55,  52,  44,  44,  55,  48,  74,
  34,  37,  40,  46,  46,  56,  47,  41,  46,  42,  43,  44,  49,  43,  34,  65,
  78,  92,  75,  75,  86,  84,  71,  75,  73,  77,  78,  81,  68,  29,  28,  33
},
{
  48,  74,  94, 166, 175, 170, 117, 125, 154, 152, 163, 174, 202, 194, 169, 143,
 125, 127, 117, 120,  50, 108, 134, 137, 136, 130, 109, 182, 124, 131, 123, 137,
 125, 125, 124,  87, 118, 114, 114, 123, 115, 124, 124, 127, 125,  92, 173, 191,
 194, 205, 106, 104,  81, 200, 194, 195, 196, 142,  84, 123, 111, 139, 205, 211,
 203, 186, 100,  90,  96,  88,  90,  97,  76,  84,  84,  86,  84,  81,  73,  75,
  97,  76,  54,  54,  50,  67,  57,  71,  73,  60,  54,  67,  45,  52,  51,  98,
  59,  37,  37,  42,  57,  49,  44,  44,  36,  40,  44,  40,  42,  39,  51,  77,
  93,  77,  84,  54,  82,  83,  61,  77,  71,  78,  69,  69,  74,  41,  22,  31
},
{
  49,  83, 159, 157, 164, 160, 106, 112, 145, 145, 157, 197, 190, 150, 137, 129,
 122, 122, 105, 127,  51, 112, 141, 140, 153, 155,  92, 100, 131, 133, 127, 108,
 127, 130, 113,  95, 114, 110, 104, 125, 116, 119, 133, 131, 110,  96, 193, 198,
 203, 198,  99, 141,  95, 205, 198, 202, 205, 131,  81,  79, 110, 152, 199, 201,
 210, 197,  91,  91, 104,  84,  72,  93,  77,  90,  92, 129, 101, 113,  81,  77,
  76,  88,  92,  63,  56,  55,  57,  65,  82,  56,  58,  50,  54,  54,  63, 120,
  73,  39,  42,  47,  46,  45,  50,  47,  41,  42,  38,  44,  50,  53,  63,  79,
  82,  83,  65,  73,  73,  71,  64,  76,  69,  69,  54,  71,  67,  50,  24,  29
},
{
  54, 139,  99, 158, 156, 165,  96, 110, 161, 141, 169, 198, 179, 161, 152, 136,
 124, 120, 114, 121,  51, 108, 127, 132,  74, 119, 133, 128, 133, 134, 104, 120,
 123, 132, 104,  81, 102, 110, 111, 121, 112, 109, 122, 125, 110, 111, 194, 195,
 182, 206,  99, 109, 112, 207, 194, 196, 210, 159, 150, 144, 131, 133, 186, 197,
 207, 197,  93,  78,  82,  82,  91,  87,  81,  86,  76,  83,  91,  92,  92,  85,
  78,  80,  75,  72,  57,  58,  55,  57,  61,  68,  64,  50,  95,  55,  78,  79,
  88,  44,  39,  38,  51,  47,  42,  44,  51,  49,  70,  45,  89,  60,  78,  92,
  77,  90,  80,  68,  71,  69,  57,  75,  73,  74,  63,  81,  68,  65,  23,  33
},
{
  38, 125, 100, 112, 160, 169, 129,  99, 150, 180, 174, 205, 171, 162, 159, 119,
 113, 116, 118, 122,  55,  92, 135, 128, 122, 130, 134, 123, 126, 123,  92, 120,
 117, 124, 118,  86,  74, 115, 107, 129, 125, 118, 122, 126, 122, 105, 189, 204,
 204, 206, 141, 114, 103, 195, 198, 206, 200, 117, 149, 173, 183, 206, 196, 194,
 204, 196, 109,  76,  93,  84,  93,  73,  82,  76,  89,  77,  93,  85, 125,  69,
  73, 142,  67,  51,  49,  44,  51,  48,  56,  58,  54,  58,  71,  62, 170, 150,
 119,  65,  67,  52,  64,  52,  52,  72,  67,  76,  72,  45, 103,  93,  40,  73,
  85,  72,  68,  62,  73,  61,  57,  72,  74,  79,  69,  70,  65,  58,  29,  27
},
{
  29,  64,  98, 155, 160, 166, 117, 104, 163, 164, 183, 185, 175, 168, 154, 117,
 124, 119, 107, 109,  45, 121, 128, 135, 138, 138, 132, 126, 131, 125,  84, 121,
 122, 137, 106,  76,  73, 118, 108, 121, 119, 124, 128, 106,  95,  97, 187, 191,
 204, 209, 110, 118, 150, 160, 211, 212, 213, 203, 196, 189, 199, 208, 193, 195,
 204, 195,  98,  71,  87,  88,  76,  91,  87,  91,  71,  69,  92,  70, 131,  98,
 125,  73,  76,  62,  75,  39,  40,  46,  52,  56,  51,  61, 102, 170, 174, 145,
 126,  74,  88,  78,  84,  75,  72,  70,  78, 105,  98,  67, 112,  82, 115,  45,
  66,  63,  74,  70,  70,  72,  64,  66,  74,  80,  72,  75,  50,  56,  24,  45
},
{
  28,  68, 104, 171, 162, 163,  88,  98, 149, 182, 181, 154, 167, 138, 153, 120,
 113, 112, 127, 102,  51, 108, 131, 132, 130, 130, 118, 117, 134, 121,  92, 129,
 110, 123, 122,  72,  49, 121, 105, 121, 105, 118, 105,  99,  90, 104, 197, 200,
 202, 207, 148, 127, 136, 192, 217, 205, 200, 217, 208, 205, 204, 198, 212, 199,
 198, 158,  74, 103,  87,  82,  93,  75,  80,  54,  85, 109,  73,  67, 135, 103,
 163, 104,  92,  71,  81,  65,  45,  44,  62,  62,  76, 173, 192, 191, 189, 153,
 142,  88,  96,  88, 125,  89,  90, 107,  87, 105, 116, 108, 114,  86, 131,  54,
  66,  64,  77,  72,  76,  74,  54,  55,  57,  70,  73,  70,  43,  48,  28,  51
},
{
  28,  49,  91, 163, 164, 153, 106,  81, 199, 209, 179, 162, 139, 152, 159, 122,
 113, 108, 119, 110,  50, 112, 130, 129, 125, 115, 129, 110, 128, 116,  84, 122,
 104, 124, 113,  76,  59, 113, 101, 106, 106,  89,  86, 146, 124, 102, 188, 189,
 202, 196, 149, 183, 197, 198, 208, 205, 198, 206, 214, 207, 206, 197, 213, 205,
 203, 141, 140,  77, 101,  76,  80, 157, 102,  73,  65,  80,  72, 108,  87, 104,
 180, 100,  95,  73, 101,  74,  48,  68,  82, 110, 171, 180, 184, 190, 194, 160,
 157,  94, 105, 108, 158, 115, 112, 115, 100, 103,  84, 115, 100,  45,  55,  57,
  62,  65,  72,  73,  80,  72,  68,  56,  65,  57,  67,  38, 125,  97,  35,  51
},
{
  24,  97,  66, 158, 172, 177, 130,  75, 184, 172, 160, 128, 158,  96, 163, 116,
 117, 120, 110,  81,  51, 121, 126, 134, 127, 115, 129, 131, 123, 105,  84, 121,
 108, 121, 113, 104,  56, 110, 112,  84,  81,  78, 133, 133, 138, 101, 194, 195,
 180, 193, 209, 201, 209, 213, 207, 210, 214, 203, 200, 198, 207, 200, 196, 197,
 189, 132, 114, 144,  88, 103, 107, 130, 138,  95, 105, 101, 100, 105, 166, 117,
 158, 103,  85,  81, 114,  78,  62,  76, 121, 148, 160, 174, 176, 198, 182, 180,
 160, 148, 159, 170, 160, 113, 112,  89, 112, 105, 105, 100,  99,  81,  61,  47,
  51,  43,  32,  36,  37,  50,  46,  47,  58,  67,  53, 118, 132, 115,  66,  36
},
{
  26,  57,  74, 172, 164, 151, 185, 176,  66, 151, 135,  85,  68,  97, 155, 111,
 108, 124, 115,  75,  53, 104, 128, 132, 122, 122, 113, 120, 117, 117, 101, 117,
 104, 102, 103,  94,  52,  77,  78,  82,  86, 107, 135, 130, 120,  92, 189, 202,
 205, 199, 205, 194, 205, 206, 198, 204, 205, 213, 198, 199, 194, 191, 187, 201,
 174, 119,  68,  72,  92, 102,  71,  98, 126, 104, 104, 106, 106, 106, 113, 112,
 167, 104,  84,  94, 135, 112,  65, 114, 143, 166, 168, 182, 181, 196, 195, 187,
 165, 180, 158,  69, 162, 123, 124, 144, 121,  67,  98,  94, 107,  99,  66,  47,
  42,  40,  42,  40,  37,  34,  41,  37,  34,  30,  29, 142,  56,  62,  37,  20
},
{
  32,  55, 126, 151, 169, 184, 174, 166,  65, 145, 112,  56,  56,  95, 155, 116,
 121, 123, 105,  75,  48, 112,  95, 130, 122, 117, 117, 110, 115, 101,  87,  88,
  87,  94,  86,  80,  58, 108, 177, 118, 101, 161, 130, 142, 122,  85, 192, 197,
 196, 205, 205, 196, 197, 213, 223, 214, 207, 209, 208, 200, 198, 207, 199, 198,
 160, 112,  98,  77, 104, 154,  65,  72, 171, 118, 103, 105, 109, 127, 115, 173,
 176, 102,  98, 104, 144, 130, 136, 140, 158, 170, 193, 173, 185, 189, 197, 188,
 152, 155, 160,  82, 189, 127, 110,  51, 126,  83, 105,  94, 109, 109,  71,  41,
  43,  39,  39,  39,  35,  43,  42,  35,  41,  36,  52,  91,  59,  38,  25,  27
},
{
  36,  86, 168, 129, 184, 161, 160, 157,  58, 122,  67,  61,  41,  97, 147, 110,
 114,  91, 111,  76,  51,  95,  99, 127, 120, 111, 105,  89,  85,  89,  92,  89,
  88,  98, 125, 123,  67, 105, 184, 197, 117, 125, 123, 116, 135,  93, 181, 203,
 210, 195, 208, 204, 200, 208, 204, 209, 210, 140, 124, 116, 183, 188, 202, 200,
 155, 105,  84, 104, 107, 176,  94,  63, 177, 106, 104, 103, 108, 123, 193,  98,
 106, 103,  92,  99, 160, 151, 156, 163, 180, 151, 193, 190, 183, 173, 166, 174,
 187, 178,  80,  79, 181, 128, 124,  51, 132,  85, 104, 111, 127, 104,  57,  51,
  49,  43,  44,  38,  44,  47,  41,  40,  46,  50,  68,  89,  58,  33,  43,  22
},
{
  39,  82, 173, 133,  71, 138, 158, 154,  60, 114,  57,  52,  45,  95, 149, 125,
 113,  66, 106,  58,  48,  94,  90, 117, 113,  93,  90,  93,  85,  89,  82,  95,
 130, 109,  66, 129,  82, 145, 185, 127, 115, 202, 121, 151, 127,  80, 198, 201,
 207, 193, 215, 183, 210, 208, 152, 125, 123, 105,  83, 194, 195, 208, 194, 179,
 159, 105, 101, 106, 100, 184,  68,  91, 169, 105,  98, 106, 109,  88, 117, 108,
 102, 109, 101, 102, 166, 163, 162, 142, 187, 175, 139, 177, 184, 194, 192, 194,
 192, 183, 113, 129, 180, 123, 131,  56, 131,  76, 114, 106, 103, 103,  73,  51,
  53,  58,  52,  50,  45,  42,  39,  55,  43,  46,  44,  67,  68,  29,  37,  28
},
{
  43,  86, 110,  79, 111, 162, 153, 150,  54, 104,  72,  55,  40,  92, 145, 121,
 102,  69,  53,  59,  71, 119,  98, 101,  87,  97, 103,  96,  58,  79, 135,  73,
  72,  50,  85, 120,  73, 115, 193, 155, 121, 123, 124, 134, 138,  83, 192, 205,
 170,  78, 128, 203, 197, 129, 116,  94,  94,  91,  83, 194, 198, 192, 192, 176,
 154, 101,  74,  96,  96, 167, 178, 174, 201, 102,  88, 106, 107,  98, 108, 108,
 105,  99, 103, 133, 141, 170, 179, 191, 195, 174, 178, 195, 182, 192, 189, 194,
 190, 191, 104, 105, 181, 113, 110,  70, 117, 139, 112, 102, 123, 111,  72,  41,
  50,  49,  49,  45,  44,  44,  40,  37,  45,  40,  43,  85,  34,  53,  25,  28
},
{
  43,  43,  59, 106, 110, 129, 149,  75,  52,  82,  85,  56,  45,  94, 132, 111,
 111,  63,  76,  51,  73, 112,  93, 100,  98,  86,  51,  78, 141,  74, 112,  58,
  72,  55,  89, 129,  73, 100, 182, 137, 177, 136, 120, 137, 141,  88, 205,  95,
  84,  81, 131, 197, 206, 163,  87,  99, 114, 125,  87, 189, 195, 196, 190, 194,
 154,  96,  89,  85,  89, 151,  93,  89,  97,  78,  74,  94,  89,  72, 105, 110,
 180,  94,  83, 157, 189, 174, 131,  72,  67, 156, 183, 186, 185, 202, 199, 201,
 190, 188, 107, 137, 177, 136, 104, 167, 132,  81, 112, 127, 102,  98,  70,  48,
  53,  51,  50,  51,  42,  51,  41,  42,  48,  51,  43,  97,  42,  34,  28,  26
},
{
  52,  47,  46, 100, 121, 140,  63,  72,  46,  82,  71,  49,  45,  95, 121,  92,
  84,  62,  62,  94,  47, 114,  87,  58,  70,  85, 153, 191, 108,  67, 134,  74,
  65,  53,  79, 128,  67, 110, 199, 138, 112, 123, 129, 131, 114,  95, 188, 101,
 102,  86, 146, 203, 210, 177, 159,  97, 103,  98,  85, 196, 209, 199, 174, 199,
 142,  86,  62,  75,  63,  85,  76,  78,  80,  62,  66,  97,  74, 119, 178, 155,
 102,  98,  96, 173, 179, 189, 101,  62,  59, 165, 194, 199, 191, 201, 190, 184,
 183, 186,  89,  81, 181, 117, 129,  73, 105, 112,  88, 101,  94, 101,  66,  44,
  47,  45,  46,  49,  50,  50,  54,  51,  50,  49,  46,  58,  53,  48,  17,  35
},
{
  38,  36,  38,  86, 113,  93,  58,  90,  51,  85,  81,  54,  43,  91, 115,  86,
  70,  50,  63,  54,  52,  94,  95, 136, 135, 173,  94, 195, 185,  86, 113,  72,
  74,  55,  83, 105,  79,  94, 161, 142, 192, 131, 111, 122, 106,  91, 204, 105,
 102,  84, 133, 199, 192, 160,  90, 122, 139, 105,  82, 199, 187, 192, 190, 194,
 147,  79,  62,  67,  63,  53,  59,  64,  85,  66,  82, 111, 112, 126, 104,  77,
  85,  88,  84, 182, 193, 194,  92,  55,  58, 192, 198, 194, 187, 200, 200, 189,
 191, 184,  82, 136, 169, 123, 110, 104,  93, 104,  89, 100, 114,  99,  62,  47,
  47,  49,  62,  50,  47,  48,  55,  44,  55,  46, 102,  68,  51,  35,  24,  35
},
{
  25,  49,  55,  84,  76, 102,  50,  79,  44,  83,  90,  53,  43,  92, 112,  79,
  58,  43,  49,  95,  50, 118, 105, 137, 119, 164, 180, 197, 118,  72, 130,  73,
  74,  53,  83, 102,  74, 116, 179, 130, 119, 132, 107, 139, 124,  91, 199,  96,
 109,  84, 138, 198, 192, 171,  88,  95, 105, 131,  96, 201, 197, 172, 191, 188,
 157,  73,  56,  55,  47,  55,  48,  53,  81,  77,  55, 105,  86,  92, 138,  76,
  91,  84,  86, 187, 193, 190,  88,  62,  55, 192, 194, 195, 200, 198, 202, 191,
 191, 190, 165,  91, 159, 122, 102, 109,  97,  92, 105, 101, 110,  85,  57,  48,
  47,  46,  50,  53,  45,  63,  46,  47,  49, 122,  88,  56,  49,  26,  24,  41
},
{
  31,  43,  42,  39,  70, 139,  54,  95,  46,  79,  78,  53,  48,  90, 145,  93,
  61,  73, 108, 103,  46,  99, 108, 169, 144, 179,  97, 193, 195, 100, 123,  74,
  73,  51,  90,  94,  87,  91, 155, 158, 151, 123, 110, 133, 131,  85, 192,  94,
 106,  88, 152, 196, 199, 140, 103, 158, 121, 106,  91, 194, 206, 190, 183, 176,
 133,  64,  53,  63,  70,  64,  48,  54,  60,  72,  86, 135,  77,  61, 152, 162,
  97, 112,  91, 192, 183, 143,  59,  56,  61, 192, 193, 194, 193, 198, 205, 192,
 188, 179, 171, 190, 172, 114, 121,  98, 102,  98,  85,  92,  86, 102,  62,  49,
  57,  50,  50,  55,  60,  55,  51,  46,  59, 120,  55,  40,  37,  20,  27,  46
},
{
  35,  41,  35,  50,  49,  52,  70,  53,  69,  78,  98,  56,  51,  84, 144,  95,
 112,  76,  90,  97,  48,  95, 108,  99, 124, 173, 177, 195, 123,  89, 132,  74,
  54,  49,  94,  88,  76, 198, 130, 131,  82, 114, 132, 130, 128,  87, 195, 115,
 105,  94, 148, 197, 201, 142,  94, 112, 122, 165, 127, 196, 201, 192, 189, 167,
 107,  61,  57,  55,  44,  45,  69,  61,  59,  78,  59, 115,  69, 103, 182,  81,
 109,  97, 106, 179, 191, 190,  64,  67,  61, 189, 194, 196, 192, 194, 198, 192,
 191, 195, 191, 190, 176, 107, 118, 109,  90,  79,  69,  70,  94,  86, 116, 127,
  95, 103,  84,  83,  78,  70,  86,  77,  73,  93,  61,  52,  52,  28,  27,  40
},
{
  20,  55,  31,  65,  50,  57,  63,  48,  60,  74,  94,  49,  54,  94, 156,  96,
 103,  75, 124, 116,  51,  71,  61, 102, 128, 154,  93, 191, 169,  97, 114,  82,
  72,  48,  89,  89,  80, 133,  81, 120,  98, 132, 132, 110, 120,  87, 192, 112,
 105,  90, 152, 195, 196, 147, 189, 154, 114, 134, 175, 191, 199, 192, 180, 145,
  99,  62,  51,  45,  42,  45,  44,  42,  56,  79,  86,  73,  85,  59, 140,  83,
  87,  74, 100, 188, 124, 190,  58,  52,  90, 184, 193, 198, 194, 202, 200, 199,
 200, 199, 176,  79, 112, 121, 111, 103,  98,  70,  67,  92, 104, 101,  69,  82,
  77,  65,  74,  45,  44,  59,  56,  32,  53,  84,  85,  31,  37,  34,  32,  32
},
{
  33,  85,  40, 123,  57,  53,  54,  52,  62,  75, 103,  60,  65, 153, 140, 105,
 102,  77, 109, 122,  44,  91, 103, 111, 112, 188, 138, 189, 130, 107, 127,  83,
  75,  51,  86,  79,  64, 121, 119, 129, 126, 135, 120, 124, 122,  85, 193, 114,
 104,  95, 158, 201, 196, 120, 117, 162, 175, 186, 197, 189, 198, 174, 177, 140,
  77,  52,  42,  43,  43,  42,  45,  44,  51,  93,  72,  54,  84,  98, 158, 153,
  89,  66,  95, 191, 198, 182,  64,  48,  61, 186, 169, 190, 193, 205, 195, 194,
 186, 120,  54,  52, 115, 131,  92, 100,  84,  77,  65,  94, 110, 118,  78,  61,
  66,  62,  59,  48,  35,  64,  44,  27,  67,  83,  49,  28,  28,  29,  36,  41
},
{
  29,  42,  48,  54,  53,  47,  62,  56,  64,  78, 109, 105, 110, 160, 138, 105,
 110,  77, 120, 106,  47, 109, 103, 131, 116, 167,  88, 204, 163,  93, 121,  75,
  75,  55,  89,  85, 120, 131, 121, 125, 122, 138, 106,  85,  71,  85, 191, 115,
 106,  94, 154, 183, 190, 180, 185, 190, 192, 179, 207, 182, 190, 182, 154, 134,
  55,  47,  42,  48,  46,  43,  48,  46,  85, 100,  72,  71,  83,  73,  77,  72,
  60,  75, 105, 167, 197, 190,  58,  52,  58, 176,  68, 112, 119, 163, 192, 179,
 195, 199,  50,  45, 112, 105, 109, 134, 139,  66,  63,  42,  64, 113,  77,  65,
  80,  72,  56,  59,  53,  43,  51,  36,  50,  59,  68,  36,  27,  30,  34,  32
},
{
  26,  65,  56,  48,  47,  54,  48,  59,  71,  81, 110, 108, 156, 160, 150, 113,
  95, 112, 126, 106,  46,  81,  91, 113, 106, 190, 155,  90,  96, 120, 124,  76,
  80,  52,  87,  97, 128, 131, 119, 134, 113, 109,  56,  57,  80,  83, 187, 116,
 102, 100, 164, 199, 181, 184, 196, 190, 185, 193, 191, 169, 180, 183, 154, 126,
 110,  55,  47,  57,  46,  55,  49,  69,  92, 148, 134,  60,  60,  52,  54,  67,
  76,  79, 102, 175, 187, 188,  62,  49,  61,  45,  55,  60,  75,  85,  71, 165,
 188, 189,  66,  45,  98, 114,  97,  75, 115,  70,  41,  43,  97, 103,  68,  72,
  74,  67,  61,  75,  68,  71,  75,  38,  56,  57,  51,  63,  33,  31,  21,  34
},
{
  27,  39,  54,  51,  57,  57,  57,  51,  64,  77, 130, 145, 158, 158, 163, 106,
 106, 117, 119, 107,  53,  86, 102, 128, 118,  86, 113, 119, 119, 123, 131,  76,
  76,  53, 111,  98, 113, 127,  58,  50,  54,  52,  53,  55,  72,  80, 189, 118,
  98, 105, 189, 174, 189, 191, 193, 179, 169, 184, 190, 194, 191, 179, 160, 107,
  60,  48,  46,  44,  65,  54,  42,  63, 124, 110, 139,  60,  79,  57,  61,  68,
  68,  81, 105, 183, 189, 177,  67,  48,  53,  86,  95,  67, 102,  78,  73, 194,
 183, 171,  54,  49,  81,  64, 125,  84, 122,  78, 124,  46,  86,  85,  74,  82,
  78,  77,  72,  70,  71,  80,  84,  42,  63,  61,  44,  42,  26,  33,  34,  35
},
{
  23,  40,  49,  39,  58,  62,  68,  74,  57,  85, 124, 151, 156, 149,  95, 118,
 110, 113, 124, 157, 146, 135,  88,  95, 110, 116, 117, 119, 129, 117, 109,  78,
  75,  53, 106,  80, 135,  73,  55,  74,  67,  64,  76,  53,  58,  81, 191, 109,
 109, 101, 177, 175, 176, 180, 196, 185, 172, 179, 178, 165, 184, 186, 148, 113,
  61,  54,  47, 102,  56,  56,  78, 100, 132, 140, 152,  63,  54,  61, 113,  63,
  77,  82, 108, 194, 186, 191,  63,  49,  49, 136,  94,  68,  70,  92, 169, 198,
 197, 187,  43,  47,  74,  54, 133,  78, 108,  75, 134,  60,  98,  98,  73,  92,
  76,  84,  74,  78,  69,  53,  78,  61,  69,  66,  50,  34,  31,  44,  49,  28
},
{
  24,  53,  58,  60,  47,  54,  74,  86,  95,  96,  57,  44,  49, 106, 125, 121,
 100, 115, 116, 172, 151, 147,  96,  84, 120, 122, 128, 105, 114,  69,  65,  78,
  74,  56,  92,  47,  68,  82,  86, 114, 115,  99,  56,  57,  60,  82, 176, 121,
  94, 130, 183, 173, 164, 177, 160, 157, 159, 181, 192, 167, 172, 167, 127, 102,
  73,  49,  40,  40,  48,  54,  45,  71, 123, 165, 138,  69,  47,  53,  54,  65,
  98, 113,  96, 172, 201,  87,  51,  47,  57, 138, 127, 121, 124, 171, 198, 193,
 198, 161,  46,  49,  82,  52,  79,  71, 110,  78, 150,  62, 102, 101,  72,  72,
  85,  85,  73,  68,  67,  59,  78,  62,  86,  77,  54,  34,  33,  41,  38,  32
},
{
  38,  36,  41,  47,  58,  73,  77,  73,  74, 125,  71,  55,  78,  58, 127, 112,
 124, 120, 111, 115,  84, 103, 113, 104, 140, 103,  91,  70,  45,  69,  78,  56,
  84,  90,  46,  72,  83,  77,  99,  81, 114, 105,  69,  53,  72,  72, 113,  56,
  79,  90, 133, 157, 147, 127,  94,  71,  99, 171, 183, 179, 163, 155, 130, 104,
  76,  40,  41,  41,  45,  52,  48,  64, 142, 170, 135,  70,  50,  83, 129, 108,
  96,  86,  99, 113,  65,  58,  54,  57,  65,  87, 103, 133, 152, 111, 192, 195,
 190, 160,  45,  42,  74,  61,  75,  71,  99, 107, 153,  71,  89,  94,  91,  78,
  81,  64,  67,  71,  55,  65,  98, 101,  81,  56,  44,  32,  29,  28,  43,  21
},
{
  30,  56,  36,  40,  62,  95,  77,  96, 130, 151, 149,  54,  53, 175, 142, 109,
 116, 133,  89,  66,  62,  71, 106, 166, 144,  96, 106,  61,  47,  55,  59, 156,
 118, 131,  78,  65,  84,  91,  80,  91,  99,  78,  84, 113,  84,  75,  73,  46,
  57,  68, 146, 192,  84,  68,  64,  64,  67, 141, 113, 129,  95, 127,  95,  85,
  82,  41,  45,  42,  42,  50,  49,  67, 146, 155, 137,  63,  52,  68,  80, 103,
 114, 102, 122, 129, 108, 104,  94, 104, 110,  88,  74,  63,  80,  82, 189, 178,
 169,  65,  41,  38,  67,  53,  70,  70, 114,  81, 159,  75,  93, 103,  76,  87,
  87, 107,  77,  80,  58,  86,  78,  80,  82,  43,  44,  31,  29,  33,  34,  18
},
{
  27,  40,  79,  57,  86,  90, 103,  75,  96, 142, 160, 101,  70, 157, 149, 117,
 114,  90,  62,  49,  78,  66,  66,  78,  98, 142, 149, 164,  41,  61,  44, 149,
  85,  57,  82,  68,  71,  80,  87,  98,  57,  80,  59, 122,  92,  91,  88,  79,
  52,  74, 130, 128, 138, 118,  55,  55,  69,  60,  86,  80, 121,  69,  65,  82,
  92,  42,  41,  40,  39,  49,  48,  69, 142, 168, 162,  55,  48,  61,  81,  84,
 101,  88,  74,  72,  92, 118, 124, 150,  82,  77,  67,  76,  56, 103, 115,  60,
  63,  54,  45,  42,  83,  54,  59,  45,  97, 104, 155,  62,  96, 101,  78,  75,
 101,  90,  72,  38,  33,  41,  65,  87,  92,  50,  30,  24,  29,  62,  28,  29
},
{
  27,  62,  59,  55,  69, 102,  86,  85,  89, 142, 152, 217,  94, 152, 142, 101,
 114,  76,  54,  56,  50,  56,  49,  50,  85, 137, 144, 107,  83,  88,  97, 102,
  70,  61,  73,  49,  65,  79,  50,  97,  67, 108,  55,  89,  91, 110,  82,  86,
  92,  79, 102, 127,  91,  91, 100,  99, 115, 100,  62,  83,  89,  79,  98,  77,
  77,  48,  45,  41,  44,  49,  50,  75, 117,  84,  82,  62,  49,  51,  47,  79,
  79,  80, 105,  96,  97, 119, 125, 136, 143,  79,  73,  78,  66,  94,  59,  58,
  59,  57,  45,  41,  64,  87,  80,  73, 100,  71, 157,  72,  72,  60,  76,  69,
  60,  84,  65,  33,  30,  65,  42,  38,  46,  54,  36,  28,  33,  61,  36,  21
},
{
  27,  94,  80,  47,  50,  65,  98,  79,  96, 128, 161, 175, 127, 172, 145, 111,
  99,  45,  51,  48,  66,  91,  80,  62,  57,  53,  54, 124, 120, 112,  95,  94,
  58, 102,  70,  59,  84,  48,  78, 102,  69,  91, 117,  80,  95, 101, 105,  87,
  84,  90,  84,  96,  96,  94, 101,  99,  97,  92,  99,  98,  98,  96,  99,  75,
 110,  68,  50,  45,  49, 100, 126, 106, 106, 136, 132, 132, 129, 112, 102,  94,
  87,  85,  81,  82, 101, 111, 112, 135,  93,  84,  83,  77,  80,  96,  69,  69,
  64,  62,  54,  37,  79,  70,  77,  66,  68,  68,  94,  58,  47,  48,  58,  54,
  41,  53,  57,  54,  28,  42,  25,  40,  41,  48,  25,  35,  35,  37,  33,  30
},
{
  23, 138,  92,  75,  70,  57,  73,  68,  90, 111,  53, 127, 104, 180,  74, 102,
  53,  68,  40,  52,  72, 100, 109, 118, 111, 106, 105, 105,  83,  64, 110, 104,
 111,  96,  91,  83,  69,  76, 101,  64, 108,  73,  78,  79,  85,  95,  93,  90,
 101,  88,  94,  90,  98,  84, 100,  98,  94, 100, 101,  97, 100,  84,  99,  88,
  94,  49,  49,  87,  53, 140, 156, 164, 126, 143, 145, 143, 149, 154, 145, 143,
 140, 139, 135, 110, 100, 110, 117, 130,  80,  72,  60,  74,  59,  97, 104,  84,
  96, 104,  97, 100,  88,  99,  83,  87,  54,  43,  47,  55,  41,  37,  38,  75,
  50,  70,  50,  45,  32,  34,  59,  44,  48,  54,  29,  22,  53,  33,  36,  21
},
{
  24,  82,  66,  67,  76,  68,  61,  95,  86, 126,  64,  53,  64, 127,  62,  95,
  60,  43,  45,  53,  84, 112, 108, 109, 114, 111, 107, 103, 117, 110, 104, 101,
 104, 113, 124, 107, 110,  95,  84,  60,  86,  52, 104,  82, 135, 120,  97,  85,
 109,  97, 100, 101,  88,  96, 103,  85,  93,  91,  83,  82,  95,  95, 104, 103,
  97,  95,  45,  75,  45,  86, 127,  89, 100, 146, 158, 156, 151, 140, 147, 150,
 157, 151, 142, 146,  85,  93,  98, 120, 104, 105, 105, 101, 110, 107, 145,  98,
 107, 110, 112, 111,  93, 107, 104, 108,  55,  38,  35,  41,  43,  38,  33,  42,
  40,  94,  26,  33,  32,  37,  26,  38,  49,  39,  42,  33,  36,  35,  27,  27
},
{
  28,  57,  71,  52,  66,  77,  74,  80,  65,  79,  51,  48,  60,  67,  78,  73,
  62,  43,  44,  60, 124, 128, 123, 117, 109, 113, 109, 128, 124, 139, 111, 113,
 123, 130, 129, 123, 121, 101, 104, 105, 118, 114,  83,  81,  63,  85,  84, 104,
  92,  98, 105,  99,  94, 105,  89,  83,  99,  96,  76, 101, 103,  96,  96,  90,
  94,  91,  49,  72,  57,  98, 103,  98,  98, 105, 109, 140, 136, 123, 132, 116,
 127, 130, 124, 104,  89,  91,  98, 129, 106, 109, 107, 114, 122,  98, 101,  96,
 107, 114, 110, 122, 113, 130, 159, 122,  38,  37,  37,  37,  40,  32,  41,  42,
  48,  84,  34,  31,  83,  36,  29,  26,  60,  32,  23,  23,  27,  33,  42,  24
},
{
  35,  61,  60,  61,  69,  70, 101,  62,  71,  99,  99,  50,  79,  48,  71,  76,
  51,  46,  47,  70,  95, 128, 127, 130, 145, 153, 140, 130, 127, 143, 134, 134,
 126, 116, 129, 139, 132, 123, 114, 107, 103, 114, 114, 114, 115, 108, 119, 118,
 115,  95, 101, 103, 108, 118,  99,  98,  97, 102,  85,  96,  96, 102, 105,  84,
  90,  96,  67,  63,  68, 100, 114, 114, 109, 125, 123, 117, 125, 129, 130, 122,
 121, 128, 132, 126, 119, 132, 132, 137, 127, 131, 131, 127, 127, 133, 128, 128,
 124, 124, 111, 108, 103, 111, 117, 109,  44,  32,  34,  40,  41,  32,  48,  40,
  38, 116,  34,  33,  58,  39,  21,  38,  54,  28,  26,  20,  24,  31,  27,  22
},
{
  28,  80,  53,  69,  58,  65,  81,  83, 116,  74,  76,  49, 126, 152, 106, 105,
 110, 112, 116, 122, 135, 133, 133, 160, 127, 135, 136, 157, 150, 129, 132, 132,
 126, 127, 127, 125, 134, 115, 117, 127, 110, 120, 107, 108, 109, 104, 112, 123,
 120, 112, 113, 105, 117, 130, 139, 133, 125, 129, 150, 117, 123, 105, 110, 108,
 118, 116,  82,  63,  79, 125, 127, 125, 122, 122, 130, 129, 136, 128, 127, 127,
 117, 109, 114, 121, 119, 119, 117, 116, 124, 116, 111, 121, 117, 130, 125, 105,
 121, 112, 120, 108, 109, 108, 106, 103,  36,  35,  33,  36,  44,  32,  60,  37,
  44, 113,  37,  23,  35,  35,  20,  33,  44,  60,  30,  18,  25,  32,  20,  18
},
{
  32,  85,  84,  53,  69,  51,  66,  81,  92,  62,  54,  47,  70,  68, 114, 116,
 118, 120, 120, 112, 117, 119, 122, 119, 128, 127, 123, 126, 115, 109, 126, 124,
 118, 120, 116, 120, 116, 122, 127, 125, 116, 124, 124, 119, 126, 122, 113, 134,
 134, 118, 127, 134, 121, 133, 134, 132, 125, 135, 137, 137, 140, 126, 126, 110,
 118, 125, 109, 126, 108, 120, 125, 126, 132, 132, 130, 138, 139, 135, 124, 119,
 118, 120, 125, 122, 120, 127, 119, 109, 110, 103, 105, 108, 109, 102,  93,  88,
  90, 100, 105, 102,  91,  94,  88,  99,  35,  34,  34,  33,  48,  30,  56,  43,
  42,  82,  27,  25,  36,  37,  26,  31,  47,  31,  30,  16,  29,  58,  57,  34
},
{
  40,  74,  76,  82,  77,  96,  85,  92,  94,  92, 103,  98, 100,  96, 108, 106,
 120, 133, 141, 130, 129, 125, 121, 109, 121, 119, 132, 108, 120, 117, 119, 116,
 115, 122, 124, 111,  99, 120, 110, 106,  95, 126, 117, 113, 116, 110, 107, 129,
 127, 127, 132, 128, 132, 135, 129, 123, 138, 127, 119, 133, 127, 127, 119, 121,
 127, 113, 125, 100, 123, 124, 115, 126, 118, 116, 114, 127, 119, 121, 128, 120,
 119, 118, 117, 119, 118, 112, 115, 113, 125, 122, 113, 111, 119, 105,  98,  91,
  91,  89,  89,  85,  88,  83,  77,  81,  67,  34,  26,  29,  41,  33,  56,  43,
  40,  83,  29,  23,  43,  35,  27,  28,  29,  29,  25,  25,  24,  26,  20,  37
},
{
  35, 106, 122,  90,  96,  92, 100, 103,  96, 104,  97,  88, 102,  97, 100,  93,
 107, 104,  98,  93, 103, 104, 107, 103, 119, 101, 102,  88, 109, 123, 106, 122,
 124, 116, 119, 116, 117, 136, 117, 127, 130, 123, 120, 110, 119, 110, 127, 128,
 122, 118, 114, 127, 121, 119, 114, 106, 105, 110, 112, 110, 107, 112, 112,  99,
 117, 116, 114, 122, 126, 124, 122, 118, 125, 119, 129, 119, 123, 114, 110, 123,
 120, 119, 106, 108, 115, 122, 109, 104, 106, 105, 107, 102,  96,  95,  97,  81,
  97, 109,  93,  76,  80,  87,  87,  89,  82,  37,  35,  25,  46,  28,  57,  44,
  42,  77,  30,  20,  48,  27,  25,  25,  27,  26,  30,  19,  24,  29,  24,  21
},
{
  40,  98,  86,  84,  95, 115,  96, 107,  86, 106,  96, 110,  94, 108, 104, 100,
 109,  97, 104,  87, 105, 101, 101,  93,  93, 100, 101, 107, 112, 114, 103, 113,
 116, 116, 118, 121, 123, 114, 121, 122, 117, 121, 126, 134, 131, 126, 127, 119,
 129, 125, 128, 120, 133, 121, 132, 109, 115, 116, 110, 110, 113, 100, 108, 108,
 108, 113, 107, 102, 110, 101, 106, 105, 107, 109, 104, 102, 108, 117, 117, 122,
 115, 103, 106, 103,  99, 108, 105, 102, 108,  99, 102, 103, 103,  94,  91,  79,
  81,  78,  77,  72,  89,  89,  86,  84,  77,  35,  32,  24,  44,  34,  51,  36,
  48,  80,  31,  22,  32,  31,  25,  23,  35,  40,  26,  23,  27,  22,  28,  32
},
{
  44, 101, 102,  97,  90, 105,  89, 106,  93,  92,  97,  90, 121, 116, 105, 102,
 104, 104, 103, 102, 118, 111, 106, 105, 100, 104, 107, 108, 113, 108, 103, 108,
 102, 111, 111, 106, 123, 130, 118, 130, 115, 128, 132, 112, 121, 126, 126, 122,
 121, 118, 137, 132, 127, 119, 119,  97, 104, 114, 108, 111,  95, 115, 106,  99,
 109, 112, 105, 109, 107,  92,  97, 100,  94, 117, 106, 106, 105, 111, 111, 108,
 111, 103, 108, 107,  98, 104,  92, 106, 100, 107,  99,  93,  67,  89,  89,  90,
  90,  94,  72,  74,  83,  77,  82,  79,  62,  36,  31,  30,  40,  31,  47,  43,
  55,  79,  22,  30,  46,  30,  23,  23,  52,  51,  21,  27,  25,  37,  31,  36
},
{
  32, 107, 104,  99, 103,  92, 103, 108, 110,  99, 105, 115, 108, 105, 106, 111,
 124, 107, 107, 105, 107, 106, 112, 112, 121, 121, 117, 107, 114, 112, 111,  98,
 110, 117, 115, 130, 102, 130, 138, 127, 121, 129, 105, 106, 120, 119, 117, 109,
 109, 116, 112, 130, 128, 114, 106, 114, 124, 114, 110,  97,  94, 104, 110, 112,
 112, 110,  98, 101, 107, 118, 116, 108, 103, 107, 107,  92,  95,  90,  86, 100,
  93, 108, 102, 104,  97,  87,  93,  93,  87,  90, 101,  95,  66,  88,  78,  75,
  78,  75,  69,  77,  77,  78,  82,  76,  70,  57,  30,  27,  38,  34,  42,  41,
  83,  72,  24,  34,  87,  29,  22,  32,  72,  44,  29,  22,  26,  28,  31,  56
},
{
  34, 103,  93, 105, 113, 110,  96, 119, 120, 114, 111, 101,  85, 107, 108, 113,
 113,  94, 110, 122, 123, 108, 102, 109,  99, 121, 114, 128, 145, 142, 139, 133,
 129, 148, 129, 133, 124, 126, 126, 117, 116, 118, 119, 130, 122, 112, 100,  86,
 114, 103, 110,  84, 111, 111, 121, 117, 110, 106, 105, 104, 120, 110, 112, 105,
 113, 113, 106, 107, 116, 105, 107, 105, 103, 107, 103, 101, 112, 103, 106, 101,
 100, 102,  95,  92, 101,  96,  84, 106,  89,  93,  81,  73,  74,  82,  76,  80,
  81,  78,  49,  71,  77,  84,  80,  71,  69,  68,  63,  52,  30,  32,  45,  46,
  90,  62,  32,  36,  87,  32,  24,  30,  62,  42,  32,  19,  26,  59,  57,  54
},
{
  38,  97, 102, 100, 105, 116, 102, 105, 103,  99, 101, 108,  99, 116, 124, 113,
 122, 121, 113, 112, 124, 129, 112, 127, 134, 129, 116, 122, 109, 120, 117, 117,
 117, 132, 124, 126, 112, 112, 130, 123, 138, 127, 129, 132, 124, 133, 116, 121,
 125, 109, 109, 125, 116, 124, 121, 113, 111, 114, 102, 112, 105, 110,  92,  86,
  88,  92,  99,  99,  96, 108, 115, 122, 116, 121, 104, 103, 106, 109, 104, 109,
 103, 103,  87, 106,  99,  93,  93,  85,  83,  94,  88,  68,  64,  69,  74,  79,
  82,  72,  61,  74,  82,  81,  80,  88,  65,  69,  62,  67,  29,  34,  42,  40,
  96,  46,  32,  35,  91,  36,  28,  29,  90,  86,  30,  22,  30,  78,  70,  70
},
{
  43,  95,  99, 116, 114, 120, 115, 128, 112, 112, 120, 101, 118, 113, 107, 108,
 105, 107, 106, 104,  99,  99, 106, 105, 109, 122, 100, 111, 111, 116, 112, 117,
 112, 123, 117,  90, 101, 120, 119, 122, 136, 124, 118, 119, 123, 105, 113, 109,
 101,  95, 107, 104, 131, 115, 109, 110, 108, 118, 109, 112, 100, 107, 105, 102,
 101, 104,  93,  96, 100, 115, 111,  99, 112,  97, 109, 104, 103, 107,  91, 103,
  98,  94, 111,  96, 104,  89,  89,  90,  91,  85,  96,  68,  78,  69,  64,  93,
 109,  70,  57,  67,  69,  70,  72,  74,  72,  82,  62,  74,  73,  71,  38,  24,
  91,  43,  29,  29,  99,  34,  23,  32,  88,  85,  25,  24,  29,  84,  76,  74
},
{
  39, 124, 117, 111, 109, 114, 100, 109, 112, 122, 115, 119, 125, 118,  92, 106,
 119, 120, 107, 105, 128, 127, 125, 111, 111, 111, 115, 124, 117, 116, 110, 126,
 116, 122, 119, 122, 126, 122, 118, 116, 124, 120, 115, 111, 114, 108, 105, 125,
 118, 122, 123, 131, 108, 124, 118, 122, 114, 122, 100, 102, 106, 107, 104,  98,
 105,  95, 105, 101,  93, 100, 112, 109,  92, 104, 114, 113, 110, 107, 100,  93,
 104, 101,  96,  86,  91,  91,  92,  84,  73,  87,  83,  65,  70,  89,  87,  80,
  65,  62,  41,  49,  45,  60,  69,  66,  85,  85,  72,  57,  65,  71,  42,  37,
  54,  36,  25,  30,  89,  33,  28,  31,  93,  84,  32,  29,  26,  83,  82,  80
},
{
  32, 109, 107, 121, 128, 121, 104, 120, 115, 115, 109, 125, 122, 113, 108, 119,
 119, 129, 115, 101, 119,  99, 107, 105, 112, 110,  97, 109, 117, 119, 111, 106,
 103, 111, 118, 129, 134, 127, 109, 114, 122, 114, 110, 124, 107, 110, 113, 118,
 127, 121, 122, 121, 114, 117, 116, 112, 110, 103, 112, 113, 103, 111, 113, 123,
 118, 116, 113, 113, 113, 108, 109, 111, 104, 106, 102, 107, 104,  94,  90,  84,
  89,  87,  84,  98,  93,  86,  90, 100,  91,  70,  80,  62,  49,  73,  76,  75,
  75,  48,  45,  48,  48,  56,  56,  64,  76,  72,  88,  68,  72,  72,  72,  68,
  63,  29,  22,  36,  88,  33,  28,  30,  92,  92,  30,  19,  31,  89,  81,  74
},
{
  37, 103, 124, 122, 114, 111, 104, 103, 116,  99, 103, 111, 107, 105,  92,  92,
 101,  90,  95,  96, 104, 100, 101, 112, 120, 112, 130, 135, 127, 117, 121, 129,
 120, 122,  98, 122, 112, 111, 112, 110, 102, 107, 115, 100, 101, 113, 106, 106,
 124, 120, 104, 120, 120, 137, 121, 115, 123, 126, 126, 125, 116, 114, 118, 116,
 113, 118, 123, 128, 118, 112, 113, 114, 120, 119, 101, 107, 111, 108, 105, 106,
 108, 102, 101,  88,  82,  77,  78,  80,  75,  73,  74,  73,  49,  72,  66,  71,
  74,  78,  72,  65,  58,  65,  67,  67,  71,  76,  82,  83,  79,  76,  79,  69,
  74,  38,  42,  52,  63,  31,  29,  39,  90,  85,  28,  30,  31,  91,  89,  89
},
{
  32, 112, 103, 110, 120, 115, 121, 118, 110, 122, 119, 109, 125, 115, 112, 101,
 109, 117, 117, 127, 127, 128, 129, 113, 120, 127, 118, 123, 127, 122, 105, 127,
 118, 127, 104, 108, 104, 115, 113, 114, 123, 127, 112, 100, 116, 125, 127, 114,
 123, 112, 124, 109, 120, 125, 135, 134, 119, 124, 120, 128, 115, 111, 122, 111,
 125, 103, 119, 115, 123, 122, 125, 127, 123, 129, 120, 105, 115, 121, 110, 108,
 109, 106, 104,  99,  95,  99,  90,  82,  76,  81,  72,  70,  71,  68,  71,  64,
  78,  77,  75,  56,  54,  62,  68,  70,  71,  65,  68,  79,  81,  72,  81,  78,
  76,  73,  80,  72,  71,  33,  17,  52,  85,  79,  26,  26,  32,  68,  96,  94
},
{
  36, 111, 113, 121, 123, 106, 118, 116, 118, 101, 113, 116, 123, 111, 101, 115,
 120, 117, 110, 103, 109, 103, 107, 109, 100, 110, 115, 103, 111, 117, 134, 120,
 122, 103, 116, 113, 117, 122, 123, 122, 117, 124, 126, 113, 101, 106, 107, 112,
 124, 116, 134, 125, 126, 114, 122, 125, 130, 119, 125, 117, 105, 108, 111, 115,
 115, 113, 123, 122, 118, 113, 110, 114, 118, 119, 121, 120, 122,  97,  82, 100,
 110,  87,  79,  95,  93,  94,  80,  78,  78,  77,  74,  65,  71,  71,  60,  76,
  70,  75,  82,  63,  48,  62,  67,  57,  72,  65,  56,  72,  76,  76,  82,  91,
  87,  80,  75,  79,  68,  62,  51,  65,  72,  66,  23,  28,  37,  89,  91,  84
}
};
wavelet.h/      998664884   0     0     0       24926     `
int bior13[25] = 
{       6,
   -2896,    2896,   23169,   23169,    2896,   -2896,
       0,       0,   23169,  -23169,       0,       0,
       0,    2896,   23169,   23169,       0,   -2896,
   -2896,       0,   23169,  -23169,    2896,       0
};
int bior15[41] = 
{      10,
     543,    -543,   -3981,    3981,   23169,   23169,    3981,   -3981,    -543,     543,
       0,       0,       0,       0,   23169,  -23169,       0,       0,       0,       0,
       0,    -543,       0,    3981,   23169,   23169,       0,   -3981,       0,     543,
     543,       0,   -3981,       0,   23169,  -23169,    3981,       0,    -543,       0
};
int bior22[25] = 
{       6,
   -5793,   11586,   34755,   11586,   -5793,       0,
       0,       0,   11586,  -23169,   11586,       0,
       0,   11586,   23169,   11586,       0,       0,
       0,       0,   11586,  -23169,   11586,       0
};
int bior24[41] = 
{      10,
    1084,   -2172,   -5793,   13755,   32583,   13755,   -5793,   -2172,    1084,       0,
       0,       0,       0,       0,   11586,  -23169,   11586,       0,       0,       0,
       0,   -2172,       0,   13755,   23169,   13755,       0,   -2172,       0,       0,
       0,       0,   -2172,       0,   13755,  -23169,   13755,       0,   -2172,       0
};
int bior26[57] = 
{      14,
    -226,     452,    1540,   -3529,   -5567,   14663,   31675,   14663,   -5567,   -3529,    1540,     452,    -226,       0,
       0,       0,       0,       0,       0,       0,   11586,  -23169,   11586,       0,       0,       0,       0,       0,
       0,     452,       0,   -3529,       0,   14663,   23169,   14663,       0,   -3529,       0,     452,       0,       0,
       0,       0,     452,       0,   -3529,       0,   14663,  -23169,   14663,       0,   -3529,       0,     452,       0
};
int bior28[73] = 
{      18,
      49,     -98,    -422,     946,    1736,   -4420,   -5367,   15158,   31181,   15158,   -5367,   -4420,    1736,     946,    -422,     -98,      49,       0,
       0,       0,       0,       0,       0,       0,       0,       0,   11586,  -23169,   11586,       0,       0,       0,       0,       0,       0,       0,
       0,     -98,       0,     946,       0,   -4420,       0,   15158,   23169,   15158,       0,   -4420,       0,     946,       0,     -98,       0,       0,
       0,       0,     -98,       0,     946,       0,   -4420,       0,   15158,  -23169,   15158,       0,   -4420,       0,     946,       0,     -98,       0
};
int bior31[17] = 
{       4,
  -11586,   32767,   32767,  -11586,
    5793,  -17376,   17376,   -5793,
   17376,   32767,    5793,  -11586,
  -11586,   -5793,   32767,  -17376
};
int bior33[33] = 
{       8,
    2172,   -6517,   -5069,   32583,   32583,   -5069,   -6517,    2172,
       0,       0,    5793,  -17376,   17376,   -5793,       0,       0,
       0,   -6517,   17376,   32583,    5793,   -5069,       0,    2172,
    2172,       0,   -5069,   -5793,   32583,  -17376,   -6517,       0
};
int bior35[49] = 
{      12,
    -452,    1356,    1720,   -8778,   -2352,   31675,   31675,   -2352,   -8778,    1720,    1356,    -452,
       0,       0,       0,       0,    5793,  -17376,   17376,   -5793,       0,       0,       0,       0,
       0,    1356,       0,   -8778,   17376,   31675,    5793,   -2352,       0,    1720,       0,    -452,
    -452,       0,    1720,       0,   -2352,   -5793,   31675,  -17376,   -8778,       0,    1356,       0
};
int bior37[65] = 
{      16,
      98,    -298,    -550,    2447,    1025,   -9869,    -868,   31181,   31181,    -868,   -9869,    1025,    2447,    -550,    -298,      98,
       0,       0,       0,       0,       0,       0,    5793,  -17376,   17376,   -5793,       0,       0,       0,       0,       0,       0,
       0,    -298,       0,    2447,       0,   -9869,   17376,   31181,    5793,    -868,       0,    1025,       0,    -550,       0,      98,
      98,       0,    -550,       0,    1025,       0,    -868,   -5793,   31181,  -17376,   -9869,       0,    2447,       0,    -298,       0
};
int bior39[81] = 
{      20,
     -22,      65,     167,    -675,    -462,    3247,     403,  -10491,      68,   30869,   30869,      68,  -10491,     403,    3247,    -462,    -675,     167,      65,     -22,
       0,       0,       0,       0,       0,       0,       0,       0,    5793,  -17376,   17376,   -5793,       0,       0,       0,       0,       0,       0,       0,       0,
       0,      65,       0,    -675,       0,    3247,       0,  -10491,   17376,   30869,    5793,      68,       0,     403,       0,    -462,       0,     167,       0,     -22,
     -22,       0,     167,       0,    -462,       0,     403,       0,      68,   -5793,   30869,  -17376,  -10491,       0,    3247,       0,    -675,       0,      65,       0
};
int bior44[41] = 
{      10,
    1238,    -779,   -3624,   12366,   27940,   12366,   -3624,    -779,    1238,       0,
       0,       0,   -2113,    1333,   13699,  -25836,   13699,    1333,   -2113,       0,
       0,    -779,   -1333,   12366,   25836,   12366,   -1333,    -779,       0,       0,
       0,       0,    -779,    1333,   12366,  -25836,   12366,    1333,    -779,       0
};
int bior55[49] = 
{      12,
       0,    1300,     258,   -1785,   11324,   24139,   11324,   -1785,     258,    1300,       0,       0,
       0,    -442,     -88,    4479,   -3063,  -15623,   29473,  -15623,   -3063,    4479,     -88,    -442,
     442,    1300,   -4479,   -1785,   15623,   24139,   15623,   -1785,   -4479,    1300,     442,       0,
       0,    -442,    1300,    4479,   -1785,  -15623,   24139,  -15623,   -1785,    4479,    1300,    -442
};
int bior68[73] = 
{      18,
      62,     -62,    -557,     389,    1628,   -2532,   -3083,   13788,   27062,   13788,   -3083,   -2532,    1628,     389,    -557,     -62,      62,       0,
       0,       0,       0,       0,     471,    -475,   -2578,    1323,   13690,  -24866,   13690,    1323,   -2578,    -475,     471,       0,       0,       0,
       0,     -62,       0,     389,     475,   -2532,   -1323,   13788,   24866,   13788,   -1323,   -2532,     475,     389,       0,     -62,       0,       0,
       0,       0,     -62,       0,     389,    -475,   -2532,    1323,   13788,  -24866,   13788,    1323,   -2532,    -475,     389,       0,     -62,       0
};

int coif1[25] = 
{       6,
   -2382,   11071,   27937,   12612,   -2382,    -514,
    -514,    2382,   12612,  -27937,   11071,    2382,
   -2382,   11071,   27937,   12612,   -2382,    -514,
    -514,    2382,   12612,  -27937,   11071,    2382
};
int coif2[49] = 
{      12,
     537,   -1359,   -2208,   12651,   26629,   13663,   -2506,   -1946,     776,     183,     -58,     -22,
     -22,      58,     183,    -776,   -1946,    2506,   13663,  -26629,   12651,    2208,   -1359,    -537,
     -58,   -1359,     776,   12651,   -2506,   13663,   26629,   -1946,   -2208,     183,     537,     -22,
     -22,    -537,     183,    2208,   -1946,  -26629,   13663,    2506,   12651,    -776,   -1359,      58
};
int coif3[73] = 
{      18,
    -124,     255,     770,   -2156,   -2002,   13277,   26010,   14040,   -2352,   -2696,    1133,     520,    -294,     -85,      36,      16,      -3,       0,
       0,       3,      16,     -36,     -85,     294,     520,   -1133,   -2696,    2352,   14040,  -26010,   13277,    2002,   -2156,    -770,     255,     124,
      -3,     255,      36,   -2156,    -294,   13277,    1133,   14040,   -2352,   -2696,   26010,     520,   -2002,     -85,     770,      16,    -124,       0,
       0,     124,      16,    -770,     -85,    2002,     520,  -26010,   -2696,    2352,   14040,   -1133,   13277,     294,   -2156,     -36,     255,       3
};
int coif4[97] = 
{      24,
      29,     -52,    -239,     527,     874,   -2663,   -1838,   13608,   25630,   14233,   -2182,   -3152,    1287,     822,    -498,    -186,     124,      42,     -19,      -9,       3,       0,       0,       0,
       0,       0,       0,      -3,      -9,      19,      42,    -124,    -186,     498,     822,   -1287,   -3152,    2182,   14233,  -25630,   13608,    1838,   -2663,    -874,     527,     239,     -52,     -29,
       0,     -52,       3,     527,     -19,   -2663,     124,   13608,    -498,   14233,    1287,   -3152,   -2182,     822,   25630,    -186,   -1838,      42,     874,      -9,    -239,       0,      29,       0,
       0,     -29,       0,     239,      -9,    -874,      42,    1838,    -186,  -25630,     822,    2182,   -3152,   -1287,   14233,     498,   13608,    -124,   -2663,      19,     527,      -3,     -52,       0
};
int coif5[121] = 
{      30,
      -6,      13,      72,    -137,    -330,     766,     924,   -3011,   -1703,   13814,   25371,   14351,   -2031,   -3460,    1353,    1071,    -648,    -301,     222,      78,     -55,     -19,       9,       3,       0,       0,       0,       0,       0,       0,
       0,       0,       0,       0,       0,       0,       3,      -9,     -19,      55,      78,    -222,    -301,     648,    1071,   -1353,   -3460,    2031,   14351,  -25371,   13814,    1703,   -3011,    -924,     766,     330,    -137,     -72,      13,       6,
       0,      13,       0,    -137,       0,     766,       9,   -3011,     -55,   13814,     222,   14351,    -648,   -3460,    1353,    1071,   -2031,    -301,   25371,      78,   -1703,     -19,     924,       3,    -330,       0,      72,       0,      -6,       0,
       0,       6,       0,     -72,       0,     330,       3,    -924,     -19,    1703,      78,  -25371,    -301,    2031,    1071,   -1353,   -3460,     648,   14351,    -222,   13814,      55,   -3011,      -9,     766,       0,    -137,       0,      13,       0
};
int db2[17] = 
{       4,
   15825,   27410,    7344,   -4240,
   -4240,   -7344,   27410,  -15825,
    7344,   27410,   15825,   -4240,
   -4240,  -15825,   27410,   -7344
};
int db3[25] = 
{       6,
   10900,   26440,   15068,   -4423,   -2799,    1154,
    1154,    2799,   -4423,  -15068,   26440,  -10900,
   -2799,   26440,   15068,   -4423,   10900,    1154,
    1154,  -10900,   -4423,  -15068,   26440,    2799
};
int db4[33] = 
{       8,
    7548,   23423,   20672,    -916,   -6128,    1010,    1077,    -347,
    -347,   -1077,    1010,    6128,    -916,  -20672,   23423,   -7548,
    1077,   23423,   -6128,    -916,   20672,    1010,    7548,    -347,
    -347,   -7548,    1010,  -20672,    -916,    6128,   23423,   -1077
};
int db5[41] = 
{      10,
    5245,   19784,   23733,    4534,   -7939,   -1055,    2542,    -203,    -412,     108,
     108,     412,    -203,   -2542,   -1055,    7939,    4534,  -23733,   19784,   -5245,
    -412,   19784,    2542,    4534,   -7939,   -1055,   23733,    -203,    5245,     108,
     108,   -5245,    -203,  -23733,   -1055,    7939,    4534,   -2542,   19784,     412
};
int db6[49] = 
{      12,
    3653,   16206,   24611,   10331,   -7415,   -4253,    3194,     901,   -1035,      19,     157,     -36,
     -36,    -157,      19,    1035,     901,   -3194,   -4253,    7415,   10331,  -24611,   16206,   -3653,
     157,   16206,   -1035,   10331,    3194,   -4253,   -7415,     901,   24611,      19,    3653,     -36,
     -36,   -3653,      19,  -24611,     901,    7415,   -4253,   -3194,   10331,    1035,   16206,    -157
};
int db7[57] = 
{      14,
    2552,   12992,   23890,   15393,   -4715,   -7339,    2336,    2641,   -1245,    -543,     412,      13,     -58,      13,
      13,      58,      13,    -412,    -543,    1245,    2641,   -2336,   -7339,    4715,   15393,  -23890,   12992,   -2552,
     -58,   12992,     412,   15393,   -1245,   -7339,    2336,    2641,   -4715,    -543,   23890,      13,    2552,      13,
      13,   -2552,      13,  -23890,    -543,    4715,    2641,   -2336,   -7339,    1245,   15393,    -412,   12992,      58
};
int db8[65] = 
{      16,
    1782,   10252,   22137,   19181,    -517,   -9305,      16,    4217,    -570,   -1445,     458,     285,    -160,     -13,      22,      -3,
      -3,     -22,     -13,     160,     285,    -458,   -1445,     570,    4217,     -16,   -9305,     517,   19181,  -22137,   10252,   -1782,
      22,   10252,    -160,   19181,     458,   -9305,    -570,    4217,      16,   -1445,    -517,     285,   22137,     -13,    1782,      -3,
      -3,   -1782,     -13,  -22137,     285,     517,   -1445,     -16,    4217,     570,   -9305,    -458,   19181,     160,   10252,     -22
};
int db9[73] = 
{      18,
    1248,    7988,   19817,   21537,    4364,   -9610,   -3171,    4865,    1005,   -2215,       9,     733,    -154,    -140,      58,       6,      -9,       0,
       0,       9,       6,     -58,    -140,     154,     733,      -9,   -2215,   -1005,    4865,    3171,   -9610,   -4364,   21537,  -19817,    7988,   -1248,
      -9,    7988,      58,   21537,    -154,   -9610,       9,    4865,    1005,   -2215,   -3171,     733,    4364,    -140,   19817,       6,    1248,       0,
       0,   -1248,       6,  -19817,    -140,   -4364,     733,    3171,   -2215,   -1005,    4865,      -9,   -9610,     154,   21537,     -58,    7988,       9
};
int db10[81] = 
{      20,
     874,    6166,   17274,   22560,    9214,   -8185,   -6419,    4174,    3050,   -2339,    -966,    1087,     117,    -350,      45,      65,     -22,      -3,       3,       0,
       0,      -3,      -3,      22,      65,     -45,    -350,    -117,    1087,     966,   -2339,   -3050,    4174,    6419,   -8185,   -9214,   22560,  -17274,    6166,    -874,
       3,    6166,     -22,   22560,      45,   -8185,     117,    4174,    -966,   -2339,    3050,    1087,   -6419,    -350,    9214,      65,   17274,      -3,     874,       0,
       0,    -874,      -3,  -17274,      65,   -9214,    -350,    6419,    1087,   -3050,   -2339,     966,    4174,    -117,   -8185,     -45,   22560,      22,    6166,      -3
};

int rbio13[25] = 
{       6,
       0,       0,   23169,   23169,       0,       0,
   -2896,   -2896,   23169,  -23169,    2896,    2896,
    2896,       0,   23169,   23169,   -2896,       0,
       0,    2896,   23169,  -23169,       0,   -2896
};
int rbio15[41] = 
{      10,
       0,       0,       0,       0,   23169,   23169,       0,       0,       0,       0,
     543,     543,   -3981,   -3981,   23169,  -23169,    3981,    3981,    -543,    -543,
    -543,       0,    3981,       0,   23169,   23169,   -3981,       0,     543,       0,
       0,    -543,       0,    3981,   23169,  -23169,       0,   -3981,       0,     543
};
int rbio22[25] = 
{       6,
       0,   11586,   23169,   11586,       0,       0,
       0,    5793,   11586,  -32767,   11586,    5793,
   -5793,   11586,   32767,   11586,   -5793,       0,
       0,    5793,   11586,  -32767,   11586,    5793
};
int rbio24[41] = 
{      10,
       0,       0,       0,   11586,   23169,   11586,       0,       0,       0,       0,
       0,   -1084,   -2172,    5793,   13755,  -32583,   13755,    5793,   -2172,   -1084,
    1084,       0,   -5793,   11586,   32583,   11586,   -5793,       0,    1084,       0,
       0,   -1084,       0,    5793,   11586,  -32583,   11586,    5793,       0,   -1084
};
int rbio26[57] = 
{      14,
       0,       0,       0,       0,       0,   11586,   23169,   11586,       0,       0,       0,       0,       0,       0,
       0,     226,     452,   -1540,   -3529,    5567,   14663,  -31675,   14663,    5567,   -3529,   -1540,     452,     226,
    -226,       0,    1540,       0,   -5567,   11586,   31675,   11586,   -5567,       0,    1540,       0,    -226,       0,
       0,     226,       0,   -1540,       0,    5567,   11586,  -31675,   11586,    5567,       0,   -1540,       0,     226
};
int rbio28[73] = 
{      18,
       0,       0,       0,       0,       0,       0,       0,   11586,   23169,   11586,       0,       0,       0,       0,       0,       0,       0,       0,
       0,     -49,     -98,     422,     946,   -1736,   -4420,    5367,   15158,  -31181,   15158,    5367,   -4420,   -1736,     946,     422,     -98,     -49,
      49,       0,    -422,       0,   -1736,       0,   -5367,   11586,   31181,   11586,   -5367,       0,    1736,       0,    -422,       0,      49,       0,
       0,     -49,       0,     422,       0,   -1736,       0,    5367,   11586,  -31181,   11586,    5367,       0,    1736,       0,     422,       0,     -49
};
int rbio31[17] = 
{       4,
    5793,   17376,   17376,    5793,
  -11586,  -32767,   32767,   11586,
   32767,   17376,  -11586,    5793,
    5793,   11586,   17376,  -32767
};
int rbio33[33] = 
{       8,
       0,       0,    5793,   17376,   17376,    5793,       0,       0,
    2172,    6517,   -5069,  -32583,   32583,    5069,   -6517,   -2172,
   -6517,       0,   32583,   17376,   -5069,    5793,    2172,       0,
       0,   -2172,    5793,    5069,   17376,  -32583,       0,    6517
};
int rbio35[49] = 
{      12,
       0,       0,       0,       0,    5793,   17376,   17376,    5793,       0,       0,       0,       0,
    -452,   -1356,    1720,    8778,   -2352,  -31675,   31675,    2352,   -8778,   -1720,    1356,     452,
    1356,       0,   -8778,       0,   31675,   17376,   -2352,    5793,    1720,       0,    -452,       0,
       0,     452,       0,   -1720,    5793,    2352,   17376,  -31675,       0,    8778,       0,   -1356
};
int rbio37[65] = 
{      16,
       0,       0,       0,       0,       0,       0,    5793,   17376,   17376,    5793,       0,       0,       0,       0,       0,       0,
      98,     298,    -550,   -2447,    1025,    9869,    -868,  -31181,   31181,     868,   -9869,   -1025,    2447,     550,    -298,     -98,
    -298,       0,    2447,       0,   -9869,       0,   31181,   17376,    -868,    5793,    1025,       0,    -550,       0,      98,       0,
       0,     -98,       0,     550,       0,   -1025,    5793,     868,   17376,  -31181,       0,    9869,       0,   -2447,       0,     298
};
int rbio39[81] = 
{      20,
       0,       0,       0,       0,       0,       0,       0,       0,    5793,   17376,   17376,    5793,       0,       0,       0,       0,       0,       0,       0,       0,
     -22,     -65,     167,     675,    -462,   -3247,     403,   10491,      68,  -30869,   30869,     -68,  -10491,    -403,    3247,     462,    -675,    -167,      65,      22,
      65,       0,    -675,       0,    3247,       0,  -10491,       0,   30869,   17376,      68,    5793,     403,       0,    -462,       0,     167,       0,     -22,       0,
       0,      22,       0,    -167,       0,     462,       0,    -403,    5793,     -68,   17376,  -30869,       0,   10491,       0,   -3247,       0,     675,       0,     -65
};
int rbio44[41] = 
{      10,
       0,   -2113,   -1333,   13699,   25836,   13699,   -1333,   -2113,       0,       0,
       0,   -1238,    -779,    3624,   12366,  -27940,   12366,    3624,    -779,   -1238,
    1238,   -2113,   -3624,   13699,   27940,   13699,   -3624,   -2113,    1238,       0,
       0,   -1238,   -2113,    3624,   13699,  -27940,   13699,    3624,   -2113,   -1238
};
int rbio55[49] = 
{      12,
     442,     -88,   -4479,   -3063,   15623,   29473,   15623,   -3063,   -4479,     -88,     442,       0,
       0,       0,    1300,    -258,   -1785,  -11324,   24139,  -11324,   -1785,    -258,    1300,       0,
       0,     -88,     258,   -3063,   11324,   29473,   11324,   -3063,     258,     -88,       0,       0,
       0,       0,     -88,    -258,   -3063,  -11324,   29473,  -11324,   -3063,    -258,     -88,       0
};
int rbio68[73] = 
{      18,
       0,       0,       0,     471,     475,   -2578,   -1323,   13690,   24866,   13690,   -1323,   -2578,     475,     471,       0,       0,       0,       0,
       0,     -62,     -62,     557,     389,   -1628,   -2532,    3083,   13788,  -27062,   13788,    3083,   -2532,   -1628,     389,     557,     -62,     -62,
      62,       0,    -557,     471,    1628,   -2578,   -3083,   13690,   27062,   13690,   -3083,   -2578,    1628,     471,    -557,       0,      62,       0,
       0,     -62,       0,     557,     471,   -1628,   -2578,    3083,   13690,  -27062,   13690,    3083,   -2578,   -1628,     471,     557,       0,     -62
};
 int sym2[17] = 
{       4,
   15826,   27409,    7343,   -4240,
   -4240,   -7343,   27409,  -15826,
    7343,   27409,   15826,   -4240,
   -4240,  -15826,   27409,   -7343
};
int sym3[25] = 
{       6,
   10901,   26439,   15069,   -4423,   -2798,    1153,
    1153,    2798,   -4423,  -15069,   26439,  -10901,
   -2798,   26439,   15069,   -4423,   10901,    1153,
    1153,  -10901,   -4423,  -15069,   26439,    2798
};
int sym4[33] = 
{       8,
    1055,    -412,   -3250,    9761,   26334,   16304,    -969,   -2483,
   -2483,     969,   16304,  -26334,    9761,    3250,    -412,   -1055,
    -969,    -412,   26334,    9761,   -3250,   16304,    1055,   -2483,
   -2483,   -1055,   16304,    3250,    9761,  -26334,    -412,     969
};
int sym5[41] = 
{      10,
     638,    -691,   -5744,     543,   20774,   23703,    6533,   -1281,     966,     894,
     894,    -966,   -1281,   -6533,   23703,  -20774,     543,    5744,    -691,    -638,
     966,    -691,    6533,     543,   20774,   23703,   -5744,   -1281,     638,     894,
     894,    -638,   -1281,    5744,   23703,  -20774,     543,   -6533,    -691,    -966
};
int sym6[49] = 
{      12,
    -255,      58,    1464,    -691,   -2378,   11071,   25807,   16091,   -1582,   -3866,     114,     504,
     504,    -114,   -3866,    1582,   16091,  -25807,   11071,    2378,    -691,   -1464,      58,     255,
     114,      58,   -1582,    -691,   25807,   11071,   -2378,   16091,    1464,   -3866,    -255,     504,
     504,     255,   -3866,   -1464,   16091,    2378,   11071,  -25807,    -691,    1582,      58,    -114
};
int sym7[57] = 
{      14,
     337,     131,   -3532,   -4587,    9456,   25158,   17566,     570,   -1625,    2224,     999,    -412,     -32,      88,
      88,      32,    -412,    -999,    2224,    1625,     570,  -17566,   25158,   -9456,   -4587,    3532,     131,    -337,
     -32,     131,     999,   -4587,   -1625,   25158,   17566,     570,    9456,    2224,   -3532,    -412,     337,      88,
      88,    -337,    -412,    3532,    2224,   -9456,     570,  -17566,   25158,    1625,   -4587,    -999,     131,      32
};
int sym8[65] = 
{      16,
      62,      -9,    -491,     124,    1608,    -891,   -1700,   11940,   25466,   15774,   -2008,   -4695,     249,    1038,     -16,    -111,
    -111,      16,    1038,    -249,   -4695,    2008,   15774,  -25466,   11940,    1700,    -891,   -1608,     124,     491,      -9,     -62,
     -16,      -9,     249,     124,   -2008,    -891,   25466,   11940,   -1700,   15774,    1608,   -4695,    -491,    1038,      62,    -111,
    -111,     -62,    1038,     491,   -4695,   -1608,   15774,    1700,   11940,  -25466,    -891,    2008,     124,    -249,      -9,      16
};
int sym9[73] = 
{      18,
      36,     -16,    -337,     291,    2034,    -596,   -6278,    1156,   20227,   23523,    7824,   -1789,      19,     989,    -376,    -435,      19,      45,
      45,     -19,    -435,     376,     989,     -19,   -1789,   -7824,   23523,  -20227,    1156,    6278,    -596,   -2034,     291,     337,     -16,     -36,
      19,     -16,    -376,     291,      19,    -596,    7824,    1156,   20227,   23523,   -6278,   -1789,    2034,     989,    -337,    -435,      36,      45,
      45,     -36,    -435,     337,     989,   -2034,   -1789,    6278,   23523,  -20227,    1156,   -7824,    -596,     -19,     291,     376,     -16,     -19
};
int sym10[81] = 
{      20,
     -16,       3,     150,     -26,    -668,     190,    1638,   -1048,   -1163,   12575,   25214,   15456,   -2323,   -5226,     380,    1504,     -49,    -281,       3,      26,
      26,      -3,    -281,      49,    1504,    -380,   -5226,    2323,   15456,  -25214,   12575,    1163,   -1048,   -1638,     190,     668,     -26,    -150,       3,      16,
       3,       3,     -49,     -26,     380,     190,   -2323,   -1048,   25214,   12575,   -1163,   15456,    1638,   -5226,    -668,    1504,     150,    -281,     -16,      26,
      26,      16,    -281,    -150,    1504,     668,   -5226,   -1638,   15456,    1163,   12575,  -25214,   -1048,    2323,     190,    -380,     -26,      49,       3,      -3
};

