import csv
import argparse
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.lines as mlines
import numpy as np

parser = argparse.ArgumentParser(
    prog='results_formater.py',
    description='Takes results obtained from fuzzing campaigns and makes sense of it.'
)
parser.add_argument('-f','--filename',dest='filename',action='store',
    help='Filename for insturmention'
)

global_pool_time = []
local_pool_time = []
interrupt_time = []
seed_pull_time = []
throughput_time = []
current_time = []
# setup_time = []
iter_count = []
stat_pull_time = []
intial_setup_time = []
intial_breakpoint_time = []
total_pool_refresh_time = 0
breakpoint_avg = 0
seed_pull_time_avg = 0
setup_time = 0


PACE_COLOR = '#fff500'
IMG_COLOR = '#00ff75'
MACV_COLOR = '#cd76ea'
SONAR_COLOR = '#ffb443'
TELE_COLOR = '#ff5e5e'
BRANCH_COLOR = '#39dbff'


def grab_results(lines):
    global total_pool_refresh_time, breakpoint_avg, seed_pull_time_avg,setup_time
    error_flag = False
    add_24 = False
    start_time = []

    lines = iter(lines)
    hours_spent = 0
    minutes_spent = 0
    seconds_spent = 0

    for line in lines:
        print(line)
        if 'Time of start =' in line:
            split_line = line.split('2024 ')
            time = split_line[1]
            start_time = time.split(':')
            #print(start_time)

        if 'Current time =' in line:
            hours_spent = 0
            minutes_spent = 0
            seconds_spent = 0


            split_line = line.split('2024 ')
            time = split_line[1]
            #print(time)
            current_time = time.split(':')

            if float(current_time[0]) - float(start_time[0]) < 0:
                add_24 = True
                hours_spent += (24 + float(current_time[0])) - float(start_time[0])
            elif add_24:
                hours_spent += (24 +float(current_time[0])) - float(start_time[0]) 
            else:
                hours_spent += float(current_time[0]) - float(start_time[0]) 

            if float(current_time[1]) - float(start_time[1]) < 0:
                hours_spent -= 1
                minutes_spent += (60+ float(current_time[1])) - float(start_time[1])
            else:
                minutes_spent += float(current_time[1]) - float(start_time[1]) 

            if float(current_time[2]) - float(start_time[2]) < 0:
                seconds_spent += (60+ float(current_time[2])) - float(start_time[2])
            else:
                seconds_spent += float(current_time[2]) - float(start_time[2]) 
            #minutes
            hours_spent += (float(minutes_spent+(seconds_spent/60))/60)
            #print(hours_spent)

            stat_pull_time.append(hours_spent)
        if 'DSLOG: Total number of iterations:' in line:
            print(line)
            split_line = line.split('s: ')
            itts = int(split_line[1])
            if(itts == 1):
                iter_count.append(0)
                continue
            if (hours_spent == 0):
                pass
            else:
                print(itts/((hours_spent * 3600) ))
                iter_count.append(itts/((hours_spent * 3600) ))
        elif 'write_local_pool' in line:
            print(line)
            split_line = line.split(' = ')
            time = float(split_line[1])
            local_pool_time.append(time)
        
        elif 'DSLOG: Time taken for refresh_global_pool' in line:
            split_line = line.split('= ')
            time = float(split_line[1])
            # global_pool_time.append("{:.20f}".format(time))
            global_pool_time.append(time)
        elif 'write_local_pool' in line:
            print(line)
            split_line = line.split(' = ')
            time = float(split_line[1])
            local_pool_time.append(time)
        elif 'DSLOG: Time taken for set_refresh_breakpoint' in line:
            split_line = line.split('= ')
            time = float(split_line[1])
            interrupt_time.append(time)
        elif 'DSERROR:Coverage map returned empty from the device.' in line:
            error_flag = True
        elif 'DSLOG: Time taken for current_seed_to_global_pool' in line:
            if error_flag:
                error_flag = False
                continue
            else:
                split_line = line.split('= ')
                time = float(split_line[1])
                seed_pull_time.append(time)
        elif 'Found coverage-increasing input:' in line:
            # print(next(lines), end='')
            # print(next(lines), end='')
            # print(next(lines), end='')
            # print(next(lines), end='')
            # print(next(lines), end='')
            pass
        elif 'DSLOG: Average throughput time:' in line:
            split_line = line.split('e: ')
            time = float(split_line[1])
            throughput_time.append(time)
        elif 'Time taken for set_intial_breakpoints' in line:
            split_line = line.split('= ')
            time = float(split_line[1])
            intial_breakpoint_time.append(time)
        elif 'DSLOG: Time taken for debug_server_setup' in line:
            split_line = line.split('= ')
            time = float(split_line[1])
            print(time)
            intial_setup_time.append(time)
    print(len(stat_pull_time))
    print(len(throughput_time))

    
    local_pool_time_avg = sum(local_pool_time)/len(local_pool_time)
    global_pool_time_avg = sum(global_pool_time)/len(global_pool_time)
    interrupt_time_avg = sum(interrupt_time)/len(interrupt_time)
    setup_time = sum(intial_setup_time)/len(intial_setup_time)
    breakpoint_avg = sum(intial_breakpoint_time)/len(intial_breakpoint_time)
    total_pool_refresh_time = local_pool_time_avg + global_pool_time_avg + interrupt_time_avg
    seed_pull_time_avg = sum(seed_pull_time)/len(seed_pull_time)
    #print (total_pool_refresh_time)
    #print(breakpoint_avg)
    print(iter_count)


def write_to_csv():

    i = 10
    return 




def main():
    global total_pool_refresh_time, breakpoint_avg, seed_pull_time_avg,setup_time
    args = parser.parse_args()
    filename = args.filename

    with open(filename, 'r') as fp:
        lines = fp.readlines()
    grab_results(lines)

    # print(seed_pull_time_avg)
    # print(total_pool_refresh_time)
    # print(breakpoint_avg)
    # print(setup_time)

    # #---Bar Graph Section---
    pace_results = [0.37444637800217606 , 0.06261860692072518 , 0.0243483336622982, 7.468146102008177]
    imgproc_results = [0.398771342006512, 0.060677183416136274, 0.029039421991910785, 7.10758133395575]
    machinev_results = [0.38831123799900524 ,0.08730514765201178 ,0.02837385299790185 ,6.953227160003735]
    telecom_results = [0.4138372869929299 ,0.11532895617796719, 0.02943481702823192, 8.478738259000238]
    sonar_results = [0.3866304256710767 ,0.09214803732709911 ,0.026117431007151026 ,6.892000900013954]
    branch_results = [0.38567813999785966 ,0.09708120832936534 ,0.03098275500087766 ,6.729138893999334]


    benchmarks = ("imgproc", "machinev", "telecom", "sonar", "pace", "branch" )
    overheads = {
        'Coverage Bubbling': (round(imgproc_results[0],3),round(machinev_results[0],3),round(telecom_results[0],3),round(sonar_results[0],3),round(pace_results[0],3),round(branch_results[0],3) ),
        'Local Pool Refresh': (round(imgproc_results[1],3),round(machinev_results[1],3),round(telecom_results[1],3),round(sonar_results[1],3),round(pace_results[1],3),round(branch_results[1],3) ),
        'Breakpoint Setting' : (round(imgproc_results[2],3),round(machinev_results[2],3),round(telecom_results[2],3),round(sonar_results[2],3),round(pace_results[2],3),round(branch_results[2],3) ),
        'Fuzzer Loading' : (round(imgproc_results[3],3),round(machinev_results[3],3),round(telecom_results[3],3),round(sonar_results[3],3),round(pace_results[3],3),round(branch_results[3],3) )
    }
    x = np.arange(len(benchmarks)) # Label Locations
    width = .25
    multiplier = 0
    plt.rcParams.update({'font.size': 10})

    fig, ax = plt.subplots(layout='constrained')
    for attribute, measurement in overheads.items():
        offset = width * multiplier
        rects = ax.bar(x + offset, measurement, width , label=attribute)
        ax.bar_label(rects, padding=3)
        multiplier +=1

    ax.set_ylabel('Time (Seconds)')
    ax.set_xlabel('Benchmarks')
    ax.set_xticks(x + width, benchmarks)
    ax.legend(loc='upper right', ncols=2, prop = {"size": 10})
    plt.ylim([0,9])
    # plt.xlim([0,9])

    plt.show()
    #---End Bar Graph Section---
    # ---Coverage Graph Section---
    # fig, ax = plt.subplots()
    # branch_label = mlines.Line2D([],[], color=BRANCH_COLOR, label='branch')
    # sonar_label = mlines.Line2D([],[], color=SONAR_COLOR, label='sonar')
    # telecom_label = mlines.Line2D([],[], color=TELE_COLOR, label='telecom')
    # machinev_label = mlines.Line2D([],[], color=MACV_COLOR, label='machinev')
    # imgproc_label = mlines.Line2D([],[], color=IMG_COLOR, label='imgproc')
    # pace_label = mlines.Line2D([],[], color=PACE_COLOR, label='pace')
    # ax.legend(loc='lower right',handles=[imgproc_label,machinev_label,telecom_label,
    #                    sonar_label,pace_label,branch_label])

    # branch_time = [0,0.2261,3.331,24]
    # branch_bb = [0,0,0,0]

    # imgproc_time = [0,0.000032193,24]
    # imgproc_bb = [0,20,20]

    # machinev_time = [0,0.000023611,0.000072792,24]
    # machinev_bb = [0,20,34,34]

    # telecom_time = [0,0.000032881,0.000055556,0.000069444,1.2,24]
    # telecom_bb = [0,20,21,22,23,24]

    # sonar_time = [0,0.000022482,0.000070485,0.000555556,24]
    # sonar_bb = [0,3,10,11, 11]

    # pace_time = [0,0.000025178,0.000073904,24]
    # pace_bb = [0,3,5,5]


    # plt.rcParams.update({'font.size': 10})
    # plt.plot(branch_time, branch_bb, c=BRANCH_COLOR)
    # plt.plot(telecom_time, telecom_bb, c=TELE_COLOR)
    # plt.plot(imgproc_time, imgproc_bb, c=IMG_COLOR)
    # plt.plot(machinev_time, machinev_bb, c=MACV_COLOR)
    # plt.plot(sonar_time, sonar_bb, c=SONAR_COLOR)
    # plt.plot(pace_time, pace_bb, c=PACE_COLOR)
    

    # plt.xlim([0,24])
    # plt.ylim([0, 35])
    # plt.yticks(np.arange(0,35,1))
    # plt.xticks(np.arange(0,25,1))
    # plt.ylabel('Coverage Found (Basic Block)')
    # plt.xlabel('Time (Hours)')
    # plt.show()
    # ---End Coverage Graph Section---
    # ---Throughput Section---
    # stat_pull_time.insert(0, 0)
    # throughput_time.insert(0,throughput_time[0])
    # fig, ax = plt.subplots()
    # baseline_label = mlines.Line2D([],[], color='#FFD801', label='branch')
    # ax.legend(handles=[baseline_label])
    
    # plt.rcParams.update({'font.size': 10})
    # plt.plot(stat_pull_time, throughput_time, c='#FFD801')
    # plt.xlim([0,24])
    # # plt.ylim([min(throughput_time) -0.01, max(throughput_time)+0.01])
    # # plt.yticks(np.arange(min(throughput_time),max(throughput_time),0.0025))
    # plt.xticks(np.arange(0,25,1))
    # plt.ylabel('Throughput Time (Seconds)')
    # plt.xlabel('Time (Hours)')
    # plt.show()
    #---End throughput section---
    # stat_pull_time.insert(0, 0)
    # print('---------------------------------------------------------')
    # print(stat_pull_time)
    # stat_pull_time.append(24)
    # # stat_pull_time.append()
    # iter_count.insert(0,iter_count[0])
    # iter_count.insert(1,iter_count[1])
    # print(iter_count)
    # pace_iter = [0, 27.688592839300583, 27.70012494793836, 27.70508192168842, 27.702145386377836, 27.704715880686553, 27.70712401055409, 27.714795857635995, 27.712009165711905, 27.71595222664568, 27.711464755874022, 27.710725647629147, 27.71198444660464, 27.713498269452636, 27.714855374360194, 27.715587156982558, 27.717373190292676, 27.716988530536224, 27.719285251365616, 27.720068415051312, 27.71928508936383, 27.7182875054557, 27.71575199787903, 27.718400173894143, 27.718327951949455, 27.717361597173618, 27.716871236302605, 27.709609500937596, 27.70964239892095, 27.71137413760364, 27.71217757180316, 27.71280663568445, 27.712199556793, 27.71366558602121, 27.71333581573488, 27.713284189906695, 27.713535676783838, 27.713723967182872, 27.71366573894995, 27.713250303906054, 27.71258287015335, 27.71227635383378, 27.71213373164686, 27.71232876712329, 27.713401479868544, 27.714187287151322, 27.7146868209004, 27.714562303802705, 27.712996323529413, 27.71341726618705, 27.713679577464788, 27.713293103448276, 27.71309121621622, 27.713228476821193, 27.713030746705712, 27.70940044411547, 27.708961115862884, 27.709529647074003, 27.709981644407872, 27.7101838623517, 27.71069882309897, 27.71097071680939, 27.710835931525384, 27.711052662003585, 27.710892664355928, 27.71077000432979, 27.710935890215257, 27.711596416070922, 27.712062981235952, 27.711441548751914, 27.710323852726265, 27.71002703148597, 27.7122142080328, 27.711553382514133, 27.71082685049213, 27.71002547938323, 27.70882567985094, 27.70814437545059, 27.707779994954013]
    # pace_pull = [0, 0.3336111111111111, 0.6669444444444445, 1.0002777777777778, 1.333611111111111, 1.6669444444444443, 2.000277777777778, 2.333611111111111, 2.6669444444444443, 3.000277777777778, 3.3338888888888887, 3.667222222222222, 4.000555555555556, 4.333888888888889, 4.667222222222222, 5.000555555555556, 5.333888888888889, 5.667222222222222, 6.000555555555556, 6.333888888888889, 6.6675, 7.0008333333333335, 7.3341666666666665, 7.6675, 8.000833333333333, 8.334166666666667, 8.44138888888889, 8.44361111111111, 8.44361111111111, 8.777222222222223, 9.110555555555555, 9.443888888888889, 9.777222222222223, 10.110555555555555, 10.443888888888889, 10.777222222222223, 11.110555555555555, 11.443888888888889, 11.777222222222223, 12.110833333333334, 12.444166666666666, 12.7775, 13.110833333333334, 13.444166666666666, 13.7775, 14.110833333333334, 14.444166666666666, 14.7775, 15.11111111111111, 15.444444444444445, 15.777777777777779, 16.11111111111111, 16.444444444444443, 16.77777777777778, 16.885277777777777, 16.8875, 16.887777777777778, 17.22111111111111, 17.554444444444446, 17.887777777777778, 18.22111111111111, 18.554444444444446, 18.887777777777778, 19.22111111111111, 19.554444444444446, 19.888055555555557, 20.22138888888889, 20.55472222222222, 20.888055555555557, 21.22138888888889, 21.55472222222222, 21.888055555555557, 22.22138888888889, 22.55472222222222, 22.888055555555557, 23.22138888888889, 23.555, 23.888333333333332, 24.221666666666668]
    # jpeg_iter = [0, 32.02583333333333, 31.98375, 31.94362677034157, 31.93209747969173, 31.92534577570405, 31.921955283988336, 31.918938221640282, 31.914800541610248, 31.91593370984168, 31.915007082743106, 31.91447617604727, 31.912442716289405, 31.912767593898216, 31.91215331508154, 31.912231974225087, 31.910634308926152, 31.911087148318792, 31.910795296731784, 31.911542847118675, 31.911132405632863, 31.90953457921676, 31.908760368139983, 31.908995399050827, 31.909280283303826, 31.90840915908409, 31.908149857385506, 31.90821837484184, 31.908936702080172, 31.909174496451456, 31.90942421464878, 31.910383571217373, 31.90995729611499, 31.910615089384912, 31.911013626115086, 31.911079897152653, 31.911304508841773, 31.911967390325195, 31.912924304885536, 31.91344756858388, 31.91344471294059, 31.913545371405345, 31.91415534173197, 31.915260149210347, 31.91570873970268, 31.91611887788168, 31.91701838601576, 31.9176136867299, 31.918114746983765, 31.918663378964375, 31.918790100824936, 31.91870078096919, 31.918725763548377, 31.919473005691287, 31.920223436101598, 31.920325424961366, 31.920408892063207, 31.9208987515715, 31.920825790880098, 31.92075530322289, 31.920937144126878, 31.92060868496182, 31.920961737470936, 31.921184546404433, 31.921660786126264, 31.922096734908404, 31.92241847311475, 31.922432126556146, 31.92305807099881, 31.924571594188897, 31.925934743533276, 31.926474039996243, 31.92685862420146]
    # jpeg_pull = [0.0, 0.3333333333333333, 0.6666666666666666, 1.0002777777777778, 1.333611111111111, 1.6669444444444443, 2.000277777777778, 2.333611111111111, 2.6669444444444443, 3.000277777777778, 3.333611111111111, 3.6669444444444443, 4.000555555555556, 4.333888888888889, 4.667222222222222, 5.000555555555556, 5.333888888888889, 5.667222222222222, 6.000555555555556, 6.333888888888889, 6.667222222222222, 7.0008333333333335, 7.3341666666666665, 7.6675, 8.000833333333333, 8.334166666666667, 8.6675, 9.000833333333333, 9.334166666666667, 9.6675, 10.000833333333333, 10.334166666666667, 10.667777777777777, 11.001111111111111, 11.334444444444445, 11.667777777777777, 12.001111111111111, 12.334444444444445, 12.667777777777777, 13.001111111111111, 13.334444444444445, 13.668055555555556, 14.001388888888888, 14.334722222222222, 14.668055555555556, 15.001388888888888, 15.334722222222222, 15.668055555555556, 16.00138888888889, 16.334722222222222, 16.668055555555554, 17.001666666666665, 17.335, 17.668333333333333, 18.001666666666665, 18.335, 18.668333333333333, 19.001666666666665, 19.335, 19.668333333333333, 20.001666666666665, 20.335277777777776, 20.66861111111111, 21.001944444444444, 21.335277777777776, 21.66861111111111, 22.001944444444444, 22.335277777777776, 22.66861111111111, 23.001944444444444, 23.335277777777776, 23.66888888888889, 24.002222222222223]
    # sonar_iter = [0, 1, 20.0, 32.34026622296173, 32.056203164029974, 32.007216208714965, 32.0963980845305, 32.155922038980506, 32.19200333194502, 32.224681661311436, 32.24804748516089, 32.266567937800815, 32.278490503165614, 32.29400181763102, 32.30533185226326, 32.31293258138939, 32.317483932397046, 32.32231726283048, 32.32519266819413, 32.32678265131095, 32.330062485535755, 32.33229554922166, 32.33759633409706, 32.33993255306487, 32.34341980685476, 32.34348849846042, 32.341213636048046, 32.34306472038925, 32.34381208741909, 32.34518299080417, 32.3470213652324, 32.349709820145954, 32.350386046769984, 32.351556200612805, 32.35123805556279, 32.35190749110006, 32.35292964442375, 32.35477420429928, 32.35572939569977, 32.35573220438219, 32.35744512903721, 32.35949751105604, 32.35877353774371, 32.35890505608844, 32.358831931439454, 32.3591691210665, 32.35945311316467, 32.36033550585098, 32.36141501231705, 32.36081121806804, 32.360742245135306, 32.361611317995546, 32.36112916395874, 32.36113970167786, 32.3614703007579, 32.3624487100882, 32.36322115755527, 32.362929859112256, 32.36357684868323, 32.36332407542757, 32.363281137767565, 32.36551334557266, 32.36558811276212, 32.36511405545691, 32.36532724096224, 32.3653304413379, 32.36496074780956, 32.365166450885134, 32.36568153413036, 32.366405093830444, 32.3665682322236, 32.34286377293046, 32.338926338413444, 32.33893855021493, 32.34024961186198, 32.34241716000901, 32.3428160348115, 32.34424206069974] 
    # sonar_pull = [0.0, 0.0, 0.0005555555555555556, 0.3338888888888889, 0.6672222222222222, 1.0008333333333332, 1.3341666666666667, 1.6675, 2.0008333333333335, 2.3341666666666665, 2.6675, 3.0011111111111113, 3.3344444444444443, 3.667777777777778, 4.001111111111111, 4.334444444444444, 4.667777777777777, 5.001111111111111, 5.334444444444444, 5.668055555555556, 6.001388888888889, 6.334722222222222, 6.668055555555556, 7.001388888888889, 7.334722222222222, 7.668055555555556, 8.001666666666667, 8.335, 8.668333333333333, 9.001666666666667, 9.335, 9.668333333333333, 10.001666666666667, 10.335, 10.668611111111112, 11.001944444444444, 11.335277777777778, 11.668611111111112, 12.001944444444444, 12.335277777777778, 12.668611111111112, 13.001944444444444, 13.335555555555555, 13.668888888888889, 14.002222222222223, 14.335555555555555, 14.668888888888889, 15.002222222222223, 15.335555555555555, 15.669166666666667, 16.0025, 16.335833333333333, 16.669166666666666, 17.0025, 17.335833333333333, 17.669166666666666, 18.0025, 18.336111111111112, 18.669444444444444, 19.002777777777776, 19.336111111111112, 19.669444444444444, 20.002777777777776, 20.336111111111112, 20.669444444444444, 21.003055555555555, 21.336388888888887, 21.669722222222223, 22.003055555555555, 22.336388888888887, 22.669722222222223, 22.74388888888889, 22.746666666666666, 22.746666666666666, 23.080277777777777, 23.413611111111113, 23.746944444444445, 24.080277777777777]
    # vision_iter = [0, 1, 34.37052456286428, 34.37775926697209, 34.43543460149959, 34.471151843365966, 34.48375270788202, 34.46195501249653, 34.43846703165913, 34.44094980212456, 34.452601370116646, 34.46483919346775, 34.47318588092713, 34.479655603388416, 34.486924753236764, 34.49044813426174, 34.49541743042826, 34.502213195854814, 34.50610204381709, 34.51090126371337, 34.51738806297417, 34.519476732075155, 34.52188231559735, 34.52101954249356, 34.52061295464426, 34.52058741841411, 34.5223970137315, 34.5236508139982, 34.52280582644118, 34.523449589334604, 34.524508677163546, 34.52395500624913, 34.523908076871386, 34.524046348131755, 34.524100492362074, 34.524249479230484, 34.52393762647304, 34.52338849670177, 34.52170877809305, 34.52080866552647, 34.51999743622613, 34.51920593259176, 34.5191033613787, 34.518569217950244, 34.51765298608689, 34.518880430254136, 34.5188216342326, 34.51812270183129, 34.51752442072792, 34.51611783290225, 34.514377540088766, 34.51389004616128, 34.51386279347133, 34.51484609098339, 34.51564268645453, 34.51598568078015, 34.5165585989577, 34.5173342459231, 34.51719097181616, 34.517268130099986, 34.51648118856627, 34.51588712365293, 34.51458154052097, 34.514991466086094, 34.51505773122248, 34.51493965550912, 34.513774051711984, 34.513653751467636, 34.51274111106966, 34.513362496783444, 34.51335587489434, 34.513950720152366, 34.51394202558385, 34.51385256336072]
    # vision_pull = [0.0, 0.0, 0.3336111111111111, 0.6669444444444445, 1.0002777777777778, 1.333611111111111, 1.6669444444444443, 2.0005555555555556, 2.3338888888888887, 2.667222222222222, 3.0005555555555556, 3.3338888888888887, 3.667222222222222, 4.000555555555556, 4.333888888888889, 4.6675, 5.0008333333333335, 5.3341666666666665, 5.6675, 6.0008333333333335, 6.3341666666666665, 6.6675, 7.0008333333333335, 7.334444444444444, 7.667777777777777, 8.001111111111111, 8.334444444444445, 8.667777777777777, 9.001111111111111, 9.334444444444445, 9.667777777777777, 10.001388888888888, 10.334722222222222, 10.668055555555556, 11.001388888888888, 11.334722222222222, 11.668055555555556, 12.001388888888888, 12.335, 12.668333333333333, 13.001666666666667, 13.335, 13.668333333333333, 14.001666666666667, 14.335, 14.668333333333333, 15.001944444444444, 15.335277777777778, 15.668611111111112, 16.001944444444444, 16.335277777777776, 16.66861111111111, 17.001944444444444, 17.335277777777776, 17.66888888888889, 18.002222222222223, 18.335555555555555, 18.66888888888889, 19.002222222222223, 19.335555555555555, 19.66888888888889, 20.002222222222223, 20.335833333333333, 20.669166666666666, 21.0025, 21.335833333333333, 21.669166666666666, 22.0025, 22.335833333333333, 22.669166666666666, 23.002777777777776, 23.336111111111112, 23.669444444444444, 24.002777777777776]
    # vpe_iter = [0, 20.0, 20.5, 35.14879467996675, 35.14024136496047, 35.1390507910075, 34.69775581634754, 34.779758956579165, 34.83326443433926, 34.881754759370935, 34.9117829778422, 34.93507091545404, 34.95571404876431, 34.96832101372756, 34.98056439341541, 34.9924000510921, 35.00349982204295, 35.00863835206822, 35.015784827872686, 35.02204408817635, 35.029318066392726, 35.03412222756901, 35.0384887152417, 35.12309523809524, 35.123068181818184, 35.122898550724635, 35.12236111111111, 35.12166666666666, 35.12214743589744, 35.12082960402457, 35.119907145620665, 35.11953679491969, 35.120441098858365, 35.12136770516921, 35.121533293403814, 35.12189086134188, 35.12055781579334, 35.120256178277224, 35.12013332716078, 35.120647718571234, 35.12159554405508, 35.120440997371965, 35.121117430160616, 35.121334064996034, 35.121540384500925, 35.12185338061741, 35.12179232240592, 35.1221413625169, 35.121929570320994, 35.12174668463229, 35.12120686063468, 35.121437317189304, 35.120725284981, 35.11809685641461, 35.11624254855458, 35.11621727851585, 35.11712059254687, 35.11850617377471, 35.11884532400863, 35.118631678970836, 35.119529925581126, 35.12069598621586, 35.12289253673305, 35.125112695680684, 35.12632045802758, 35.126683067481416, 35.12717756425279, 35.127527016806184, 35.127665484111255, 35.128421654831044, 35.12892276397858, 35.129493883367346, 35.129798707250586, 35.12964745094357, 35.12962920099991]
    # vpe_pull = [0.0, 0.0005555555555555556, 0.0005555555555555556, 0.33416666666666667, 0.6675, 1.0008333333333332, 1.3491666666666666, 1.6825, 2.015833333333333, 2.3491666666666666, 2.682777777777778, 3.016111111111111, 3.3494444444444444, 3.682777777777778, 4.016111111111111, 4.349444444444444, 4.682777777777778, 5.016388888888889, 5.349722222222222, 5.683055555555556, 6.016388888888889, 6.349722222222222, 6.683055555555556, 7.0, 7.333333333333333, 7.666666666666667, 8.0, 8.333333333333334, 8.666666666666666, 9.000277777777777, 9.33361111111111, 9.666944444444445, 10.000277777777777, 10.33361111111111, 10.666944444444445, 11.000277777777777, 11.33388888888889, 11.667222222222222, 12.000555555555556, 12.33388888888889, 12.667222222222222, 13.000833333333333, 13.334166666666667, 13.6675, 14.000833333333333, 14.334166666666667, 14.6675, 15.000833333333333, 15.334444444444445, 15.667777777777777, 16.00111111111111, 16.334444444444443, 16.66777777777778, 17.00111111111111, 17.334444444444443, 17.668055555555554, 18.00138888888889, 18.334722222222222, 18.668055555555554, 19.00138888888889, 19.335, 19.668333333333333, 20.001666666666665, 20.335, 20.668333333333333, 21.001666666666665, 21.335, 21.66861111111111, 22.001944444444444, 22.335277777777776, 22.66861111111111, 23.001944444444444, 23.335277777777776, 23.66888888888889, 24.002222222222223]
    # branch_pull = [0.0, 0.058333333333333334, 0.2261111111111111, 0.39305555555555555, 0.56, 0.7269444444444445, 0.795, 0.976388888888889, 1.1433333333333333, 1.3102777777777779, 1.4775, 1.6444444444444444, 1.8113888888888887, 1.9783333333333335, 2.145277777777778, 2.312222222222222, 2.4791666666666665, 2.6463888888888887, 2.8133333333333335, 2.980277777777778, 3.147222222222222, 3.163611111111111, 3.3313888888888887, 3.498333333333333, 3.665277777777778, 3.832222222222222, 3.9991666666666665, 4.166388888888889, 4.316666666666666, 4.483611111111111, 4.650555555555556, 4.8175, 4.9847222222222225, 5.151666666666666, 5.318611111111111, 5.485555555555556, 5.6525, 5.695, 5.876944444444445, 5.961944444444445, 6.142777777777778, 6.31, 6.476944444444444, 6.643888888888889, 6.810833333333333, 6.977777777777778, 7.144722222222223, 7.311944444444444, 7.478888888888889, 7.645833333333333, 7.812777777777778, 7.91, 8.0925, 8.220277777777778, 8.4025, 8.569444444444445, 8.736666666666666, 8.903611111111111, 9.070555555555556, 9.2375, 9.404444444444444, 9.571666666666667, 9.726666666666667, 9.758055555555556, 9.92361111111111, 9.936388888888889, 9.970833333333333, 10.151944444444444, 10.318888888888889, 10.485833333333334, 10.652777777777779, 10.697777777777778, 10.87888888888889, 11.045833333333333, 11.212777777777777, 11.379722222222222, 11.546944444444444, 11.713888888888889, 11.880833333333333, 12.047777777777778, 12.215, 12.381944444444445, 12.54888888888889, 12.576666666666666, 12.759444444444444, 12.795, 12.977777777777778, 13.144722222222223, 13.311666666666667, 13.47888888888889, 13.645833333333334, 13.812777777777777, 13.979722222222222, 14.146666666666667, 14.313888888888888, 14.480833333333333, 14.647777777777778, 14.814722222222223, 14.981666666666667, 15.14861111111111, 15.315833333333334, 15.482777777777777, 15.649722222222222, 15.8, 15.966944444444444, 16.13388888888889, 16.300833333333333, 16.468055555555555, 16.635, 16.801944444444445, 16.968888888888888, 17.135833333333334, 17.137777777777778, 17.319166666666668, 17.32, 17.5025, 17.669444444444444, 17.836388888888887, 18.003333333333334, 18.170277777777777, 18.2775, 18.32, 18.501944444444444, 18.669166666666666, 18.836111111111112, 19.003055555555555, 19.053055555555556, 19.235555555555557, 19.24, 19.421666666666667, 19.58861111111111, 19.755833333333335, 19.922777777777778, 20.08972222222222, 20.256666666666668, 20.42361111111111, 20.607222222222223, 20.774444444444445, 20.941388888888888, 21.108333333333334, 21.205555555555556, 21.388055555555557, 21.555, 21.72222222222222, 21.889166666666668, 22.05611111111111, 22.223055555555554, 22.39, 22.556944444444444, 22.740833333333335, 22.746944444444445, 22.929166666666667, 23.09638888888889, 23.263333333333332, 23.43027777777778, 23.59722222222222, 23.764166666666668, 23.93138888888889]
    # branch_iter = [0, 23.066666666666666, 30.173218673218674, 31.292579505300353, 31.727182539682538, 31.96637371035537, 32.04926624737946, 32.20825035561877, 32.29251700680272, 32.35509857960568, 32.394811054709535, 32.44493243243243, 32.47416040484589, 32.49859590002808, 32.52104104622556, 32.53471888515137, 32.548011204481796, 32.555788810748396, 32.57494075829384, 32.58244011557461, 32.59152691968226, 32.5922381245061, 32.59818227299258, 32.60639987295538, 32.613414172034865, 32.62547115105828, 32.6343682711676, 32.63697579838656, 32.76853281853282, 32.77008859426306, 32.77212997252419, 32.770858559649426, 32.76884926163277, 32.76954599374528, 32.77359377448164, 32.77739517925866, 32.779153766769866, 32.68207979709297, 32.68833010351184, 32.68932581652145, 32.695351361128694, 32.69880260609262, 32.70030449886349, 32.70223262814616, 32.705575268159386, 32.708320063694266, 32.70910928813032, 32.7096075675265, 32.71571831822909, 32.71698455949137, 32.71990329232738, 32.720677061385025, 32.7217931555281, 32.78802419491096, 32.789513702932325, 32.79079416531604, 32.78793081521048, 32.78691542133342, 32.78636614197342, 32.78929484288077, 32.789195415879014, 32.789424807011436, 32.73412154443683, 32.73389507244727, 32.79000699790063, 32.790165217634396, 32.79133584064633, 32.792048594959915, 32.79094433078497, 32.790431534610185, 32.79027379400261, 32.73956169505609, 32.74098662036564, 32.740399849113544, 32.74136649655651, 32.7429638489516, 32.74367918400731, 32.74410718520275, 32.74419583362559, 32.745250391957946, 32.74387137854187, 32.74404935501963, 32.744443952541175, 32.74456665783197, 32.74491661949754, 32.74516955407928, 32.74529109589041, 32.74586335876249, 32.7475898334794, 32.74701178798121, 32.7464631043257, 32.74745605920444, 32.74705426510621, 32.74658341187559, 32.74760333786144, 32.74834551418542, 32.748274292649626, 32.74902968143551, 32.74865576445285, 32.74900522600165, 32.74842664635363, 32.74943485593312, 32.74976481655691, 32.78496835443038, 32.787112263182614, 32.78652594607623, 32.78600276059506, 32.784701020494225, 32.78425675450021, 32.78454874601154, 32.78367273441593, 32.78342978488872, 32.78342193983403, 32.78305987265232, 32.78315050038491, 32.784554587439885, 32.783980506209716, 32.78380651290278, 32.78406776522866, 32.78446180422852, 32.75449474916032, 32.785707787481805, 32.78622367018482, 32.785891770447414, 32.78658015042029, 32.78702255485229, 32.78675044830955, 32.788412661737524, 32.788129475629475, 32.788580909064905, 32.78893631503566, 32.78902152669394, 32.78938122194027, 32.78933396015099, 32.78908178377489, 32.78871132267936, 32.76376944436956, 32.763197304380384, 32.763506612370506, 32.76404790103961, 32.790083835472885, 32.790368455913864, 32.79067759478337, 32.79039641943734, 32.79061179426657, 32.78987934812725, 32.78875792157794, 32.787802094188876, 32.78670032633458, 32.76367767232218, 32.76392433660199, 32.76371676055485, 32.76298603677824, 32.7629197115155, 32.76270020984244, 32.7627427898764, 32.762808149524844, 32.763026244007754]



    # fig, ax = plt.subplots()
    # pace_label = mlines.Line2D([],[], color='#fff500', label='pace')
    # img_label = mlines.Line2D([],[], color='#00ff75', label='imgproc')
    # machinev_label = mlines.Line2D([],[], color='#cd76ea', label='machinev')
    # sonar_label = mlines.Line2D([],[], color='#ffb443', label='sonar')
    # telecom_label = mlines.Line2D([],[], color='#ff5e5e', label='telecom')
    # branch_label = mlines.Line2D([],[], color='#39dbff', label='branch')
    # ax.legend(handles=[img_label,machinev_label,telecom_label,sonar_label,pace_label,branch_label])



    # plt.rcParams.update({'font.size': 10})
    # plt.plot(pace_pull, pace_iter, c='#fff500')
    # plt.plot(jpeg_pull, jpeg_iter, c='#00ff75')
    # plt.plot(sonar_pull, sonar_iter, c='#ffb443')
    # plt.plot(vision_pull, vision_iter, c='#cd76ea')
    # plt.plot(vpe_pull, vpe_iter, c='#ff5e5e')
    # plt.plot(branch_pull, branch_iter, c='#39dbff')




    # plt.xlim([0,24])
    # plt.ylim([min(stat_pull_time), 37])
    # # plt.yticks(np.arange(min(throughput_time),max(throughput_time),0.0025))
    # plt.yticks(np.arange(0,38,1))
    # plt.xticks(np.arange(0,25,1))
    # plt.ylabel('Test Cases Executed Per Second')
    # plt.xlabel('Time (Hours)')
    # plt.show()

    #-------Stacked Bar---------

# test_cases = (
#    "imgproc", "machinev", "telecom", "sonar", "pace", "branch", 
# )
# block_counts = {
#     "Found Basic Blocks": np.array([20, 34, 24, 11, 5, 4]),
#     "Total Basic Blocks": np.array([205, 139,218,36, 47, 11]),
    
# }
# width = 0.5

# fig, ax = plt.subplots()
# bottom = np.zeros(6)
# i = 0
# # for boolean, weight_count in block_counts.items():
# #     if(i < 1):
# #         color = '#ff4948'
        
# #     else:
# #         color = '#ffa9a9'
# #     p = ax.bar(test_cases, weight_count, width, label=boolean, bottom=bottom,color=color )
# #     bottom += weight_count
# #     i+=1
# # for boolean, weight_count in block_counts["Found Basic Blocks"]:

#     # bottom += weight_count
# # for boolean, weight_count in block_counts["Total Basic Blocks"]:
# # bottom = 0
# color = '#ffa9a9'
# weight_count = block_counts["Total Basic Blocks"]
# p = ax.bar(test_cases, weight_count, width, label="Total Basic Blocks",color=color )
# weight_count = block_counts["Found Basic Blocks"]
# color = '#ff4948'
# # bottom += weight_count

# p = ax.bar(test_cases, weight_count, width, label="Found Basic Blocks",color=color )    

# y_offset = -3
# for bar in ax.patches:
#   print(bar.get_height())
#   ax.text(
#       # Put the text in the middle of each bar. get_x returns the start
#       # so we add half the width to get to the middle.
#       bar.get_x() + bar.get_width() / 2,
#       # Vertically, add the height of the bar to the start of the bar,
#       # along with the offset.
#       bar.get_height() + bar.get_y() + y_offset,
#       # This is actual value we'll show.
#       bar.get_height(),
#       # Center the labels and style them a bit.
#       ha='center',
#       color='black',
#     #   weight='bold',
#       size=7
# )

# ax.legend(loc="upper right")
# plt.ylim(0,240)
# plt.yticks(np.arange(0,250,10))
# plt.ylabel('Total Number of Reached Basic Blocks')
# plt.xlabel('Benchmarks')

# plt.show()


    #---------End Bar----------


if __name__ =='__main__':
    main()
